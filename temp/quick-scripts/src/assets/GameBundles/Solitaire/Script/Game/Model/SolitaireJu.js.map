{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Game\\Model\\SolitaireJu.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Poker from \"./Poker\"\nimport PokerGroup, { IPokerGroupEventListener } from \"./PokerGroup\"\nimport { ELocation, EPokerStatus, EGameType, ESuit } from \"../../SolitaireEnums\"\nimport { SolitaireEvent } from \"../../SolitaireEvent\"\nimport { Cmd, CmdChange, CmdStack, EActionType, EChangeType, ETOperationHint, ETUndoCmd, OperationHint, SnapCmd, SnapData, SolitaireDataBattleResult } from \"../SolitaireType\"\nimport { TSolitaireTestData } from \"./SolitaireTestData\"\n\ntype AUTO_RUN_CALLBACK = (isFinished: boolean, seed: number, gameModel: SolitaireJu)=>void\n\nexport interface ISolitaireJuEventListener {\n    SolitaireJuEventTarget: any;\n    OnSolitaireDesktopEvent(desktop: SolitaireJu, eventTyp: SolitaireEvent, data?: any): void;\n}\n\nexport class SolitaireJu extends ii.Entity implements IPokerGroupEventListener{\n    static readonly event = {\n        EVENT_LEVEL_MODEL_USING_HINT: \"EVENT_LEVEL_MODEL_USING_HINT\"\n    }\n    readonly flipCloseCardsCountBV: ii.NumberBV = ii.NumberBV.Borrow(0); /** Close 区域翻的次数 */\n    //#region //! 连续收牌音效递进\n    readonly foundationCounts: ii.NumberBV = ii.NumberBV.Borrow(-1)\n    private __AddFoundationsCount() { this.foundationCounts.v += 1 }\n    private __StopFoundationsCount() { this.foundationCounts.SetValueWithoutNotification(-1); }\n    //#endregion 连续收牌音效递进\n\n    //#region //! 创建一局时所需数据\n    private _isCard3Mode: boolean = false\n    get isCard3Mode(): boolean { return this._isCard3Mode }\n    private _isVegasMode: boolean = false\n    get isVegasMode(): boolean { return this._isVegasMode }\n    private cardMode: number = 1\n    private _gameType: EGameType = EGameType.EASY;\n    get gameType(): EGameType { return this._gameType; }\n    //#endregion\n\n    //#region //! 对外事件的绑定机制\n    AddEventListener(listener: ISolitaireJuEventListener) { this.on(\"__g_SolitaireJuEvent\", listener.OnSolitaireDesktopEvent.bind(listener, this), listener.SolitaireJuEventTarget); }\n    RemoveEventListener(listener: ISolitaireJuEventListener) { this.targetOff(listener.SolitaireJuEventTarget); }\n    private NotifyGameEvent(eventTyp: SolitaireEvent, arg1?, arg2?, arg3?, arg4?) { this.emit(\"__g_SolitaireJuEvent\", eventTyp, arg1, arg2, arg3, arg4); }\n    //#endregion\n\n    private readonly _CONST_SHUFFLE: number = 256 // 洗牌次数 256 次，不允许改变\n    private m_Rander: ii.MCGRand = null\n    get Seed(): number { return this.m_Rander.seed }\n    private _receiveGroups: PokerGroup[] = []\n    private _playGroups: PokerGroup[] = []\n    private _closeAreaGroup: PokerGroup = null\n    private _openAreaGroup: PokerGroup = null\n    get CloseAreaGroup(): PokerGroup { return this._closeAreaGroup; }\n    get OpenAreaGroup(): PokerGroup { return this._openAreaGroup; }\n    get PlayGroups(): PokerGroup[] { return this._playGroups; }\n    get ReceiveGroups(): PokerGroup[] { return this._receiveGroups; }\n\n    private _pokers: Poker[] = [] /* 所有扑克的原始数据 */\n    private getPoker(point: number, suit: number) { return this._pokers[(point-1)*4 + suit] }\n    \n    getPlayGroup(playIndex: number): PokerGroup { return this._playGroups[playIndex] }\n    getReceiveGroup(receiveIndex: number): PokerGroup { return this._receiveGroups[receiveIndex] }\n    getOpenGroupPoker(index: number) { return this._openAreaGroup.GetPoker(index) }\n    getCloseGroupPoker(index: number) { return this._closeAreaGroup.GetPoker(index) }\n\n    //#region  //! IPokerGroupEventListener\n    OnGroupPokerStateChanged(poker: Poker, status: EPokerStatus){\n        this.__refreshAllPokerOpenStatus()\n        if(poker.location === ELocation.PLAY && status === EPokerStatus.OPEN) {\n            this.NotifyGameEvent(SolitaireEvent.SC_FLIP_POKER, poker)\n        }\n    }\n    //#endregion\n\n    //#region //! Entity 生命周期\n    constructor(gameType: EGameType, isVegasMode: boolean, isCard3Mode: boolean) {\n        super();\n        this._gameType = gameType;\n        this._isCard3Mode = isCard3Mode\n        this._isVegasMode = isVegasMode\n        this.cardMode = this._isCard3Mode ? 3 : 1\n        this.hasNextBV = ii.BooleanBV.Borrow(true).ReturnBy(this);\n        this.isHintedBV = ii.BooleanBV.Borrow(false).ReturnBy(this);\n        this.isHelpedBV = ii.BooleanBV.Borrow(false).ReturnBy(this);\n        this.isPlayerOpenedBV = ii.BooleanBV.Borrow(false).ReturnBy(this);\n        this.isAutoPlayingBV = ii.BooleanBV.Borrow(false).ReturnBy(this);\n        this.hasUsedUndo = ii.BooleanBV.Borrow(false).ReturnBy(this);\n        this.scoreBV = ii.NumberBV.Borrow(this._isVegasMode ? 0 : 1000).ReturnBy(this);\n        this.isContinueBV = ii.BooleanBV.Borrow(false).ReturnBy(this);\n        this.isGameLoseBV = ii.BooleanBV.Borrow(false).ReturnBy(this);\n\n        this.hasNextBV.Bind(v => this.__UpdateGameLose(), true, this);\n        this.isContinueBV.Bind(v => this.__UpdateGameLose(), true, this);\n    }\n\n    Reset() {\n        this.SetTimerActive(false);\n        this._playGroups.forEach(g=>g.targetOff(this));\n    }\n\n    Enter(seed: number) {\n        let snapData: SnapData = {\n            resume: false,\n            vegas: this._isVegasMode,\n            card3: this._isCard3Mode,\n            seed: seed,\n            tick: 0,\n            hinted: false,\n            helped: false,\n            player: false,\n            undo: false,\n        }\n        this.EnterWithSnap(snapData)\n    }\n\n    Exit() {\n        this.Return();\n    }\n\n    EnterWithTestData(testData: TSolitaireTestData) {\n        this.m_Rander = new ii.MCGRand(0)\n        this.scoreBV.SetValueWithoutNotification(this._isVegasMode ? 0 : 1000);\n        this.hasNextBV.SetValueWithoutNotification(true);\n        this.resetMoveStepCount(0);\n        this.isHelpedBV.SetValueWithoutNotification(true);\n        this.isHintedBV.SetValueWithoutNotification(true);\n        this.isPlayerOpenedBV.v = true;\n        this.hasUsedUndo.SetValueWithoutNotification(false);\n        \n        this._gameTime = 0;\n        this.SetTimerActive(true)\n\n        this._closeAreaGroup = new PokerGroup(ELocation.CLOSE).ReturnBy<PokerGroup>(this);\n        this._closeAreaGroup.AddEventListener(this);\n        \n        this._openAreaGroup = new PokerGroup(ELocation.OPEN).ReturnBy<PokerGroup>(this);\n        this._openAreaGroup.AddEventListener(this);\n\n        for (let i = 0; i < 4; ++i) {\n            let pokerGroup = new PokerGroup(ELocation.RECEIVE).ReturnBy<PokerGroup>(this);\n            pokerGroup.index = this._receiveGroups.length\n            this._receiveGroups.push(pokerGroup)\n        }\n        for (let i = 0; i < 7; ++i) {\n            let pokerGroup = new PokerGroup(ELocation.PLAY).ReturnBy<PokerGroup>(this);\n            pokerGroup.index = this._playGroups.length\n            this._playGroups.push(pokerGroup)\n            pokerGroup.AddEventListener(this);\n        }\n        \n        // 牌局策略\n        this.m_strategyFn = this.__CreateStrategyFunc()\n\n        // 初始化扑克数据\n        testData.receives.forEach((receive, receiveIndex) => {\n            receive.forEach(p => {\n                let poker = new Poker(p[1], p[0], p[2])\n                poker.initLocation = ELocation.RECEIVE;\n                this._pokers.push(poker)\n                this._receiveGroups[receiveIndex].AddPoker(poker)\n            })\n        });\n        testData.plays.forEach((play, playIndex) => {\n            play.forEach(p => {\n                let poker = new Poker(p[1], p[0], p[2])\n                poker.initLocation = ELocation.PLAY;\n                this._pokers.push(poker)\n                this._playGroups[playIndex].AddPoker(poker)\n            })\n        });\n        testData.open.forEach(p => {\n            let poker = new Poker(p[1], p[0], p[2])\n            poker.initLocation = ELocation.OPEN;\n            this._pokers.push(poker)\n            this._openAreaGroup.AddPoker(poker);\n        });\n        testData.close.forEach(p => {\n            let poker = new Poker(p[1], p[0], p[2])\n            poker.initLocation = ELocation.CLOSE;\n            this._pokers.push(poker)\n            this._closeAreaGroup.AddPoker(poker);\n        });\n\n        // 派发初始化牌局的事件\n        this.NotifyGameEvent(SolitaireEvent.SC_INIT, this._pokers)\n\n        // 通知 UI 层,发生变化\n        this.NotifyGameEvent(SolitaireEvent.SC_PLAY, this)\n\n        // 否则在这里才开始订阅\n        this.NotifyGameEvent(SolitaireEvent.SC_UI_SUBSCRIB)\n\n        // UI 刷新所有 Poker 位置\n        this.NotifyGameEvent(SolitaireEvent.SC_REFRESH_POKERS, this._pokers)\n\n        // 游戏胜利绑定\n        this.BindBV(this.isGameWinBV, win => {\n            if(win){\n                this.PauseTimer()\n            }\n        }, true)\n\n        this.BindBV(this.isGameLoseBV, lose => {\n            if(lose){\n                this.PauseTimer()\n            }else{\n                this.ResumeTimer()\n            }\n        }, true)\n    }\n\n    EnterWithSnap(snapData: SnapData) {        \n        this.m_Rander = new ii.MCGRand(snapData.seed)\n        console.log(`Seed: ${this.m_Rander.seed} Vegas: ${this._isVegasMode} 3Cards: ${this._isCard3Mode}`);\n        this.scoreBV.SetValueWithoutNotification(this._isVegasMode ? 0 : 1000);\n        this.hasNextBV.SetValueWithoutNotification(true);\n        this.resetMoveStepCount(0);\n        this.isHelpedBV.SetValueWithoutNotification(snapData.helped);\n        this.isHintedBV.SetValueWithoutNotification(snapData.hinted);\n        this.isPlayerOpenedBV.v = snapData.player;\n        this.hasUsedUndo.SetValueWithoutNotification(snapData.undo);\n        \n        this._gameTime = snapData.tick;\n        this.SetTimerActive(true)\n\n        this._closeAreaGroup = new PokerGroup(ELocation.CLOSE).ReturnBy<PokerGroup>(this);\n        this._closeAreaGroup.AddEventListener(this);\n        \n        this._openAreaGroup = new PokerGroup(ELocation.OPEN).ReturnBy<PokerGroup>(this);\n        this._openAreaGroup.AddEventListener(this);\n\n        for (let i = 0; i < 4; ++i) {\n            let pokerGroup = new PokerGroup(ELocation.RECEIVE).ReturnBy<PokerGroup>(this);\n            pokerGroup.index = this._receiveGroups.length\n            this._receiveGroups.push(pokerGroup)\n        }\n        for (let i = 0; i < 7; ++i) {\n            let pokerGroup = new PokerGroup(ELocation.PLAY).ReturnBy<PokerGroup>(this);\n            pokerGroup.index = this._playGroups.length\n            this._playGroups.push(pokerGroup)\n            pokerGroup.AddEventListener(this);\n        }\n        \n        // 牌局策略\n        this.m_strategyFn = this.__CreateStrategyFunc()\n\n        // 初始化扑克数据\n        for (let point = 1; point <= 13; ++point) {\n            for (let suit = 0; suit < 4; ++suit) {\n                let poker = new Poker(point, suit, EPokerStatus.CLOSE)\n                this._pokers.push(poker)\n            }\n        }\n\n        // 派发初始化牌局的事件\n        this.NotifyGameEvent(SolitaireEvent.SC_INIT, this._pokers)\n\n        // 将牌放到了发牌区\n        for(let i= this._pokers.length-1; i>=0; --i){\n            this._pokers[i].initLocation = ELocation.CLOSE\n            this._pokers[i].initStatus = EPokerStatus.CLOSE\n            this._closeAreaGroup.AddPoker(this._pokers[i])\n        }\n\n        // 洗牌\n        this.__shufflePokers(this._closeAreaGroup.pokers)\n\n        if(!snapData.resume){\n            // 非常重要，这里通知 UI 可以订阅数据库事件\n            this.NotifyGameEvent(SolitaireEvent.SC_UI_SUBSCRIB, this)\n        }\n\n        // 通知 UI 层,发生变化\n        this.NotifyGameEvent(SolitaireEvent.SC_PLAY, this)\n        // 发牌\n        let pokers = []\n        for (let cards = 7; cards >= 1; --cards) {\n            for (let i = 0; i < cards; ++i) {\n                let playIndex = 7 - cards + i\n                let group: PokerGroup = this._playGroups[playIndex]\n                let poker = this._closeAreaGroup.RemoveTop()\n                poker.initLocation = ELocation.PLAY\n                poker.status = i === 0 ? EPokerStatus.OPEN : EPokerStatus.CLOSE\n                poker.initStatus = poker.status\n                group.AddPoker(poker)\n                pokers.push(poker)\n            }\n        }\n        if(!snapData.resume){\n            // 派发通知\n            this.NotifyGameEvent(SolitaireEvent.SC_SEND_POKERS, pokers)\n        }\n\n        if(snapData.resume) {\n            // 通过操作来初始化\n            this.RedoCmds(snapData.cmds)\n\n            // 否则在这里才开始订阅\n            this.NotifyGameEvent(SolitaireEvent.SC_UI_SUBSCRIB)\n\n            // UI 刷新所有 Poker 位置\n            this.NotifyGameEvent(SolitaireEvent.SC_REFRESH_POKERS, this._pokers)\n        }\n\n        // 游戏胜利绑定\n        this.BindBV(this.isGameWinBV, win => {\n            if(win){\n                this.PauseTimer()\n            }\n        }, true)\n\n        this.BindBV(this.isGameLoseBV, lose => {\n            if(lose){\n                this.PauseTimer()\n            }else{\n                this.ResumeTimer()\n            }\n        }, true)\n    }\n\n    Snap(): SnapData {\n        let snapData: SnapData = {\n            gameType: this._gameType,\n            resume: true,\n            vegas: this._isVegasMode,\n            card3: this._isCard3Mode,\n            seed: this.Seed,\n            cmds: this.SnapUndoCmds(),\n            tick: this._gameTime,\n            score: this.scoreBV.v,\n            helped: this.isHelpedBV.v,\n            player: this.isPlayerOpenedBV.v,\n            hinted: this.isHintedBV.v,\n            undo: this.hasUsedUndo.v,\n        }\n        return snapData\n    }\n    \n    private __shufflePokers(pokers: Poker[]) {\n        for (let i = 0; i < this._CONST_SHUFFLE; ++i) {\n            let sIdx = this.m_Rander.range(0, pokers.length-1)\n            let eIdx = this.m_Rander.range(0, pokers.length-1)\n            let tmpVal = pokers[sIdx]\n            pokers[sIdx] = pokers[eIdx]\n            pokers[eIdx] = tmpVal\n        }\n    } \n    //#endregion\n\n    //#region //! 游戏计时 Timer\n    private _gameTime: number = 0;\n    get gameTime(): number { return this._gameTime; }\n    private _isTimerActive: boolean = false;\n    private _isPauseTimer: boolean = false;\n    private SetTimerActive(active: boolean) { this._isTimerActive = active; }\n    private PauseTimer() { this._isPauseTimer = true; }\n    private ResumeTimer() { this._isPauseTimer = false; }\n    Tick() {\n        if((!this._isPauseTimer) && this._isTimerActive) {\n            this._gameTime = this._gameTime+1;\n            this.NotifyGameEvent(SolitaireEvent.SC_TIME_CHANGED, this._gameTime);\n        }\n    }\n    //#endregion 游戏计时 Timer\n\n    //#region //! 游戏失败相关\n    /**\n     * 失败的条件是：用户未点击 Continue，并且没有下一步可走\n     */\n    hasNextBV: ii.BooleanBV = null; /** 没有下一步可走 */\n    isContinueBV: ii.BooleanBV = null; /** 失败页面弹出后，点击了继续按钮 */\n    isGameLoseBV: ii.BooleanBV = null;\n    private UpdateHasNextStep() { this.hasNextBV.v = this.__DoNextStep(true) } /** 这里涉及到结算，位置要放到最后 */\n    private __UpdateGameLose() {\n        let pre = this.isGameLoseBV.v;\n        this.isGameLoseBV.v = (!this.isGameWinBV.v) && (!this.isContinueBV.v) && (!this.hasNextBV.v);\n        let cur = this.isGameLoseBV.v;\n        if(cur && (cur !== pre)) {\n            this.NotifyGameEvent(SolitaireEvent.SC_LOSE);\n        }\n    }\n     //#endregion 游戏失败相关\n\n     //#region //! 游戏胜利\n    readonly isGameWinBV: ii.BooleanBV = ii.BooleanBV.Borrow(false)\n    private __CheckGameWin() {\n        if(this.isGameWinBV.v) {\n            return;\n        }\n        for(let receiveIndex = 0; receiveIndex < 4; ++receiveIndex) {\n            let rpg = this._receiveGroups[receiveIndex]\n            if(!(rpg.top && rpg.top.point === 13)){\n                return\n            }\n        }\n        this.isGameWinBV.v = true;\n        this.NotifyGameEvent(SolitaireEvent.SC_WIN);\n    }\n    //#endregion 游戏胜利\n\n    //#region //! 【移动步数】 【翻牌、收牌计分】 【最终得分】\n    // 【移动步数】\n    readonly moveStepCountBV: ii.NumberBV = ii.NumberBV.Borrow(0)\n    private UpdateMoveStep(ignoreStep: boolean) {\n        this.m_IsStepOperationHintCalculated = false\n        if(!ignoreStep){\n            ++this.moveStepCountBV.v;\n        }else{\n            --this.moveStepCountBV.v;\n        }\n    }\n    private resetMoveStepCount(count: number) {\n        this.m_IsStepOperationHintCalculated = false\n        this.moveStepCountBV.v = count\n        this.UpdateScore()\n    }\n\n    // 【翻牌、收牌计分】\n    private pokerReceiveScoreBV: ii.NumberBV = ii.NumberBV.Borrow(0)\n    private ChangeReceiveScore(change: number) {\n        this.pokerReceiveScoreBV.v += change\n    }\n    private vegasReceiveScoreBV: ii.NumberBV = ii.NumberBV.Borrow(0)\n    private ChangeVegasReceiveScore(change: number) {\n        this.vegasReceiveScoreBV.v += change\n    }\n    // 【最终得分】\n    scoreBV: ii.NumberBV = null;\n    private UpdateScore(notUpdateScore: boolean = false) {\n        if(notUpdateScore) {\n            return\n        }\n        if(this._isVegasMode){\n            this.scoreBV.v = this.vegasReceiveScoreBV.v\n        }else{\n            this.scoreBV.v = this.pokerReceiveScoreBV.v + (1000 - this.moveStepCountBV.v)\n        }\n    }\n    //#endregion\n\n    //#region\n    /*********************************************************************/\n    // 操作提示功能\n    // 描述：玩家点击【提示】，获取备选的操作列表，按照策略选择其中之一，并执行\n    /*********************************************************************/\n    /// 功能：界面调用此接口\n    private m_OperationHintIndex: number = 0\n    private m_OperationHintList: OperationHint[] = []\n    private m_IsStepOperationHintCalculated = false /* 当前步骤是否预计算完毕（主要用于提示） */\n    private __UpdateOperationHintStatus() {\n        if(!this.m_IsStepOperationHintCalculated) {\n            this.m_OperationHintList = this.__CalculateOperationHints()\n            this.m_OperationHintIndex = 0\n            this.m_IsStepOperationHintCalculated = true\n        }\n    }\n    HasOperationHint(): boolean {\n        this.__UpdateOperationHintStatus()\n        return this.m_OperationHintList.length > 0\n    }\n    DoOperationHint(): OperationHint {\n        this.__UpdateOperationHintStatus()\n        console.assert(this.HasOperationHint())\n        let index = this.m_OperationHintIndex\n        this.m_OperationHintIndex = (this.m_OperationHintIndex+1)%this.m_OperationHintList.length;\n        return this.m_OperationHintList[index]\n    }\n    // 计算当前可提示的步骤列表\n    private __CalculateOperationHints(): OperationHint[] {\n        let hints: OperationHint[] = []\n        // PLAY_TO_PLAY\n        for(let toPlayIndex=0; toPlayIndex <7; ++toPlayIndex){\n            let toPlayGroup = this._playGroups[toPlayIndex]\n            for(let fromPlayIndex=0; fromPlayIndex <7; ++fromPlayIndex){\n                let fromPlayGroup = this._playGroups[fromPlayIndex]\n                if(!fromPlayGroup.IsPokersEmpty() && toPlayGroup.IsConcatPoker(fromPlayGroup.rootOpenPoker)){\n                    hints.push({\n                        type: ETOperationHint.PLAY_TO_PLAY,\n                        from: fromPlayIndex,\n                        to: toPlayIndex\n                    })\n                }\n            }\n        }\n        // PLAY_TO_RECEIVE\n        for(let fromPlayIndex=0; fromPlayIndex <7; ++fromPlayIndex){\n            let fromPlayGroup = this._playGroups[fromPlayIndex]\n            if(!fromPlayGroup.IsPokersEmpty()){\n                for(let toReceiveIndex=0; toReceiveIndex <4; ++toReceiveIndex){\n                    let toReceiveGroup = this._receiveGroups[toReceiveIndex]\n                    if(toReceiveGroup.IsNextPoker(fromPlayGroup.top)){\n                        hints.push({\n                            type: ETOperationHint.PLAY_TO_RECEIVE,\n                            from: fromPlayIndex,\n                            to: toReceiveIndex\n                        })\n                        // Receive 可以接受 Play 以后， 不用再遍历其他的 Receive 区域\n                        break;\n                    }\n                }\n            }\n        }\n        // OPEN_TO_RECEIVE\n        if(this._openAreaGroup.top){\n            for(let toReceiveIndex=0; toReceiveIndex <4; ++toReceiveIndex){\n                let toReceiveGroup = this._receiveGroups[toReceiveIndex]\n                if(toReceiveGroup.IsNextPoker(this._openAreaGroup.top)){\n                    hints.push({\n                        type: ETOperationHint.OPEN_TO_RECEIVE,\n                        to: toReceiveIndex\n                    })\n                }\n            }\n        }\n        // OPEN_TO_PLAY\n        if(this._openAreaGroup.top){\n            for(let toPlayIndex=0; toPlayIndex <7; ++toPlayIndex){\n                let toPlayGroup = this._playGroups[toPlayIndex]\n                if(toPlayGroup.IsConcatPoker(this._openAreaGroup.top)){\n                    hints.push({\n                        type: ETOperationHint.OPEN_TO_PLAY,\n                        to: toPlayIndex\n                    })\n                }\n            }\n        }\n        // CLOSE_TO_OPEN\n        if(!this._closeAreaGroup.IsPokersEmpty()) {\n            hints.push({\n                type: ETOperationHint.CLOSE_TO_OPEN\n            })\n        }\n        // OPEN_TO_CLOSE\n        if((!this._openAreaGroup.IsPokersEmpty()) && this._closeAreaGroup.IsPokersEmpty() && this.IsCanReflip()){\n            hints.push({\n                type: ETOperationHint.OPEN_TO_CLOSE\n            })\n        }\n        // RECEIVE_TO_PLAY\n        for(let toPlayIndex=0; toPlayIndex <7; ++toPlayIndex){\n            let toPlayGroup = this._playGroups[toPlayIndex]\n            for(let fromReceiveIndex=0; fromReceiveIndex <4; ++fromReceiveIndex){\n                let fromReceiveGroup = this._receiveGroups[fromReceiveIndex]\n                if(!fromReceiveGroup.IsPokersEmpty() && toPlayGroup.IsConcatPoker(fromReceiveGroup.top)){\n                    hints.push({\n                        type: ETOperationHint.RECEIVE_TO_PLAY,\n                        from: fromReceiveIndex,\n                        to: toPlayIndex\n                    })\n                }\n            }\n        }\n\n        return hints\n    }\n\n    isHintedBV: ii.BooleanBV = null; /* 是否提示过次数 */\n    //#endregion\n\n    //#region User Input Event Handler\n    OnPlayPokerClick(poker: Poker) {\n        console.assert(poker.status === EPokerStatus.OPEN && poker.location === ELocation.PLAY)\n        if (poker.isTop) {\n            // 1. 尝试放到 Receive 区域,必须从 0 开始遍历\n            for (let receiveIndex = 0; receiveIndex < 4; ++receiveIndex) {\n                let rpg: PokerGroup = this._receiveGroups[receiveIndex]\n                if (rpg.IsNextPoker(poker)) {\n                    return this.__MoveFromPlayToReceive(poker, receiveIndex)\n                }\n            }\n            // 2. 尝试放到 Play 区域的其他组\n            for (let playIndex = 0; playIndex < 7; ++playIndex) {\n                if(this._playGroups[playIndex].IsConcatPoker(poker)) {\n                    return this.__MoveFromPlayToPlay(poker, playIndex)\n                }\n            }\n            this.NotifyGameEvent(SolitaireEvent.SC_CLICK_POKER_NO_CHANGE, poker)\n        }else{\n            // 非顶部牌,但是翻开着的牌,只有 Play 区域可以承接\n            for (let playIndex = 0; playIndex < 7; ++playIndex) {\n                let pgp: PokerGroup = this._playGroups[playIndex]\n                if(pgp.IsConcatPoker(poker)) {\n                    return this.__MoveFromPlayToPlay(poker, playIndex)\n                }\n            }\n            this.NotifyGameEvent(SolitaireEvent.SC_CLICK_POKER_NO_CHANGE, poker)\n        }\n    }\n    OnClosePokerClick(poker: Poker) {\n        this.__MoveFromCloseToOpen(poker)\n    }\n    OnReceivePokerClick(poker: Poker) {\n        console.assert(poker.group.top === poker)\n        for (let receiveIndex = 0; receiveIndex < 7; ++receiveIndex) {\n            let pgp: PokerGroup = this._playGroups[receiveIndex]\n            if(pgp.IsConcatPoker(poker)) {\n                return this.__MoveFromReceiveToPlay(poker, receiveIndex)\n            }\n        }\n        this.NotifyGameEvent(SolitaireEvent.SC_CLICK_POKER_NO_CHANGE, poker)\n    }\n    OnOpenPokerClick(poker: Poker) {\n        console.assert((poker.location === ELocation.OPEN) && poker.isTop)\n        // 逻辑是：\n        // 1. 如果这张牌,可以放到收牌区,那么就移动到收牌区\n        // 询问收牌区是否可以承接此牌,必须从 0 开始遍历\n        for (let receiveIndex = 0; receiveIndex < 4; ++receiveIndex) {\n            let rpg: PokerGroup = this._receiveGroups[receiveIndex]\n            if (rpg.IsNextPoker(poker)) {\n                return this.__MoveFromOpenToReceive(poker, receiveIndex)\n            }\n        }\n\n        // 2. 如果 Play 区域有可以承接此牌的组,那么将 poker 移动到该组\n        for (let playIndex = 0; playIndex < 7; ++playIndex) {\n            let ppg: PokerGroup = this._playGroups[playIndex]\n            if (ppg.IsConcatPoker(poker)) {\n                return this.__MoveFromOpenToPlay(poker, playIndex)\n            }\n        }\n\n        // 派发点击无效的消息\n        this.NotifyGameEvent(SolitaireEvent.SC_CLICK_POKER_NO_CHANGE, poker)\n    }\n    OnClickCloseBottom() {\n        if(this.IsCanReflip()){\n            this.__MoveFromOpenToClose()\n        }\n    }\n    OnDragToReceive(poker: Poker, receiveIndex: number) {\n        if(poker.isTop){\n            let rpg: PokerGroup = this._receiveGroups[receiveIndex]\n            if (rpg.IsNextPoker(poker)) {\n                // 做连接的数据操作\n                let parent: PokerGroup = poker.group\n                if(poker.location === ELocation.PLAY){\n                    return this.__MoveFromPlayToReceive(poker, receiveIndex, EActionType.DRAG)\n                }else if(poker.location === ELocation.OPEN){\n                    return this.__MoveFromOpenToReceive(poker, receiveIndex, EActionType.DRAG)\n                }else{\n                    return this.__MoveFromReceiveToReceive(poker, receiveIndex, EActionType.DRAG)\n                }\n            }\n        }\n        this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKER_NO_CHANGE, poker)\n    }\n    OnDragToPlay(poker: Poker, playIndex: number) {\n        if(poker.isTop){\n            // 移动一张牌\n            let playGroup: PokerGroup = this._playGroups[playIndex]\n            if(playGroup.IsConcatPoker(poker)){\n                if(poker.location == ELocation.PLAY){\n                    this.__MoveFromPlayToPlay(poker, playIndex, EActionType.DRAG)\n                }else if(poker.location === ELocation.RECEIVE){\n                    this.__MoveFromReceiveToPlay(poker, playIndex, EActionType.DRAG)\n                }else{\n                    this.__MoveFromOpenToPlay(poker, playIndex, EActionType.DRAG)\n                }\n            }else{\n                this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKER_NO_CHANGE, poker)\n            }\n        }else{\n            // 移动一组\n            console.assert(poker.location == ELocation.PLAY)\n            let playGroup: PokerGroup = this._playGroups[playIndex]\n            if(playGroup.IsConcatPoker(poker)){\n                this.__MoveFromPlayToPlay(poker, playIndex, EActionType.DRAG)\n            }else{\n                this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKER_NO_CHANGE, poker)\n            }\n        }\n    }\n    IsCanReflip(): boolean{\n        return this.__isCanReflipByCount(this.flipCloseCardsCountBV.v)\n    }\n    private __isCanReflipByCount(_flipCloseCardsCount: number): boolean {\n        if(this._isVegasMode){\n            if(this._isCard3Mode){\n                if(_flipCloseCardsCount >= 2) {\n                    return false\n                }\n            }else{\n                return false\n            }\n        }\n        return true\n    }\n    //#endregion\n\n    //#region //! Move Actions 每一个 __Move 本质对应一个操作\n    private __MoveFromPlayToPlay(poker: Poker, toPlayIndex: number, actTyp: EActionType = EActionType.CLICK, ignoreStep: boolean = false, notUpdateScore: boolean = false) {\n        console.assert(poker.location == ELocation.PLAY)\n        let g: PokerGroup = this._playGroups[toPlayIndex]\n        if(poker.isTop){\n            let originGroup = poker.group\n            let isFlip: boolean = originGroup.IsAutoFlipOnRemovePoker(poker)\n            let fromIndex = poker.groupIndex\n            let toIndex = toPlayIndex\n\n            poker.group.RemoveTop()\n            g.AddPoker(poker)\n            this.__StopFoundationsCount()\n\n            if(actTyp !== EActionType.UNDO){\n                // 记录变化\n                let cmd = this.NewCmd(ETUndoCmd.PLAY_TO_PLAY).AddChange({\n                    typ: EChangeType.MOVE,\n                    poker,\n                    fromIndex,\n                    toIndex\n                })\n                if(isFlip){\n                    cmd.AddChange({\n                        typ: EChangeType.FLIP,\n                        poker: originGroup.top,\n                        status: EPokerStatus.OPEN\n                    })\n\n                    // 翻牌计分\n                    console.assert(originGroup.top.initLocation === ELocation.PLAY && originGroup.top.initStatus === EPokerStatus.CLOSE)\n                    this.ChangeReceiveScore(5)\n                }\n            }\n\n            this.UpdateMoveStep(ignoreStep)\n            this.UpdateScore(notUpdateScore)\n\n            switch (actTyp) {\n                case EActionType.CLICK:\n                    this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FROM_PLAY_TO_PLAY, poker)\n                    break;\n                case EActionType.DRAG:\n                    this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKER_FROM_PLAY_TO_PLAY, poker)\n                    break;\n                case EActionType.UNDO:\n                    this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FOR_UNDO_FROM_PLAY_TO_PLAY, poker)\n                    break;\n            }\n        }else{\n            let originGroup: PokerGroup = poker.group\n            let isFlip: boolean = originGroup.IsAutoFlipOnRemovePoker(poker)\n            let fromIndex = poker.groupIndex\n            let toIndex = toPlayIndex\n            let pokers = []\n            while(true) {\n                let top = originGroup.RemoveTop()\n                pokers.push(top)\n                if(top == poker){\n                    break\n                }\n            }\n            for(let pokerIndex = pokers.length-1; pokerIndex >=0; --pokerIndex){\n                let p = pokers[pokerIndex]\n                g.AddPoker(p)\n            }\n            this.__StopFoundationsCount()\n\n            if(actTyp !== EActionType.UNDO){\n                // 记录变化\n                let cmd = this.NewCmd(ETUndoCmd.PLAY_TO_PLAY).AddChange({\n                    typ: EChangeType.MOVE,\n                    poker,\n                    fromIndex,\n                    toIndex\n                })\n                if(isFlip){\n                    cmd.AddChange({\n                        typ: EChangeType.FLIP,\n                        poker: originGroup.top,\n                        status: EPokerStatus.OPEN\n                    })\n\n                    // 翻牌计分\n                    console.assert(originGroup.top.initLocation === ELocation.PLAY && originGroup.top.initStatus === EPokerStatus.CLOSE)\n                    this.ChangeReceiveScore(5)\n                }\n            }\n\n            this.UpdateMoveStep(ignoreStep)\n            this.UpdateScore()\n\n            switch (actTyp) {\n                case EActionType.CLICK:\n                    this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKERS_FROM_PLAY_TO_PLAY, pokers)\n                    break;\n                case EActionType.DRAG:\n                    this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKERS_FROM_PLAY_TO_PLAY, pokers)\n                    break;\n                case EActionType.UNDO:\n                    this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKERS_FOR_UNDO_FROM_PLAY_TO_PLAY, pokers)\n                    break;\n            }\n        }\n\n        this.UpdateHasNextStep()\n    }\n    private __MoveFromPlayToReceive(poker: Poker, toReceiveIndex: number, actTyp: EActionType = EActionType.CLICK, ignoreStep: boolean = false, notUpdateScore: boolean = false) {\n        console.assert(poker.location == ELocation.PLAY)\n        let originGroup: PokerGroup = poker.group\n        let fromIndex = originGroup.index\n        let isFlip: boolean = originGroup.IsAutoFlipOnRemovePoker(poker)\n        let g: PokerGroup = this._receiveGroups[toReceiveIndex]\n        // 做连接的数据操作\n        let p = poker.group.RemoveTop()\n        console.assert(p === poker)\n        g.AddPoker(poker)\n        this.__AddFoundationsCount()\n\n        if(actTyp !== EActionType.UNDO){\n            // 记录变化\n            let cmd = this.NewCmd(ETUndoCmd.PLAY_TO_RECEIVE).AddChange({\n                typ: EChangeType.MOVE,\n                poker,\n                fromIndex,\n                toIndex: toReceiveIndex\n            })\n            if(isFlip){\n                cmd.AddChange({\n                    typ: EChangeType.FLIP,\n                    poker: originGroup.top,\n                    status: EPokerStatus.OPEN\n                })\n\n                // 翻牌计分\n                console.assert(originGroup.top.initLocation === ELocation.PLAY && originGroup.top.initStatus === EPokerStatus.CLOSE)\n                this.ChangeReceiveScore(5)\n            }\n            // 收牌计分\n            this.ChangeReceiveScore((poker.initLocation === ELocation.PLAY && poker.initStatus === EPokerStatus.OPEN) ? 15 : 10)\n            this.ChangeVegasReceiveScore(5)\n        }\n\n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore(notUpdateScore)\n\n        switch (actTyp) {\n            case EActionType.CLICK:\n                this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FROM_PLAY_TO_RECEIVE, poker)\n                break;\n            case EActionType.DRAG:\n                this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKER_FROM_PLAY_TO_RECEIVE, poker)\n                break;\n            case EActionType.UNDO:\n                this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FOR_UNDO_FROM_PLAY_TO_RECEIVE, poker)\n                break;\n        }\n\n        this.__CheckGameWin()\n        \n        this.UpdateHasNextStep()\n    }\n    private __MoveFromReceiveToPlay(poker: Poker, toPlayIndex: number, actTyp: EActionType = EActionType.CLICK, ignoreStep: boolean = false, notUpdateScore: boolean = false) {\n        console.assert(poker.location == ELocation.RECEIVE)\n        let originGroup: PokerGroup = poker.group\n        let fromIndex = originGroup.index\n        let g: PokerGroup = this._playGroups[toPlayIndex]\n        let p = poker.group.RemoveTop()\n        console.assert(p === poker)\n        g.AddPoker(poker)\n        this.__StopFoundationsCount()\n\n        if(actTyp !== EActionType.UNDO){\n            // 记录变化\n            this.NewCmd(ETUndoCmd.RECEIVE_TO_PLAY).AddChange({\n                typ: EChangeType.MOVE,\n                poker,\n                fromIndex,\n                toIndex: toPlayIndex\n            })\n        }\n\n        // 收牌计分\n        this.ChangeReceiveScore((poker.initLocation === ELocation.PLAY && poker.initStatus === EPokerStatus.OPEN) ? -15 : -10)\n        this.ChangeVegasReceiveScore(-5)\n\n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore(notUpdateScore)\n\n        switch (actTyp) {\n            case EActionType.CLICK:\n                this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FROM_RECEIVE_TO_PLAY, poker)\n                break;\n            case EActionType.DRAG:\n                this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKER_FROM_RECEIVE_TO_PLAY, poker)\n                break;\n            case EActionType.UNDO:\n                this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FOR_UNDO_FROM_RECEIVE_TO_PLAY, poker)\n                break;\n        }\n\n        this.UpdateHasNextStep()\n    }\n    private __MoveFromOpenToPlay(poker: Poker, toPlayIndex: number, actTyp: EActionType = EActionType.CLICK, ignoreStep: boolean = false) {\n        console.assert(poker.location == ELocation.OPEN && (actTyp !== EActionType.UNDO))\n        let g: PokerGroup = this._playGroups[toPlayIndex]\n        let p = poker.group.RemoveTop()\n        console.assert(p === poker)\n        g.AddPoker(poker)\n        this.__StopFoundationsCount()\n\n        // 记录变化\n        this.NewCmd(ETUndoCmd.OPEN_TO_PLAY).AddChange({\n            typ: EChangeType.MOVE,\n            poker,\n            toIndex: toPlayIndex\n        })\n\n        // 移动计分\n        console.assert(poker.initLocation === ELocation.CLOSE)\n        this.ChangeReceiveScore(5)\n        \n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore()\n\n        switch (actTyp) {\n            case EActionType.CLICK:\n                this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FROM_OPEN_TO_PLAY, poker)\n                break;\n            case EActionType.DRAG:\n                this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKER_FROM_OPEN_TO_PLAY, poker)\n                break;\n            case EActionType.UNDO:\n                console.error('不可能出现')\n                break;\n        }\n\n        this.UpdateHasNextStep()\n    }\n    private __MoveFromOpenToReceive(poker: Poker, toReceiveIndex: number, actTyp: EActionType = EActionType.CLICK, ignoreStep: boolean = false) {\n        // console.assert(poker.location == ELocation.OPEN && (actTyp !== EActionType.UNDO))\n        let g: PokerGroup = this._receiveGroups[toReceiveIndex]\n        poker.group.RemoveTop()\n        g.AddPoker(poker)\n        this.__AddFoundationsCount()\n\n        // 记录变化\n        this.NewCmd(ETUndoCmd.OPEN_TO_RECEIVE).AddChange({\n            typ: EChangeType.MOVE,\n            poker,\n            toIndex: toReceiveIndex\n        })\n\n        // 移动计分\n        console.assert(poker.initLocation === ELocation.CLOSE)\n        this.ChangeReceiveScore(15)\n        this.ChangeVegasReceiveScore(5)\n\n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore()\n\n        switch (actTyp) {\n            case EActionType.CLICK:\n                this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FROM_OPEN_TO_RECEIVE, poker)\n                break;\n            case EActionType.DRAG:\n                this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKER_FROM_OPEN_TO_RECEIVE, poker)\n                break;\n            case EActionType.UNDO:\n                console.error('不可能出现')\n                break;\n        }\n\n        this.__CheckGameWin()\n        \n        this.UpdateHasNextStep()\n    }\n    private __MoveFromReceiveToReceive(poker: Poker, toReceiveIndex: number, actTyp: EActionType = EActionType.CLICK, ignoreStep: boolean = false, notUpdateScore: boolean = false) {\n        let originGroup: PokerGroup = poker.group\n        let fromIndex = originGroup.index\n        let g: PokerGroup = this._receiveGroups[toReceiveIndex]\n        originGroup.RemoveTop()\n        g.AddPoker(poker)\n\n        if(actTyp !== EActionType.UNDO){\n            // 记录变化\n            this.NewCmd(ETUndoCmd.RECEIVE_TO_RECEIVE).AddChange({\n                typ: EChangeType.MOVE,\n                poker,\n                fromIndex,\n                toIndex: toReceiveIndex\n            })\n        }\n\n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore(notUpdateScore)\n\n        this.NotifyGameEvent(SolitaireEvent.SC_DRAG_POKER_FROM_RECEIVE_TO_RECEIVE, poker)\n\n        this.UpdateHasNextStep()\n    }\n    private __MoveFromCloseToOpen(poker: Poker, ignoreStep: boolean = false) {\n        // console.assert((poker.location === ELocation.CLOSE) && poker.isTop)\n        if(this._isCard3Mode){\n            // 3 cards\n            let group = poker.group\n            let pokers = []\n            let cmd = this.NewCmd(ETUndoCmd.CLOSES_TO_OPEN)\n            while(true){\n                pokers.push(group.RemoveTop())\n                this._openAreaGroup.AddPoker(pokers[pokers.length-1])\n                if(pokers.length == 3 || group.IsPokersEmpty()){\n                    break\n                }\n            }\n            cmd.AddChange({\n                typ: EChangeType.MOVE,\n                pokers: pokers,\n            })\n\n            this.UpdateMoveStep(ignoreStep)\n            this.UpdateScore()\n\n            this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKERS_FROM_CLOSE_TO_OPEN, pokers)\n        }else{\n            poker.group.RemoveTop()\n            this._openAreaGroup.AddPoker(poker)\n    \n            // 记录变化\n            this.NewCmd(ETUndoCmd.CLOSE_TO_OPEN).AddChange({\n                typ: EChangeType.MOVE,\n                poker: poker,\n            })\n            \n            this.UpdateMoveStep(ignoreStep)\n            this.UpdateScore()\n\n            this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FROM_CLOSE_TO_OPEN, poker)\n        }\n\n        this.UpdateHasNextStep()\n    }\n    private __MoveFromOpenToClose(ignoreStep: boolean = false) {\n        if(!this._closeAreaGroup.IsPokersEmpty()){\n            return\n        }\n        this.flipCloseCardsCountBV.v += 1\n        let isPokerMove = !this._openAreaGroup.IsPokersEmpty()\n        if(!isPokerMove){\n            return\n        }\n        let pokers = []\n        while (!this._openAreaGroup.IsPokersEmpty()) {\n            let poker = this._openAreaGroup.RemoveTop()\n            this._closeAreaGroup.AddPoker(poker)\n            pokers.push(poker)\n        }\n\n        // 记录变化\n        this.NewCmd(ETUndoCmd.OPEN_TO_CLOSE).AddChange({\n            typ: EChangeType.MOVE,\n            pokers,\n        })\n        \n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore()\n\n        this.NotifyGameEvent(SolitaireEvent.SC_MOVE_ALL_POKERS_FROM_OPEN_TO_CLOSE, pokers)\n\n        this.UpdateHasNextStep()\n    }\n    private __MoveFromPlayToOpenForUndo(poker: Poker, ignoreStep: boolean = false, notUpdateScore: boolean = false) {\n        // console.assert(poker.location == ELocation.PLAY)\n        poker.group.RemoveTop()\n        this._openAreaGroup.AddPoker(poker)\n\n        // 移动计分\n        console.assert(poker.initLocation === ELocation.CLOSE)\n        this.ChangeReceiveScore(-5)\n\n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore(notUpdateScore)\n\n        this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FOR_UNDO_FROM_PLAY_TO_OPEN, poker)\n\n        this.UpdateHasNextStep()\n    }\n    private __MoveFromReceiveToOpenForUndo(poker: Poker, ignoreStep: boolean = false, notUpdateScore: boolean = false) {\n        // console.assert(poker.location == ELocation.RECEIVE)        \n        poker.group.RemoveTop()\n        this._openAreaGroup.AddPoker(poker)\n\n        // 移动计分\n        console.assert(poker.initLocation === ELocation.CLOSE)\n        this.ChangeReceiveScore(-15)\n        this.ChangeVegasReceiveScore(-5)\n\n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore(notUpdateScore)\n\n        this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FOR_UNDO_FROM_RECEIVE_TO_OPEN, poker)\n\n        this.UpdateHasNextStep()\n    }\n    // 原操作：一整叠牌移动到 Close 区域\n    private __MoveFromCloseToOpenForUndo(pokers: Poker[], ignoreStep: boolean = false, notUpdateScore: boolean = false) {\n        let ps = []\n        for(let i=pokers.length-1; i>=0; --i){\n            let poker = pokers[i]\n            this._closeAreaGroup.RemoveTop()\n            this._openAreaGroup.AddPoker(poker)\n            ps.push(poker)\n        }\n        this.flipCloseCardsCountBV.v -= 1\n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore(notUpdateScore)\n        this.NotifyGameEvent(SolitaireEvent.SC_MOVE_ALL_POKERS_FOR_UNDO_FROM_CLOSE_TO_OPEN, ps)\n        this.UpdateHasNextStep()\n    }\n    private __MoveFromOpenToCloseForUndo(poker: Poker, ignoreStep: boolean = false, notUpdateScore: boolean = false) {\n        // console.assert(poker.location == ELocation.OPEN)        \n        poker.group.RemoveTop()\n        this._closeAreaGroup.AddPoker(poker)\n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore(notUpdateScore)\n        this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKER_FOR_UNDO_FROM_OPEN_TO_CLOSE, poker)\n        this.UpdateHasNextStep()\n    }\n    private __MovePokersFromOpenToCloseForUndo(pokers: Poker[], ignoreStep: boolean = false, notUpdateScore: boolean = false) {\n        for(let i = pokers.length-1; i>=0; --i){\n            let poker = pokers[i]\n            poker.group.RemoveTop()\n            this._closeAreaGroup.AddPoker(poker)\n        }\n        this.UpdateMoveStep(ignoreStep)\n        this.UpdateScore(notUpdateScore)\n        this.NotifyGameEvent(SolitaireEvent.SC_MOVE_POKERS_FOR_UNDO_FROM_OPEN_TO_CLOSE, pokers)\n        this.UpdateHasNextStep()\n    }\n    //#endregion\n\n     //#region //! 撤销功能\n    hasUsedUndo: ii.BooleanBV = null; /* 是否使用过 Undo 操作 */\n    readonly undoLengthBV: ii.NumberBV = ii.NumberBV.Borrow(0) /* 是否可以撤销 */\n    private undoCmdStack: CmdStack = new CmdStack(this.OnUndoStatusChanged.bind(this))\n    private OnUndoStatusChanged(length: number){ this.undoLengthBV.v = length; }\n    Undo(ignoreStep: boolean = false){\n        if(this.undoLengthBV.v > 0){\n            this.hasUsedUndo.v = true\n            let cmd = this.undoCmdStack.pop()\n            for(let i=cmd.cmdChanges.length-1; i>=0; --i){\n                let change = cmd.cmdChanges[i]\n                switch (change.typ) {\n                    case EChangeType.FLIP:\n                        this.UndoFlip(change, i > 0)\n                        break;\n                    case EChangeType.MOVE:\n                        this.UndoMoveChangeByCmdType(cmd.cmdType, change, ignoreStep, i > 0)\n                        break;\n                }\n            }\n        }else{\n            ii.UIMgr.ins.ShowMsg(\"solitaire.no_undo_step\")\n        }\n    }\n    NewCmd(cmdType: ETUndoCmd): Cmd{\n        let cmd = new Cmd(cmdType, [])\n        this.undoCmdStack.push(cmd)\n        return cmd\n    }\n\n    private UndoFlip(change: CmdChange, notUpdateScore: boolean){\n        change.poker.status = change.status === EPokerStatus.OPEN ? EPokerStatus.CLOSE : EPokerStatus.OPEN\n\n        // 翻牌计分\n        console.assert(change.poker.initLocation === ELocation.PLAY && change.poker.initStatus === EPokerStatus.CLOSE)\n        this.ChangeReceiveScore(-5)\n\n        this.UpdateScore(notUpdateScore)\n        \n        \n        this.NotifyGameEvent(SolitaireEvent.SC_FLIP_POKER, change.poker)\n    }\n\n    SnapUndoCmds(): SnapCmd[] { return this.undoCmdStack.Snap() }\n    RedoCmds(_cmds: SnapCmd[]) {\n        let cmds = this.ConvertCmds(_cmds)\n        cmds.forEach(cmd => {\n            this.ResumeCmd(cmd.cmdType, cmd.cmdChanges)\n        })\n    }\n    private ConvertCmds(cmds: SnapCmd[]): Cmd[] {\n        return cmds.map(cmd=>{\n            let c = new Cmd(cmd.cmdType, [])\n            cmd.cmdChanges.forEach(snapChange => c.AddChange({\n                typ: snapChange.typ,\n                poker: snapChange.poker == null ? null : this.getPoker(snapChange.poker.point, snapChange.poker.suit),\n                pokers: snapChange.pokers == null ? null : snapChange.pokers.map(poker => this.getPoker(poker.point, poker.suit)),\n                fromIndex: snapChange.fromIndex,\n                toIndex: snapChange.toIndex,\n                status: snapChange.status\n            }))\n            return c\n        })\n    }\n\n    //#region Undo Resume\n    private UndoMoveChangeByCmdType(cmdType: ETUndoCmd, change: CmdChange, ignoreStep: boolean, notUpdateScore: boolean){\n        switch (cmdType) {\n            case ETUndoCmd.PLAY_TO_PLAY:\n                this.__MoveFromPlayToPlay(change.poker, change.fromIndex, EActionType.UNDO, ignoreStep, notUpdateScore)\n                break;\n            case ETUndoCmd.PLAY_TO_RECEIVE:\n                this.__MoveFromReceiveToPlay(change.poker, change.fromIndex, EActionType.UNDO, ignoreStep, notUpdateScore)\n                break;\n            case ETUndoCmd.RECEIVE_TO_PLAY:\n                this.__MoveFromPlayToReceive(change.poker, change.fromIndex, EActionType.UNDO, ignoreStep, notUpdateScore)\n                break;\n            case ETUndoCmd.RECEIVE_TO_RECEIVE:\n                this.__MoveFromReceiveToReceive(change.poker, change.fromIndex, EActionType.UNDO, ignoreStep, notUpdateScore)\n                break;\n            case ETUndoCmd.OPEN_TO_PLAY:\n                this.__MoveFromPlayToOpenForUndo(change.poker, ignoreStep, notUpdateScore)\n                break;\n            case ETUndoCmd.OPEN_TO_RECEIVE:\n                this.__MoveFromReceiveToOpenForUndo(change.poker, ignoreStep, notUpdateScore)\n                break;\n            case ETUndoCmd.OPEN_TO_CLOSE:\n                // 原操作：一整叠牌移动到 Close 区域\n                this.__MoveFromCloseToOpenForUndo(change.pokers, ignoreStep, notUpdateScore)\n                break;\n            case ETUndoCmd.CLOSE_TO_OPEN:\n                this.__MoveFromOpenToCloseForUndo(change.poker, ignoreStep, notUpdateScore)\n                break;\n            case ETUndoCmd.CLOSES_TO_OPEN:\n                this.__MovePokersFromOpenToCloseForUndo(change.pokers, ignoreStep, notUpdateScore)\n                break;\n        }\n    }\n    ResumeCmd(cmdType: ETUndoCmd, changes: CmdChange[]) {\n        switch (cmdType) {\n            case ETUndoCmd.PLAY_TO_PLAY:\n                this.__ResumeOnceForTypeOfMove(changes, change => this.__MoveFromPlayToPlay(change.poker, change.toIndex))\n                break;\n            case ETUndoCmd.PLAY_TO_RECEIVE:\n                this.__ResumeOnceForTypeOfMove(changes, change => this.__MoveFromPlayToReceive(change.poker, change.toIndex))\n                break;\n            case ETUndoCmd.RECEIVE_TO_PLAY:\n                this.__ResumeOnceForTypeOfMove(changes, change => this.__MoveFromReceiveToPlay(change.poker, change.toIndex))\n                break;\n            case ETUndoCmd.RECEIVE_TO_RECEIVE:\n                this.__ResumeOnceForTypeOfMove(changes, change => this.__MoveFromReceiveToReceive(change.poker, change.toIndex))\n                break;\n            case ETUndoCmd.OPEN_TO_PLAY:\n                this.__ResumeOnceForTypeOfMove(changes, change => this.__MoveFromOpenToPlay(change.poker, change.toIndex))\n                break;\n            case ETUndoCmd.OPEN_TO_RECEIVE:\n                this.__ResumeOnceForTypeOfMove(changes, change => this.__MoveFromOpenToReceive(change.poker, change.toIndex))\n                break;\n            case ETUndoCmd.OPEN_TO_CLOSE:\n                // 原操作：一整叠牌移动到 Close 区域\n                this.__ResumeOnceForTypeOfMove(changes, change => this.__MoveFromOpenToClose())\n                break;\n            case ETUndoCmd.CLOSE_TO_OPEN:\n                this.__ResumeOnceForTypeOfMove(changes, change => this.__MoveFromCloseToOpen(change.poker))\n                break;\n            case ETUndoCmd.CLOSES_TO_OPEN:\n                this.__ResumeOnceForTypeOfMove(changes, change => this.__MoveFromCloseToOpen(change.pokers[0]))\n                break;\n        }\n    }\n    private __ResumeOnceForTypeOfMove(changes: CmdChange[], callback: (change: CmdChange) => void) {\n        for(let index=0; index<changes.length; ++index){\n            let change = changes[index]\n            if(change.typ == EChangeType.MOVE){\n                callback(change)\n                break\n            }\n        }\n    }\n    //#endregion\n    //#endregion 撤销功能\n\n    //#region //! 自动玩牌\n    OnUseHelp() {\n        this.isHelpedBV.v = true;\n        this.isPlayerOpenedBV.v = true;\n    }\n    isHelpedBV: ii.BooleanBV = null; /* 是否消耗过次数 */\n    // 数据战斗\n    private AutoServerPlay(): boolean{ return this.AutoServerPlayStepNext() }\n    private AutoServerPlayStepNext(): boolean {\n        if(this.isGameWinBV.v){ return true }\n        if(this.m_strategyFn(false)){\n            return this.AutoServerPlayStepNext()\n        }else{\n            return false\n        }\n    }\n    // 所有扑克的翻开状态\n    readonly isAllPokersOpenBV: ii.BooleanBV = ii.BooleanBV.Borrow(false)\n    private __refreshAllPokerOpenStatus(){\n        this.isAllPokersOpenBV.v = this._pokers.reduce((isAllOpen, curentPoker) => isAllOpen && (curentPoker.status === EPokerStatus.OPEN), true)\n    }\n    // 自动收牌 \n    readonly isAutoCollectingBV: ii.BooleanBV = ii.BooleanBV.Borrow(false)\n    // 自动玩牌\n    isPlayerOpenedBV: ii.BooleanBV = null; /* 是否打开了播放器 */\n    isAutoPlayingBV: ii.BooleanBV = null;\n    private m_AutoPlayingInterval: number = null /** 自动播放时的时间间隔 */\n    ChangeAutoPlayInterval(duration: number) { this.m_AutoPlayingInterval = duration } /** 更新自动播放的时间间隔 */\n    private m_strategyFn: (noPlay: boolean)=>boolean = null\n    private AutoPlayStepNext(callback?: AUTO_RUN_CALLBACK) {\n        if(!(this.isAutoPlayingBV.v || this.isAutoCollectingBV.v)){ return }\n        if(this.isGameWinBV.v){\n            this.isAutoPlayingBV.v = false\n            this.isAutoCollectingBV.v = false\n            if(callback){\n                return callback(true, this.Seed, this)\n            }\n            return\n        }\n        if(this.m_strategyFn(false)){\n            if(this.m_AutoPlayingInterval === 0){\n                return this.AutoPlayStepNext(callback)\n            }else{\n                ii.App.ins.delayCall(this.m_AutoPlayingInterval, ()=>this.AutoPlayStepNext(callback));\n            }\n        }else{\n            this.isAutoPlayingBV.v = false\n            this.isAutoCollectingBV.v = false\n            if(callback){\n                return callback(false, this.Seed, this)\n            }\n        }\n    }\n    AutoPlay(interval: number, callback?: AUTO_RUN_CALLBACK) {\n        console.assert((!this.isAutoPlayingBV.v) && (!this.isAutoCollectingBV.v))\n        this.ChangeAutoPlayInterval(interval)\n        this.isAutoPlayingBV.v = true\n        ii.App.ins.delayCall(this.m_AutoPlayingInterval, ()=>this.AutoPlayStepNext(callback));\n    }\n    AutoCollect(interval: number) {\n        console.assert(this.isAllPokersOpenBV.v && (!this.isAutoPlayingBV.v) && (!this.isAutoCollectingBV.v))\n        this.ChangeAutoPlayInterval(interval)\n        this.isAutoCollectingBV.v = true\n        this.AutoPlayStepNext()\n    }\n    StopAutoPlay() { this.isAutoPlayingBV.v = false }\n    NextStep() { this.__DoNextStep(false) }\n    private __DoNextStep(noPlay: boolean) {\n        if(!(this.isGameWinBV.v)){\n            if(this.m_strategyFn){                \n                return this.m_strategyFn(noPlay)\n            }\n        }\n        return false\n    }\n    \n    //#endregion 自动玩牌\n\n    //#region //! 自动玩牌的策略\n    /*********************************************************************\n     * 【Common】: 【Play 区域的其他牌可以移动到 playPoker, 并导致翻牌】\n     *********************************************************************/\n     private __CreateStrategyFunc(): (noPlay: boolean) => boolean {\n        if(this._isCard3Mode){\n            return (noPlay: boolean) => {\n                return false \n                    ||this.AutoPlayFlipOnPlayToReceive(noPlay) /*【Play 到 Receive, 导致翻牌】*/ \n                    || this.AutoPlayFlipOnPlayToPlay(noPlay) /* 【Play 到 Play, 导致翻牌】 */\n                    || this.AutoPlayNoFlipOpenToReceive(noPlay) /* Open 到 Receive */\n                    || this.AutoPlayNoFlipOnPlayToReceiveToCreateEmptyPlayGroup(noPlay) /*【Play 到 Receive, 导致空列】*/\n                    || this.AutoPlayFlipOnOpenToPlay(noPlay) /* Open 到 Play, 出现 【Common】 */\n                    || this.AutoPlayFlipOnReceiveToPlay(noPlay) /* Receive 到 Play, 出现 【Common】 */\n                    || this.AutoPlayFlipOnCloseToPlay(noPlay) /* Close 到 Play, 出现 【Common】 */\n                    || this.AutoPlayFlipOnUnderOpenToPlay(noPlay) /* UnderOpen 到 Play, 出现 【Common】 */\n                    /**********************************************************************************************************/\n                    || this.AutoPlayNoFlipOnPlayToPlayToCreateEmptyPlayGroup(noPlay) /* 移动 Play 到另一组，腾出一列空列（前提：没有空列） */\n                    || this.AutoPlayNoFlipOnPlayToReceive(noPlay) /* Play 到 Receive */\n                    || this.AutoPlayNoFlipCloseToReceive(noPlay) /* Close 到 Receive */\n                    || this.AutoPlayNoFlipOnOpenToPlay(noPlay) /* Open 到 Play */\n                    || this.AutoPlayNoFlipUnderOpenToReceive(noPlay) /* UnderOpen 到 Receive */\n                    || this.AutoPlayNoFlipOnCloseToPlay(noPlay) /* Close 到 Play */\n                    || this.AutoPlayNoFlipOnUnderOpenToPlay(noPlay) /* UnderOpen 到 Play */\n            }\n        }else{\n            /* 【Common】: 【Play 区域的其他牌可以移动到这组, 并导致翻牌】 */\n            return (noPlay: boolean) => {\n                return false \n                    //! 直接进入最佳的收牌状态\n                    || this.AutoPlayBestFitPlayToReceive(noPlay) //! 1\n                    || this.AutoPlayBestFitOpenToReceive(noPlay) //! 2\n                    //! Close 区域到第一张牌翻出来，会导致 2\n                    || this.AutoPlayBestFitTopCloseToReceive(noPlay) //! 3\n                    //! Close 区域无牌，重新发牌后的第一张，导致 2\n                    || this.AutoPlayBestFitBottomOpenToReceive(noPlay) //! 4\n                    //! 收一张牌且导致翻牌\n                    || this.AutoPlayFlipOnPlayToReceive(noPlay) /*【Play 到 Receive, 导致翻牌】*/ //! 5\n                    //! 移动一张牌且导致翻牌\n                    || this.AutoPlayFlipOnPlayToPlay(noPlay) /* 【Play 到 Play, 导致翻牌】 */ //! 6\n                    //! Play 到 Receive, 导致空列\n                    || this.AutoPlayNoFlipOnPlayToReceiveToCreateEmptyPlayGroup(noPlay)\n                    //! Open(3) -> PlayA(4) , PlayB(2) -> PlayA(4,3), PlayB 翻牌\n                    || this.AutoPlayFlipOnOpenToPlay(noPlay)\n                    //! Receive(3) -> PlayA(4) , PlayB(2) -> PlayA(4,3), PlayB 翻牌\n                    || this.AutoPlayFlipOnReceiveToPlay(noPlay)\n                    //! 直接收牌： Open -> Receive\n                    || this.AutoPlayNoFlipOpenToReceive(noPlay)\n                    //! 直接收牌： Open -> Play\n                    || this.AutoPlayNoFlipOnOpenToPlay(noPlay)\n                    || this.AutoPlayFlipOnCloseToPlay(noPlay) /* Close 到 Play, 出现 【Common】 */\n                    || this.AutoPlayFlipOnUnderOpenToPlay(noPlay) /* UnderOpen 到 Play, 出现 【Common】 */\n                    /**********************************************************************************************************/\n                    || this.AutoPlayFlipOnOpenToPlayByTwoPokers(noPlay)\n                    || this.AutoPlayFlipOnReceiveToPlayByTwoPokers(noPlay)\n                    || this.AutoPlayFlipOnCloseToPlayByTwoPokers(noPlay)\n                    || this.AutoPlayFlipOnUnderOpenToPlayByTwoPokers(noPlay)\n                    /**********************************************************************************************************/\n                    || this.AutoPlayNoFlipOnPlayToPlayToCreateEmptyPlayGroup(noPlay) /* 移动 Play 到另一组，腾出一列空列（前提：没有空列） */\n                    || this.AutoPlayNoFlipOnPlayToReceive(noPlay) /* Play 到 Receive */\n                    || this.AutoPlayNoFlipCloseToReceive(noPlay) /* Close 到 Receive */\n                    || this.AutoPlayNoFlipUnderOpenToReceive(noPlay) /* UnderOpen 到 Receive */\n                    || this.AutoPlayNoFlipOnCloseToPlay(noPlay) /* Close 到 Play */\n                    || this.AutoPlayNoFlipOnUnderOpenToPlay(noPlay) /* UnderOpen 到 Play */\n                    || this.AutoPlayNoFlipOnPlayToPlayToMakeReceive(noPlay)/** PlayA(红心9,黑桃8) -> PlayB(方块9)， PlayA(红心9) -> Receive */\n            }\n        }\n    }\n    // 牌从 Play 到 Receive，这张牌恰巧和收牌区的牌的点数差距不超过 1 （比如上面 是 1, 2, 1, 2，那么 2 最适合放到上面去)\n    private AutoPlayBestFitPlayToReceive(noPlay: boolean = false): boolean {\n        // 1 顶部为空，找 A\n        let hasEmpty: boolean = false;\n        let minPoint: number = 13;\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex];\n            if(toReceiveGroup.IsPokersEmpty()) {\n                // 找 A\n                hasEmpty = true;\n                for(let fromPlayIndex = 0; fromPlayIndex<7; ++fromPlayIndex){\n                    let fromPlayGroup = this._playGroups[fromPlayIndex]\n                    let topPoker = fromPlayGroup.top;\n                    if(topPoker && topPoker.point == 1) {\n                        if(!noPlay) {\n                            this.__MoveFromPlayToReceive(topPoker, toReceiveIndex);\n                        }\n                        return true;\n                    }\n                }\n            }else{\n                let top = toReceiveGroup.top;\n                if(top.point < minPoint) {\n                    minPoint = top.point;\n                }\n            }\n        }\n        if(hasEmpty) {\n            // 有空位，但是找不到 A\n            return false;\n        }\n        if(minPoint === 13) {\n            return false;\n        }\n\n        // 2. 顶部不为空，查找最小的一张牌，找比它大 1 的牌是否在 Play 区域\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex];\n            let top = toReceiveGroup.top;\n            if(top.point == minPoint) {\n                // 查找比它大 1 点的牌有没有在 Play 区域\n                for(let fromPlayIndex = 0; fromPlayIndex<7; ++fromPlayIndex){\n                    let fromPlayGroup = this._playGroups[fromPlayIndex]\n                    let topPoker = fromPlayGroup.top;\n                    if(topPoker && toReceiveGroup.IsNextPoker(topPoker)) {\n                        if(!noPlay) {\n                            this.__MoveFromPlayToReceive(topPoker, toReceiveIndex);\n                        }\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n    // 牌从 Open 到 Receive，这张牌恰巧和收牌区的牌的点数差距不超过 1 （比如上面 是 1, 2, 1, 2，那么 2 最适合放到上面去)\n    private AutoPlayBestFitOpenToReceive(noPlay: boolean = false): boolean {\n        if(this._openAreaGroup.IsPokersEmpty()) {\n            return false;\n        }\n        // 1 顶部为空，找 A\n        let hasEmpty: boolean = false;\n        let minPoint: number = 13;\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex];\n            if(toReceiveGroup.IsPokersEmpty()) {\n                // 找 A\n                hasEmpty = true;\n                let topPoker = this._openAreaGroup.top;\n                if(topPoker && topPoker.point == 1) {\n                    if(!noPlay) {\n                        this.__MoveFromOpenToReceive(topPoker, toReceiveIndex);\n                    }\n                    return true;\n                }\n            }else{\n                let top = toReceiveGroup.top;\n                if(top.point < minPoint) {\n                    minPoint = top.point;\n                }\n            }\n        }\n        if(hasEmpty) {\n            // 有空位，但是找不到 A\n            return false;\n        }\n        if(minPoint === 13) {\n            return false;\n        }\n\n        // 2. 顶部不为空，查找最小的一张牌，找比它大 1 的牌是否在 Play 区域\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex];\n            let top = toReceiveGroup.top;\n            if(top.point == minPoint) {\n                // 查找比它大 1 点的牌有没有在 Play 区域\n                let topPoker = this._openAreaGroup.top;\n                if(topPoker && toReceiveGroup.IsNextPoker(topPoker)) {\n                    if(!noPlay) {\n                        this.__MoveFromOpenToReceive(topPoker, toReceiveIndex);\n                    }\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n    private AutoPlayFlipOnPlayToReceive(noPlay: boolean = false): boolean {\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex]\n            for(let fromPlayIndex = 0; fromPlayIndex<7; ++fromPlayIndex){\n                let fromPlayGroup = this._playGroups[fromPlayIndex]\n                let topOpenPoker = fromPlayGroup.top\n                if(topOpenPoker && toReceiveGroup.IsNextPoker(topOpenPoker) && fromPlayGroup.IsAutoFlipOnRemovePoker(topOpenPoker)){\n                    if(!noPlay){\n                        this.__MoveFromPlayToReceive(topOpenPoker, toReceiveIndex)\n                    }\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayFlipOnPlayToPlay(noPlay: boolean = false): boolean {\n        for(let toPlayIndex = 0; toPlayIndex<7; ++toPlayIndex){\n            let toPlayGroup = this._playGroups[toPlayIndex]\n            for(let fromPlayIndex = 0; fromPlayIndex<7; ++fromPlayIndex){\n                let fromPlayGroup = this._playGroups[fromPlayIndex]\n                let rootOpenPoker = fromPlayGroup.rootOpenPoker\n                if(rootOpenPoker && toPlayGroup.IsConcatPoker(rootOpenPoker) && fromPlayGroup.IsAutoFlipOnRemovePoker(rootOpenPoker)){\n                    if(!noPlay){\n                        this.__MoveFromPlayToPlay(rootOpenPoker, toPlayIndex)\n                    }\n                    return true                    \n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayBestFitTopCloseToReceive(noPlay: boolean = false): boolean {\n        if(this._closeAreaGroup.IsPokersEmpty()) {\n            return false;\n        }\n        // 1 顶部为空，找 A\n        let hasEmpty: boolean = false;\n        let minPoint: number = 13;\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex];\n            if(toReceiveGroup.IsPokersEmpty()) {\n                // 找 A\n                hasEmpty = true;\n                let topPoker = this._closeAreaGroup.top;\n                if(topPoker && topPoker.point == 1) {\n                    if(!noPlay) {\n                        this.__MoveFromCloseToOpen(topPoker);\n                    }\n                    return true;\n                }\n            }else{\n                let top = toReceiveGroup.top;\n                if(top.point < minPoint) {\n                    minPoint = top.point;\n                }\n            }\n        }\n        if(hasEmpty) {\n            // 有空位，但是找不到 A\n            return false;\n        }\n        if(minPoint === 13) {\n            return false;\n        }\n\n        // 2. 顶部不为空，查找最小的一张牌，找比它大 1 的牌是否在\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex];\n            let top = toReceiveGroup.top;\n            if(top.point == minPoint) {\n                // 查找比它大 1 点的牌有没有在 Play 区域\n                let topOpenPoker = this._closeAreaGroup.top;\n                if(topOpenPoker && toReceiveGroup.IsNextPoker(topOpenPoker)) {\n                    if(!noPlay) {\n                        this.__MoveFromCloseToOpen(topOpenPoker);\n                    }\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n    private AutoPlayBestFitBottomOpenToReceive(noPlay: boolean = false): boolean {\n        if(!this.IsCanReflip()){\n            return false\n        }\n        if(!this._closeAreaGroup.IsPokersEmpty()) {\n            return false;\n        }\n        if(this._openAreaGroup.IsPokersEmpty()) {\n            return false;\n        }\n        // 1 顶部为空，找 A\n        let hasEmpty: boolean = false;\n        let minPoint: number = 13;\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex];\n            if(toReceiveGroup.IsPokersEmpty()) {\n                // 找 A\n                hasEmpty = true;\n                let bottomPoker = this._openAreaGroup.zero;\n                if(bottomPoker && bottomPoker.point == 1) {\n                    if(!noPlay) {\n                        this.__MoveFromOpenToClose();\n                    }\n                    return true;\n                }\n            }else{\n                let top = toReceiveGroup.top;\n                if(top.point < minPoint) {\n                    minPoint = top.point;\n                }\n            }\n        }\n        if(hasEmpty) {\n            // 有空位，但是找不到 A\n            return false;\n        }\n        if(minPoint === 13) {\n            return false;\n        }\n\n        // 2. 顶部不为空，查找最小的一张牌，找比它大 1 的牌是否存在\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex];\n            let top = toReceiveGroup.top;\n            if(top.point == minPoint) {\n                // 查找比它大 1 点的牌有没有在 Play 区域\n                let bottomPoker = this._openAreaGroup.zero;\n                if(bottomPoker && toReceiveGroup.IsNextPoker(bottomPoker)) {\n                    if(!noPlay) {\n                        this.__MoveFromOpenToClose();\n                    }\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n    private AutoPlayNoFlipOpenToReceive(noPlay: boolean = false): boolean {\n        let receiveIndex = this.__receiveIndexForPoker(this._openAreaGroup.top)\n        if(receiveIndex !== -1){\n            if(!noPlay){\n                this.__MoveFromOpenToReceive(this._openAreaGroup.top, receiveIndex)\n            }\n            return true\n        }\n        return false \n    }\n    private AutoPlayNoFlipOnOpenToPlay(noPlay: boolean = false): boolean {\n        let toPlayIndex = this.__playIndexForPoker(this._openAreaGroup.top)\n        if(toPlayIndex !== -1){\n            if(!noPlay){\n                this.__MoveFromOpenToPlay(this._openAreaGroup.top, toPlayIndex)\n            }\n            return true\n        }\n        return false\n    }\n    private AutoPlayNoFlipOnPlayToReceiveToCreateEmptyPlayGroup(noPlay: boolean = false): boolean {\n        for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n            let toReceiveGroup = this._receiveGroups[toReceiveIndex]\n            for(let fromPlayIndex = 0; fromPlayIndex<7; ++fromPlayIndex){\n                let fromPlayGroup = this._playGroups[fromPlayIndex]\n                let topOpenPoker = fromPlayGroup.top\n                if(topOpenPoker && toReceiveGroup.IsNextPoker(topOpenPoker) && topOpenPoker === fromPlayGroup.zero){\n                    if(!noPlay){\n                        this.__MoveFromPlayToReceive(topOpenPoker, toReceiveIndex)\n                    }\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayFlipOnOpenToPlay(noPlay: boolean = false): boolean {\n        let toPlayIndex = this.__playIndexOfFlipThrough_Play_Poker_Play(this._openAreaGroup.top)\n        if(toPlayIndex !== -1){\n            if(!noPlay){\n                this.__MoveFromOpenToPlay(this._openAreaGroup.top, toPlayIndex)\n            }\n            return true\n        }\n        return false\n    }\n    private AutoPlayFlipOnCloseToPlay(noPlay: boolean = false): boolean {\n        for(let index=this._closeAreaGroup.pokers.length-this.cardMode; index>=0;){\n            let toPlayIndex = this.__playIndexOfFlipThrough_Play_Poker_Play( this._closeAreaGroup.pokers[index] )\n            if(toPlayIndex !== -1){\n                if(!noPlay){\n                    this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                }\n                return true\n            }\n            if(this._isCard3Mode && index-this.cardMode < 0  && index > 0){\n                index = 0\n            }else{\n                index=index-this.cardMode\n            }\n        }\n        return false\n    }\n    private AutoPlayFlipOnUnderOpenToPlay(noPlay: boolean = false): boolean {\n        if(!this.IsCanReflip()){\n            return false\n        }\n        for(let index=this.cardMode-1; index < this._openAreaGroup.pokers.length-1; index = index + this.cardMode){\n            let fromPlayIndex = this.__playIndexOfFlipThrough_Play_Poker_Play( this._openAreaGroup.pokers[index] )\n            if(fromPlayIndex !== -1){\n                if(!noPlay){\n                    if(this._closeAreaGroup.top){\n                        this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                    }else{\n                        this.__MoveFromOpenToClose()\n                    }\n                }\n                return true\n            }\n        }\n        return false\n    }\n    private AutoPlayFlipOnOpenToPlayByTwoPokers(noPlay: boolean = false): boolean {\n        if(this._isCard3Mode){ return false }\n        let movePoker = this._openAreaGroup.top\n        let toPlayIndex = this.__playIndexForPoker(movePoker)\n        if(toPlayIndex !== -1){\n            // 1. UnderOpen 第一张可以下来，造成 【Common】\n            // OpenPoker -> Play | UnderOpenPoker -> OpenPoker | Play -> UnderOpenPoker | Flip\n            if(movePoker.IsConcatable(this._openAreaGroup.underTop)){\n                let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(this._openAreaGroup.underTop)\n                if(fromPlayIndex !== -1){\n                    if(!noPlay){\n                        this.__MoveFromOpenToPlay(movePoker, toPlayIndex)\n                    }\n                    return true\n                }\n            }\n            // 2. receive 区域有牌可以下来，造成 【Common】\n            // OpenPoker -> Play | ReceivePoker -> OpenPoker | Play -> ReceivePoker | Flip\n            for(let fromReceiveIndex = 0; fromReceiveIndex<4; ++fromReceiveIndex){\n                let fromReceivePoker = this._receiveGroups[fromReceiveIndex].top\n                if(movePoker.IsConcatable(fromReceivePoker)){\n                    let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(fromReceivePoker)\n                    if(fromPlayIndex !== -1){\n                        if(!noPlay){\n                            this.__MoveFromOpenToPlay(movePoker, toPlayIndex)\n                        }\n                        return true\n                    }\n                }\n            }\n            // 3. Close 可以下来，造成 【Common】\n            // OpenPoker -> Play | ClosePoker -> OpenPoker | Play -> ClosePoker | Flip\n            for(let index=this._closeAreaGroup.pokers.length-1; index>=0; --index){\n                let closePoker = this._closeAreaGroup.pokers[index]\n                if(movePoker.IsConcatable(closePoker)){\n                    let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(closePoker)\n                    if(fromPlayIndex !== -1){\n                        if(!noPlay){\n                            this.__MoveFromOpenToPlay(movePoker, toPlayIndex)\n                        }\n                        return true\n                    }\n                }\n            }\n            // 4. UnderOpen 除顶部一张外，可以下来，造成 【Common】\n            // OpenPoker -> Play | UnderOpenPoker -> OpenPoker | Play -> UnderOpenPoker | Flip\n            if(this.IsCanReflip()){\n                for(let index=0; index<this._openAreaGroup.pokers.length-2; ++index){\n                    let underOpenPoker = this._openAreaGroup.pokers[index]\n                    if(movePoker.IsConcatable(underOpenPoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(underOpenPoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                this.__MoveFromOpenToPlay(movePoker, toPlayIndex)\n                            }\n                            return true\n                        }\n                    }\n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayFlipOnReceiveToPlayByTwoPokers(noPlay: boolean = false): boolean {\n        if(this._isCard3Mode){ return false }\n        for(let receiveIndex=0; receiveIndex<4; ++receiveIndex){\n            let movePoker = this._receiveGroups[receiveIndex].top\n            let toPlayIndex = this.__playIndexForPoker(movePoker)\n            if(toPlayIndex !== -1){\n                // 1. Open 可以下来，造成 【Common】\n                // ReceivePoker -> Play | OpenPoker -> ReceivePoker | Play -> OpenPoker | Flip\n                if(movePoker.IsConcatable(this._openAreaGroup.top)){\n                    let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(this._openAreaGroup.top)\n                    if(fromPlayIndex !== -1){\n                        if(!noPlay){\n                            this.__MoveFromReceiveToPlay(movePoker, toPlayIndex)\n                        }\n                        return true\n                    }\n                }\n                // 1. receive 区域有牌可以下来，造成 【Common】\n                // ReceivePoker -> Play | ReceivePokerEx -> ReceivePoker | Play -> ReceivePokerEx | Flip\n                for(let fromReceiveIndex = 0; fromReceiveIndex<4; ++fromReceiveIndex){\n                    let fromReceivePoker = this._receiveGroups[fromReceiveIndex].top\n                    if(movePoker.IsConcatable(fromReceivePoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(fromReceivePoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                this.__MoveFromReceiveToPlay(movePoker, toPlayIndex)\n                            }\n                            return true\n                        }\n                    }\n                }\n                // 3. Close 可以下来，造成 【Common】\n                // ReceivePoker -> Play | ClosePoker -> ReceivePoker | Play -> ClosePoker | Flip\n                for(let index=this._closeAreaGroup.pokers.length-1; index>=0;--index){\n                    let closePoker = this._closeAreaGroup.pokers[index]\n                    if(movePoker.IsConcatable(closePoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(closePoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                this.__MoveFromReceiveToPlay(movePoker, toPlayIndex)\n                            }\n                            return true\n                        }\n                    }\n                }\n                // 4. UnderOpen 可以下来，造成 【Common】\n                // ReceivePoker -> Play | UnderOpenPoker -> ReceivePoker | Play -> UnderOpenPoker | Flip\n                if(this.IsCanReflip()){\n                    for(let index=0; index< this._openAreaGroup.pokers.length-1; ++index){\n                        let underOpenPoker = this._openAreaGroup.pokers[index]\n                        if(movePoker.IsConcatable(underOpenPoker)){\n                            let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(underOpenPoker)\n                            if(fromPlayIndex !== -1){\n                                if(!noPlay){\n                                    this.__MoveFromReceiveToPlay(movePoker, toPlayIndex)\n                                }\n                                return true\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayFlipOnCloseToPlayByTwoPokers(noPlay: boolean = false): boolean {\n        if(this._isCard3Mode){ return false }\n        for(let closePokerIndex=this._closeAreaGroup.pokers.length-1; closePokerIndex>=0;--closePokerIndex){\n            let movePoker = this._closeAreaGroup.pokers[closePokerIndex]\n            let toPlayIndex = this.__playIndexForPoker(movePoker)\n            if(toPlayIndex !== -1){\n                // NOTE 这里有一个动态变化的因素：Close 的牌过来的时候， Open 就变成 UnderOpen，因此，要注意优先级\n                // receive 区域有牌可以下来，造成 【Common】\n                // ClosePoker -> Play | ReceivePoker -> ClosePoker | Play -> ReceivePoker | Flip\n                for(let fromReceiveIndex = 0; fromReceiveIndex<4; ++fromReceiveIndex){\n                    let fromReceivePoker = this._receiveGroups[fromReceiveIndex].top\n                    if(movePoker.IsConcatable(fromReceivePoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(fromReceivePoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                            }\n                            return true\n                        }\n                    }\n                }\n\n                // Close 这张牌前面的那张牌 可以下来，造成 【Common】\n                // ClosePoker -> Play | BeforeClosePoker -> ClosePoker | Play -> BeforeClosePoker | Flip\n                let beforeCloseIndex = closePokerIndex+1\n                if(beforeCloseIndex < this._closeAreaGroup.pokers.length){\n                    let closePoker = this._closeAreaGroup.pokers[beforeCloseIndex]\n                    if(movePoker.IsConcatable(closePoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(closePoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                            }\n                            return true\n                        }\n                    }\n                }\n\n                // Close 这张牌后面的牌 可以下来，造成 【Common】\n                // ClosePoker -> Play | AfterClosePoker -> ClosePoker | Play -> AfterClosePoker | Flip\n                for(let index=closePokerIndex-1; index>=0;--index){\n                    let closePoker = this._closeAreaGroup.pokers[index]\n                    if(movePoker.IsConcatable(closePoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(closePoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                            }\n                            return true\n                        }\n                    }\n                }\n\n                // UnderOpen 和 Open 可以下来，造成 【Common】\n                // ClosePoker -> Play | UnderOpenOrOpenPoker -> ClosePoker | Play -> UnderOpenOrOpenPoker | Flip\n                if(this.IsCanReflip()){\n                    for(let index=0; index< this._openAreaGroup.pokers.length; ++index){\n                        let underOpenOrOpenPoker = this._openAreaGroup.pokers[index]\n                        if(movePoker.IsConcatable(underOpenOrOpenPoker)){\n                            let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(underOpenOrOpenPoker)\n                            if(fromPlayIndex !== -1){\n                                if(!noPlay){\n                                    this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                                }\n                                return true\n                            }\n                        }\n                    }\n                }\n                // Close 前面的牌可以下来，造成 【Common】\n                // ReceivePoker -> Play | ClosePoker -> ReceivePoker | Play -> ClosePoker | Flip\n                for(let index=this._closeAreaGroup.pokers.length-1; index>closePokerIndex; --index){\n                    let closePoker = this._closeAreaGroup.pokers[index]\n                    if(movePoker.IsConcatable(closePoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(closePoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                            }\n                            return true\n                        }\n                    }\n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayFlipOnUnderOpenToPlayByTwoPokers(noPlay: boolean = false): boolean {\n        if(this._isCard3Mode){ return false }\n        if(!this.IsCanReflip()){\n            return false\n        }\n        for(let underOpenPokerIndex=0; underOpenPokerIndex< this._openAreaGroup.pokers.length-1; ++underOpenPokerIndex){\n            let movePoker = this._closeAreaGroup.pokers[underOpenPokerIndex]\n            let toPlayIndex = this.__playIndexForPoker(movePoker)\n            if(toPlayIndex !== -1){\n                // receive 区域有牌可以下来，造成 【Common】\n                // UnderOpenPoker -> Play | ReceivePoker -> UnderOpenPoker | Play -> ReceivePoker | Flip\n                for(let fromReceiveIndex = 0; fromReceiveIndex<4; ++fromReceiveIndex){\n                    let fromReceivePoker = this._receiveGroups[fromReceiveIndex].top\n                    if(movePoker.IsConcatable(fromReceivePoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(fromReceivePoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                if(this._closeAreaGroup.top){\n                                    this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                                }else{\n                                    this.__MoveFromOpenToClose()\n                                }\n                            }\n                            return true\n                        }\n                    }\n                }\n                // UnderOpen 下方那张牌下来 造成 【Common】\n                let underUnderOpenIndex = underOpenPokerIndex - 1\n                if(underUnderOpenIndex >= 0) {\n                    let underUnderOpenPoker = this._openAreaGroup.pokers[underUnderOpenIndex]\n                    if(movePoker.IsConcatable(underUnderOpenPoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(underUnderOpenPoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                if(this._closeAreaGroup.top){\n                                    this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                                }else{\n                                    this.__MoveFromOpenToClose()\n                                }\n                            }\n                            return true\n                        }\n                    }\n                }\n                // UnderOpenPoker 上面的牌先下来 造成 【Common】\n                // UnderOpenPoker -> Play | UnderOpenOrOpenPoker -> UnderOpenPoker | Play -> UnderOpenOrOpenPoker | Flip\n                \n                for(let index=underOpenPokerIndex+1; index< this._openAreaGroup.pokers.length; ++index){\n                    let underOpenOrOpenPoker = this._openAreaGroup.pokers[index]\n                    if(movePoker.IsConcatable(underOpenOrOpenPoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(underOpenOrOpenPoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                if(this._closeAreaGroup.top){\n                                    this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                                }else{\n                                    this.__MoveFromOpenToClose()\n                                }\n                            }\n                            return true\n                        }\n                    }\n                }\n                // Close 下来，造成 【Common】\n                // UnderOpenPoker -> Play | ClosePoker -> UnderOpenPoker | Play -> ClosePoker | Flip\n                for(let index=this._closeAreaGroup.pokers.length-1; index>=0;--index){\n                    let closePoker = this._closeAreaGroup.pokers[index]\n                    if(movePoker.IsConcatable(closePoker)){\n                        let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(closePoker)\n                        if(fromPlayIndex !== -1){\n                            if(!noPlay){\n                                if(this._closeAreaGroup.top){\n                                    this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                                }else{\n                                    this.__MoveFromOpenToClose()\n                                }\n                            }\n                            return true\n                        }\n                    }\n                }\n                // UnderOpenPoker 下面的牌先下来 造成 【Common】\n                // UnderOpenPoker -> Play | UnderUnderOpenPoker -> UnderOpenPoker | Play -> UnderUnderOpenPoker | Flip\n                if(this.__isCanReflipByCount(this.flipCloseCardsCountBV.v+1)){\n                    for(let index=0; index< underOpenPokerIndex-1; ++index){\n                        let underOpenOrOpenPoker = this._openAreaGroup.pokers[index]\n                        if(movePoker.IsConcatable(underOpenOrOpenPoker)){\n                            let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(underOpenOrOpenPoker)\n                            if(fromPlayIndex !== -1){\n                                if(!noPlay){\n                                    if(this._closeAreaGroup.top){\n                                        this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                                    }else{\n                                        this.__MoveFromOpenToClose()\n                                    }\n                                }\n                                return true\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayNoFlipOnPlayToPlayToCreateEmptyPlayGroup(noPlay: boolean = false): boolean {\n        // 移动 Play 到另一组，腾出一列空列（前提：没有空列）\n        let isFull: boolean = this._playGroups.reduce((isAllFull, group) => isAllFull && (!group.IsPokersEmpty()), true)\n        if(isFull){\n            for(let toPlayIndex = 0; toPlayIndex<7; ++toPlayIndex){\n                let toPlayGroup = this._playGroups[toPlayIndex]\n                for(let fromPlayIndex = 0; fromPlayIndex<7; ++fromPlayIndex){\n                    let fromPlayGroup = this._playGroups[fromPlayIndex]\n                    let rootOpenPoker = fromPlayGroup.rootOpenPoker\n                    if(rootOpenPoker && toPlayGroup.IsConcatPoker(rootOpenPoker) && (fromPlayGroup.zero.status === EPokerStatus.OPEN && fromPlayGroup.zero.point !== 13)){\n                        if(!noPlay){\n                            this.__MoveFromPlayToPlay(rootOpenPoker, toPlayIndex)\n                        }\n                        return true                        \n                    }\n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayFlipOnReceiveToPlay(noPlay: boolean = false): boolean {\n        for(let fromReceiveIndex = 0; fromReceiveIndex < 4; ++fromReceiveIndex){\n            let toPlayIndex = this.__playIndexOfFlipThrough_Play_Poker_Play(this._receiveGroups[fromReceiveIndex].top)\n            if(toPlayIndex !== -1){\n                if(!noPlay){\n                    this.__MoveFromReceiveToPlay(this._receiveGroups[fromReceiveIndex].top, toPlayIndex)\n                }\n                return true\n            }\n        }\n        return false\n    }\n    private AutoPlayNoFlipOnPlayToReceive(noPlay: boolean = false): boolean {\n        for(let fromPlayIndex = 0; fromPlayIndex<7; ++fromPlayIndex){\n            let toReceiveIndex = this.__receiveIndexForPoker(this._playGroups[fromPlayIndex].top)\n            if(toReceiveIndex !== -1){\n                if(!noPlay){\n                    let fromPlayGroup = this._playGroups[fromPlayIndex]\n                    this.__MoveFromPlayToReceive(fromPlayGroup.top, toReceiveIndex)\n                }\n                return true\n            }\n        }\n        return false\n    }\n    private AutoPlayNoFlipCloseToReceive(noPlay: boolean = false): boolean {\n        for(let index=this._closeAreaGroup.pokers.length-this.cardMode; index>=0;){\n            if(this.__receiveIndexForPoker(this._closeAreaGroup.pokers[index]) !== -1){\n                if(!noPlay){\n                    this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                }\n                return true\n            }\n            if(this._isCard3Mode && index-this.cardMode < 0  && index > 0){\n                index = 0\n            }else{\n                index=index-this.cardMode\n            }\n        }\n        return false\n    }\n    private AutoPlayNoFlipUnderOpenToReceive(noPlay: boolean = false): boolean {\n        if(this.IsCanReflip()){\n            for(let index=this.cardMode-1; index < this._openAreaGroup.pokers.length-1; index = index + this.cardMode){\n                if(this.__receiveIndexForPoker(this._openAreaGroup.pokers[index]) !== -1){\n                    if(!noPlay){\n                        if(this._closeAreaGroup.top){\n                            this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                        }else{\n                            this.__MoveFromOpenToClose()\n                        }\n                    }\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayNoFlipOnCloseToPlay(noPlay: boolean = false): boolean {\n        for(let index=this._closeAreaGroup.pokers.length-this.cardMode; index>=0;){\n            let toPlayIndex = this.__playIndexForPoker( this._closeAreaGroup.pokers[index] )\n            if(toPlayIndex !== -1){\n                if(!noPlay){\n                    this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                }\n                return true\n            }\n            if(this._isCard3Mode && index-this.cardMode < 0  && index > 0){\n                index = 0\n            }else{\n                index=index-this.cardMode\n            }\n        }\n        return false\n    }\n    private AutoPlayNoFlipOnUnderOpenToPlay(noPlay: boolean = false): boolean {\n        if(this.IsCanReflip()){\n            for(let index=this.cardMode-1; index < this._openAreaGroup.pokers.length-1; index = index + this.cardMode){\n                let toPlayIndex = this.__playIndexForPoker( this._openAreaGroup.pokers[index] )\n                if(toPlayIndex !== -1){\n                    if(!noPlay){\n                        if(this._closeAreaGroup.top){\n                            this.__MoveFromCloseToOpen(this._closeAreaGroup.top)\n                        }else{\n                            this.__MoveFromOpenToClose()\n                        }\n                    }\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    private AutoPlayNoFlipOnPlayToPlayToMakeReceive(noPlay: boolean = false): boolean {\n        for(let receiveIndex = 0; receiveIndex<4; ++receiveIndex){\n            let g = this._receiveGroups[receiveIndex];\n            if(!g.IsPokersEmpty()) {\n                let receivePoker = g.top;\n                let point = receivePoker.point+1;\n                if(point <= 13) {\n                    // 查找扑克牌的位置\n                    for(let fromPlayIndex = 0; fromPlayIndex<7; ++fromPlayIndex){\n                        let playGroup = this._playGroups[fromPlayIndex];\n                        let targetPokerIndex = playGroup.GetPokerIndexBySuitPoint(receivePoker.suit, point, EPokerStatus.OPEN);\n                        if(targetPokerIndex != -1) {\n                            let abovePoker = playGroup.GetPoker(targetPokerIndex+1);\n                            let toPlayIndex = this.__playIndexForPoker(abovePoker);\n                            if(toPlayIndex !== -1) {\n                                this.__MoveFromPlayToPlay(abovePoker, toPlayIndex);\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    //#endregion\n\n    //#region //! 策略逻辑的辅助函数\n    // 获取 toPlayIndex ，如果  poker 到 Play, 出现 【Common】\n    private __playIndexOfFlipThrough_Play_Poker_Play(poker: Poker): number {\n        if(poker){\n            for(let toPlayIndex = 0; toPlayIndex<7; ++toPlayIndex){\n                let toPlayGroup = this._playGroups[toPlayIndex]\n                if(toPlayGroup.IsConcatPoker(poker)){\n                    let fromPlayIndex = this.__playIndexOfFlipOnPlayConcatedAfterPoker(poker)\n                    if(fromPlayIndex !== -1){\n                        return toPlayIndex\n                    }\n                }\n            }\n        }\n        return -1\n    }\n    //  返回 fromPlayIndex 【Common】\n    private __playIndexOfFlipOnPlayConcatedAfterPoker(toPoker: Poker): number {\n        for(let fromPlayIndex = 0; fromPlayIndex < 7; ++fromPlayIndex){\n            if(this.__isFlipOnPlayConcatedAfterPoker(fromPlayIndex, toPoker)){\n                return fromPlayIndex\n            }\n        }\n        return -1\n    }\n    // fromPlayIndex Concate 到这张牌上，会造成翻牌\n    private __isFlipOnPlayConcatedAfterPoker(fromPlayIndex: number, toPoker: Poker): boolean {\n        let g = this._playGroups[fromPlayIndex]\n        if(g.IsPokersEmpty()){\n            return false\n        }\n        let rootOpenPoker = g.rootOpenPoker\n        if(rootOpenPoker == g.top && toPoker.IsConcatable(rootOpenPoker)){\n            return g.IsAutoFlipOnRemovePoker(rootOpenPoker)\n        }else{\n            return false\n        }\n    }\n    // 返回 toReceiveIndex ，如果这张牌可以连接在该 Receive 组\n    private __receiveIndexForPoker(poker: Poker) {\n        if(poker){\n            for(let toReceiveIndex = 0; toReceiveIndex<4; ++toReceiveIndex){\n                if(this._receiveGroups[toReceiveIndex].IsNextPoker(poker)){\n                    return toReceiveIndex\n                }\n            }\n        }\n        return -1\n    }\n    // 返回 toPlayIndex ，如果这张牌可以连接在该 Play 组\n    private __playIndexForPoker(poker: Poker) {\n        if(poker){\n            for(let toPlayIndex = 0; toPlayIndex<7; ++toPlayIndex){\n                let group = this._playGroups[toPlayIndex]\n                if(group.IsConcatPoker(poker)){\n                    return toPlayIndex\n                }\n            }\n        }\n        return -1\n    }\n    //#endregion 策略逻辑的辅助函数\n\n    //#region //! 数据战斗\n    static ServerPlay(gameType: EGameType, seed: number, isVegasMode: boolean, isCard3Mode: boolean): SolitaireDataBattleResult {\n        let model = new SolitaireJu(gameType, isVegasMode, isCard3Mode)\n        model.Enter(seed)\n        let pass: boolean = model.AutoServerPlay()\n        let step = model.moveStepCountBV.v;\n        let flipCloseCnt = model.flipCloseCardsCountBV.v;\n        model.Exit()\n        return {\n            seed,\n            pass,\n            step,\n            flipCloseCnt\n        }\n    }\n\n    private static _s_Seed = 0;\n    static Test_DataBattle() {\n        let ret = SolitaireJu.ServerPlay(EGameType.EASY, this._s_Seed++, false, false);\n        if(ret.pass) {\n            console.log(` pass :: seed >> ${ret.seed} step >> ${ret.step} flip >> ${ret.flipCloseCnt}`)\n        }\n    }\n    //#endregion\n}\n"]}