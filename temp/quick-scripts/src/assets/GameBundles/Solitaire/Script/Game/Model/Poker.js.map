{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Game\\Model\\Poker.ts"],"names":[],"mappings":";;;;;;AAAA,uDAAsE;AAItE;IAYI,eAAY,KAAa,EAAE,IAAW,EAAE,MAAoB;QAX5D,UAAK,GAAW,CAAC,CAAC,CAAC;QACnB,SAAI,GAAU,sBAAK,CAAC,MAAM,CAAC;QAC3B,WAAM,GAAiB,6BAAY,CAAC,KAAK,CAAC;QAC1C,SAAI,GAAY,IAAI,CAAA;QACpB,UAAK,GAAe,IAAI,CAAA;QAKxB,iBAAY,GAAc,IAAI,CAAA;QAC9B,eAAU,GAAiB,6BAAY,CAAC,KAAK,CAAA;QAEzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAA;IAC5B,CAAC;IAXD,sBAAI,2BAAQ;aAAZ,cAA6B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAA,CAAC,CAAC;;;OAAA;IACzD,sBAAI,6BAAU;aAAd,cAA4B,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAA,CAAC,CAAC;;;OAAA;IACrD,sBAAI,wBAAK;aAAT,cAAwB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,IAAI,CAAA,CAAC,CAAC;;;OAAA;IACxD,sBAAI,+BAAY;aAAhB,cAA6B,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA,CAAC,CAAC;;;OAAA;IAUnE,wBAAwB;IACxB,4BAAY,GAAZ,UAAa,CAAQ;QACjB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;IAC3E,CAAC;IAEO,6BAAa,GAArB,UAAsB,IAAW;QAC7B,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACtC,CAAC;IAED,oBAAI,GAAJ;QACI,IAAI,QAAQ,GAAc;YACtB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAA;QACD,OAAO,QAAQ,CAAA;IACnB,CAAC;IACL,YAAC;AAAD,CAtCA,AAsCC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import { ESuit, EPokerStatus, ELocation } from \"../../SolitaireEnums\";\nimport PokerGroup from \"./PokerGroup\";\nimport UIPoker from \"../View/UIPoker\";\n\nexport default class Poker {\n    point: number = -1;\n    suit: ESuit = ESuit.HEITAO;\n    status: EPokerStatus = EPokerStatus.CLOSE;\n    view: UIPoker = null\n    group: PokerGroup = null\n    get location() : ELocation { return this.group.location }\n    get groupIndex() : number { return this.group.index }\n    get isTop() : boolean { return this.group.top === this }\n    get indexInGroup(): number { return this.group.indexOfPoker(this) }\n    initLocation: ELocation = null\n    initStatus: EPokerStatus = EPokerStatus.CLOSE\n    constructor(point: number, suit: ESuit, status: EPokerStatus) {\n        this.point = point\n        this.suit = suit\n        this.status = status\n        this.initStatus = status\n    }\n\n    // p 是否能够以红黑交替的方式连接在自己后面\n    IsConcatable(p: Poker): boolean {\n        return p && (this.point === p.point + 1 && !this.isSimilarSuit(p.suit))\n    }\n\n    private isSimilarSuit(suit: ESuit): boolean {\n        return (suit + this.suit) % 2 == 0\n    }\n\n    Snap(): SnapPoker{\n        let snapData: SnapPoker = {\n            point: this.point,\n            suit: this.suit,\n            status: this.status,\n            initLocation: this.initLocation,\n            initStatus: this.initStatus\n        }\n        return snapData\n    }\n}\n\nexport type SnapPoker = {\n    point: number\n    suit: ESuit\n    status: EPokerStatus\n    initLocation: ELocation\n    initStatus: EPokerStatus\n}\n"]}