{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Game\\View\\SolitaireGameUIPanel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { MarkSeed } from \"../../DataCache/SolitaireDataCache\";\nimport { SolitaireLogic } from \"../../Logic/SolitaireLogic\";\nimport { EGameType } from \"../../SolitaireEnums\";\nimport { SolitairePrefabCfg } from \"../../SolitairePrefabCfg\";\nimport { SolitaireJu } from \"../Model/SolitaireJu\";\nimport { SolitaireTestData } from \"../Model/SolitaireTestData\";\nimport SolitaireGameDesktopUI from \"./SolitaireGameDesktopUI\";\nimport SolitaireGameTopInfoUI, { SolitaireGameTopInfoUIArgs } from \"./SolitaireGameTopInfoUI\";\n\nexport type SolitaireGameUIPanelArgs = {\n    gameType: EGameType,\n    resume: boolean,\n    vegas: boolean,\n    card3: boolean,\n    markSeed?: MarkSeed\n}\n\nconst {ccclass, property} = cc._decorator;\n@ccclass\nexport default class SolitaireGameUIPanel extends ii.UIPanel<SolitaireGameUIPanelArgs> {\n    static readonly event = {\n        EVENT_GAMESCENE_REPLAY_GAME: 'EVT_SOLITAIRE_GAMEUI_REPLAY_GAME' // 重玩游戏（胜利页面）\n        ,EVENT_GAMESCENE_SKIP_GAME: 'EVT_SOLITAIRE_GAMEUI_SKIP_GAME' // 跳过当前进度局\n        ,EVENT_GAMESCENE_NEXT_GAME: 'EVT_SOLITAIRE_GAMEUI_NEXT_GAME' // 胜利页面，下一局\n        ,EVENT_GAMESCENE_BACK: 'EVT_SOLITAIRE_GAMEUI_BACK'\n        ,EVENT_GAMESCENE_SEED: 'EVENT_GAMESCENE_SEED' // 打开 Seed 界面\n    }\n    private m_IsTest: boolean = false;\n    private m_DesktopUI: SolitaireGameDesktopUI = null;\n    private m_TopInfoUI: SolitaireGameTopInfoUI = null;\n    private m_Ju: SolitaireJu = null;\n\n    protected OnCreate(): void {\n        this.onGlobal(SolitaireGameUIPanel.event.EVENT_GAMESCENE_REPLAY_GAME, this.HandleReplayGame.bind(this))\n        this.onGlobal(SolitaireGameUIPanel.event.EVENT_GAMESCENE_SKIP_GAME, this.HandleSkipGame.bind(this))\n        this.onGlobal(SolitaireGameUIPanel.event.EVENT_GAMESCENE_NEXT_GAME, this.HandleNextGame.bind(this))\n        this.onGlobal(SolitaireGameUIPanel.event.EVENT_GAMESCENE_BACK, this.OnBack.bind(this))\n        this.onGlobal(SolitaireGameUIPanel.event.EVENT_GAMESCENE_SEED, this.HandleOpenSeedList.bind(this))\n    }\n    protected OnRelease(): void { }\n    protected OnOpen(uiArgs: SolitaireGameUIPanelArgs): void {\n        this.SetIIClickHandler(\"OnBack\", this.OnBack.bind(this));\n        this.m_DesktopUI = ii.UIMgr.ins.Create<SolitaireGameDesktopUI>(SolitairePrefabCfg.pfb.comp.SolitaireGameDesktopUI.key, null, this.node).CloseBy(this);\n        this.m_TopInfoUI = ii.UIMgr.ins.Create<SolitaireGameTopInfoUI, SolitaireGameTopInfoUIArgs>(SolitairePrefabCfg.pfb.comp.SolitaireGameTopInfoUI.key, { OnBack: this.OnBack.bind(this) }, this.node).CloseBy(this);\n        if(this.m_IsTest) {\n            this.CreateGameWithTestData(this.args.vegas, this.args.card3, EGameType.EASY);\n        }else{\n            if(this.args.resume) {\n                let snapData = SolitaireLogic.dataCache.ReadSnapData(this.args.vegas, this.args.card3, this.args.gameType);\n                this.EnterGame(snapData.gameType, snapData.vegas, snapData.card3, ()=>this.m_Ju.EnterWithSnap(snapData));\n            }else{\n                switch (this.args.gameType) {\n                    case EGameType.EASY: this.__CreateEasyGame(this.args.vegas, this.args.card3); break;\n                    case EGameType.HARD:this.__CreateHardGame(this.args.vegas, this.args.card3); break;\n                    case EGameType.SEED: this.__CreateSeedGame(this.args.vegas, this.args.card3, this.args.markSeed.s); break\n                }\n            }\n        }\n    }\n    private __CreateEasyGame(vegas: boolean, card3: boolean) {\n        SolitaireLogic.dataCache.LoadEasyLevel(vegas, card3, (isVegasMode: boolean, isCard3Mode: boolean, seed: number)=>{\n            this.CreateGame(isVegasMode, isCard3Mode, EGameType.EASY, seed);\n        });\n    }\n    private __CreateHardGame(vegas: boolean, card3: boolean) { this.CreateGame(vegas, card3, EGameType.HARD, new ii.MCGRand(ii.date.getMilliTimeStamp()).range(1, 10000)); }\n    private __CreateSeedGame(vegas: boolean, card3: boolean, seed: number) { this.CreateGame(vegas, card3, EGameType.SEED, seed); }\n\n    private CreateGameWithTestData(vegas: boolean, card3: boolean, gameType: EGameType) {\n        this.EnterGame(gameType, vegas, card3, ()=>{\n            this.m_Ju.EnterWithTestData(SolitaireTestData.data1);\n        })\n    }\n\n    private CreateGame(isVegasMode: boolean, isCard3Mode: boolean, gameType: EGameType, seed: number) {\n        this.EnterGame(gameType, isVegasMode, isCard3Mode, ()=>this.m_Ju.Enter(seed))\n    }\n\n    private EnterGame(gameType: EGameType, isVegasMode: boolean, isCard3Mode: boolean, modelEnterFunc: Function){\n        ii.App.ins.p.ad.LoadInterstitialIfNotAvalable();\n        this.ExitGame(()=>{\n            this.m_Ju = new SolitaireJu(gameType, isVegasMode, isCard3Mode)\n            this.m_DesktopUI.Enter(this.m_Ju)\n            this.m_TopInfoUI.Enter(this.m_Ju)\n            modelEnterFunc()\n            this.StartScheduler(\"SOLITAIRE_GAME_TICK\", ()=>this.m_Ju.Tick(), 1);\n        })\n    }\n\n    private ExitGame(callback: Function) {\n        if(this.m_Ju){\n            this.StopScheduler(\"SOLITAIRE_GAME_TICK\");\n            this.m_TopInfoUI.Exit(this.m_Ju)\n            this.m_DesktopUI.Exit(this.m_Ju)\n            this.m_Ju.Exit()\n            this.m_Ju = null\n        }\n        callback()\n    }\n\n    /*********************************************************************\n     * Event Handlers\n     *********************************************************************/\n     private HandleReplayGame() {\n        SolitaireLogic.dataCache.ClearSnapData(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode, this.m_Ju.gameType);\n        this.CreateGame(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode, this.m_Ju.gameType, this.m_Ju.Seed)\n    }\n    private HandleSkipGame() {\n        // 跳过当前局，算玩家输了这局\n        SolitaireLogic.dataCache.SkipLevelIndex(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode, this.m_Ju.gameType, false);\n        switch (this.m_Ju.gameType) {\n            case EGameType.EASY: this.__CreateEasyGame(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode); break;\n            case EGameType.HARD:this.__CreateHardGame(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode); break;\n            case EGameType.SEED: {\n                let seed = SolitaireLogic.dataCache.GetNextMarkSeed(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode, this.m_Ju.Seed);\n                this.__CreateSeedGame(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode, seed);\n            } break\n        }\n    }\n    private HandleNextGame() {\n        SolitaireLogic.dataCache.SkipLevelIndex(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode, this.m_Ju.gameType, true);\n        switch (this.m_Ju.gameType) {\n            case EGameType.EASY: this.__CreateEasyGame(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode); break;\n            case EGameType.HARD:this.__CreateHardGame(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode); break;\n            case EGameType.SEED: {\n                let seed = SolitaireLogic.dataCache.GetNextMarkSeed(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode, this.m_Ju.Seed);\n                this.__CreateSeedGame(this.m_Ju.isVegasMode, this.m_Ju.isCard3Mode, seed);\n            } break\n        }\n    }\n    private OnBack() {\n        SolitaireLogic.dataCache.WriteSnapData(this.m_Ju.Snap(), this.m_Ju.gameType);\n        this.LoadResList([\n            SolitairePrefabCfg.pfb.panel.SolitaireMenuUIPanel.key\n        ], ()=>{\n            this.ExitGame(()=>{\n                ii.UIMgr.ins.Open(SolitairePrefabCfg.pfb.panel.SolitaireMenuUIPanel.key, null, ()=>this.Close())\n            })\n        })\n    }\n    private HandleOpenSeedList() {\n        ii.UIMgr.ins.Open<SolitaireLevelListUIPanelArgs>(SolitairePrefabCfg.pfb.panel.SolitaireSeedListUIPanel.key, {\n            vegas: this.m_Ju.isVegasMode,\n            card3: this.m_Ju.isCard3Mode,\n            OnSelect: (markSeed: MarkSeed, vegas: boolean, card3: boolean) => {\n                this.__CreateSeedGame(vegas, card3, markSeed.s);\n            }\n        });\n    }\n}\n"]}