{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\DataCache\\SolitaireSkinDataCache.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { SolitaireAutoAtlasCfg } from \"../SolitaireAutoAtlasCfg\";\nimport { SolitaireSpriteFrameCfg, TPokerBackSkin } from \"../SolitaireSpriteFrameCfg\";\n\nexport type SolitaireSkin = {\n    faceSkin: number,\n    bgSkin: number,\n    bgPatternSkin: number,\n    backSkin: TPokerBackSkin,\n    frontSkin: number\n}\n\ntype SkinDataCacheDataType = {\n    skinIndex: number, // 当前皮肤的下标\n    skinList: SolitaireSkin[],\n    unlock: {\n        start: number,\n        end: number\n    }\n}\n\nexport class SolitaireSkinDataCache extends ii.LSDataCache<SkinDataCacheDataType> {\n    protected get LSKey(): string { return \"ls_solitaire_skin_v1\" }\n    protected get DefaultLSData(): SkinDataCacheDataType {\n        return {\n            skinIndex: 0,\n            skinList: [\n                {\n                    faceSkin: 0,\n                    bgSkin: 0,\n                    bgPatternSkin: -1,\n                    backSkin: { kind: \"classic\", index: 0 },\n                    frontSkin: 0,\n                },\n                {\n                    faceSkin: 1,\n                    bgSkin: 1,\n                    bgPatternSkin: 0,\n                    backSkin: { kind: \"classic\", index: 1 },\n                    frontSkin: 0,\n                },\n                {\n                    faceSkin: 2,\n                    bgSkin: 2,\n                    bgPatternSkin: 1,\n                    backSkin: { kind: \"classic\", index: 2 },\n                    frontSkin: 0,\n                },\n                {\n                    faceSkin: 3,\n                    bgSkin: 3,\n                    bgPatternSkin: 2,\n                    backSkin: { kind: \"classic\", index: 3 },\n                    frontSkin: 0,\n                }\n            ],\n            unlock: {\n                start: 0,\n                end: 0\n            }\n        }\n    }\n    readonly MaxSkinLength: number = 4;\n    get SkinList(): readonly SolitaireSkin[] { return this.data.skinList; }\n    get IsMaxSkinLength(): boolean { return this.data.skinList.length >= this.MaxSkinLength; }\n    GetSkin(index: number): SolitaireSkin { return this.data.skinList[index]; }\n\n    initSkin: SolitaireSkin = null; // 进入游戏时的皮肤\n    skinIndexBV: ii.NumberBV = null;\n    skinBV: ii.BV<SolitaireSkin> = null;\n    unlockBV: ii.BooleanBV = null;\n    \n    protected OnRegister() {\n        this.skinIndexBV = ii.NumberBV.Borrow(this.data.skinIndex).ReturnBy(this).Bind(val=>{\n            this.data.skinIndex = val;\n            this.skinBV.v = this.data.skinList[val];\n        }, false, this);\n        // 皮肤的数据是内部修改的；\n        this.skinBV = ii.ObjectBV.Borrow(this.data.skinList[this.data.skinIndex]).ReturnBy(this);\n        this.unlockBV = ii.BooleanBV.Borrow(false).ReturnBy(this);\n        //! 记录创建时的皮肤数据，方便 UI 加载\n        this.initSkin = this.CloneSkin(this.skinBV.v);\n    }\n    protected OnUnRegister() { }\n\n    GetPreloadResList(): string[] {\n        let resList = [];\n        let skin = this.skinBV.v;\n        // 预加载的资源\n        resList.push(SolitaireSpriteFrameCfg.bgSkinUrl(skin.bgSkin));\n        resList.push(SolitaireSpriteFrameCfg.pokerBackUrl(skin.backSkin));\n        resList.push(SolitaireSpriteFrameCfg.pokerFrontUrl(skin.frontSkin));\n        \n        let faceSkin = skin.faceSkin;\n        for(let point = 1; point <=13; ++point) {\n            resList.push(SolitaireAutoAtlasCfg.getBlackPointSpriteFrameUrl(faceSkin, point))\n            resList.push(SolitaireAutoAtlasCfg.getRedPointSpriteFrameUrl(faceSkin, point))\n        }\n        for (let suit = 0; suit < 4; ++suit) {\n            resList.push(SolitaireAutoAtlasCfg.getFaceSuitSpritFrameUrl(faceSkin, suit))\n        }\n        for (let point = 11; point <= 13; ++point) {\n            for (let suit = 0; suit < 4; ++suit) {\n                resList.push(SolitaireAutoAtlasCfg.getJQKSpriteFrameUrl(faceSkin, suit, point))\n            }\n        }\n        return resList;\n    }\n\n    ExtendSkinList(onCompleted: (skinIndex: number)=>void) {\n        console.assert(!this.IsMaxSkinLength);\n        this.data.skinList.push(this.Random({\n            faceSkin: 0,\n            bgSkin: 0,\n            bgPatternSkin: -1,\n            backSkin: { kind: \"classic\", index: 0 },\n            frontSkin: 0,\n        }));\n        this.markDirty(0);\n        onCompleted(this.SkinList.length-1);\n    }\n\n    SelectSkinIndex(skinIndex: number) {\n        this.skinIndexBV.v = skinIndex;\n        this.markDirty(1);\n    }\n\n    SaveSkin(index: number, skin: SolitaireSkin) {\n        this.data.skinList[index] = this.CloneSkin(skin);\n        if(this.skinIndexBV.v === index) {\n            this.skinBV.v = this.data.skinList[index];\n        }\n        this.markDirty(1);\n    }\n\n    CloneSkin(skin: SolitaireSkin): SolitaireSkin {\n        let _skin: SolitaireSkin = {\n            faceSkin: skin.faceSkin,\n            bgSkin: skin.bgSkin,\n            bgPatternSkin: skin.bgPatternSkin,\n            backSkin: {\n                kind:skin.backSkin.kind,\n                index: skin.backSkin.index\n            },\n            frontSkin: skin.frontSkin\n        }\n        return _skin;\n    }\n    IsInitSkinChanged(): boolean { return this.IsSkinChanged(this.initSkin, this.skinBV.v); }\n    IsSkinChanged(preskin: SolitaireSkin, skin: SolitaireSkin): boolean { return !this.__IsSameSkin(preskin, skin); }\n    private __IsSameSkin(preskin: SolitaireSkin, skin: SolitaireSkin): boolean {\n        return preskin.faceSkin == skin.faceSkin\n            && preskin.bgSkin == skin.bgSkin\n            && preskin.bgPatternSkin == skin.bgPatternSkin\n            && preskin.backSkin.kind == skin.backSkin.kind\n            && preskin.backSkin.index == skin.backSkin.index\n            && preskin.frontSkin == skin.frontSkin\n    }\n\n\n    //! 随机\n    Random(skin: SolitaireSkin): SolitaireSkin {\n        skin.bgSkin = this.getRandIndex(SolitaireSpriteFrameCfg.bgSkinLength, skin.bgSkin);\n        skin.bgPatternSkin = this.getRandIndex(SolitaireSpriteFrameCfg.bgPatternSkinLength, skin.bgPatternSkin);\n        skin.faceSkin = this.getRandIndex(SolitaireAutoAtlasCfg.FaceSkinCnt, skin.faceSkin);\n\n        // back\n        let backSkinKind = skin.backSkin.kind;\n        let backSkinIndex = skin.backSkin.index;\n        let kindList = SolitaireSpriteFrameCfg.pokerBackKindCfg;\n        for(let ki=0; ki<kindList.length; ++ki) {\n            if(kindList[ki].kind == backSkinKind){\n                if(backSkinIndex < kindList[ki].count-1){\n                    skin.backSkin.index += 1;\n                    return skin;\n                }else{\n                    skin.backSkin.kind = kindList[(ki+1)%kindList.length].kind;\n                    skin.backSkin.index = 0;\n                    return skin;\n                }\n            }\n        }\n        return skin;\n    }\n\n    private getRandIndex(length: number, currentValue: number) {\n        if(length <= 1){\n            return currentValue\n        }\n        let val = ii.rand.IntBetween(0, length);\n        return (val)%length\n    }\n}\n"]}