{"version":3,"sources":["assets\\StartScene\\Script\\UIPanel\\LoadingUIPanel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACM,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAA4C,kCAAqB;IAAjE;QAAA,qEAuBC;QAtBqD,qBAAe,GAAY,IAAI,CAAC;QAChC,eAAS,GAAY,IAAI,CAAC;QACtB,mCAA6B,GAAc,IAAI,CAAC;QACjD,uBAAiB,GAAa,IAAI,CAAC;;IAmB5F,CAAC;IAjBa,iCAAQ,GAAlB;QACI,iBAAM,QAAQ,WAAE,CAAC;QACjB,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,6BAA6B,CAAC,SAAS,GAAG,CAAC,CAAC;IACrD,CAAC;IACS,wCAAe,GAAzB,UAA0B,MAAe;QACrC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;QACrC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;QAC/B,IAAG,MAAM,EAAE;YACP,IAAI,CAAC,6BAA6B,CAAC,SAAS,GAAG,CAAC,CAAC;SACpD;IACL,CAAC;IACS,kCAAS,GAAnB,UAAoB,WAAmB,EAAE,UAAkB;QACvD,IAAI,QAAQ,GAAG,WAAW,GAAC,GAAG,GAAC,UAAU,CAAC;QAC1C,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAG,CAAC;QAC1D,IAAI,CAAC,6BAA6B,CAAC,SAAS,GAAG,QAAQ,GAAC,IAAI,CAAC;IACjE,CAAC;IArByC;QAAzC,QAAQ,CAAC,EAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;2DAAyC;IACxC;QAAzC,QAAQ,CAAC,EAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;qDAAmC;IAC9B;QAA7C,QAAQ,CAAC,EAAC,IAAI,EAAE,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC;yEAAyD;IACzD;QAA5C,QAAQ,CAAC,EAAC,IAAI,EAAE,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC;6DAA4C;IAJvE,cAAc;QADlC,OAAO;OACa,cAAc,CAuBlC;IAAD,qBAAC;CAvBD,AAuBC,CAvB2C,EAAE,CAAC,kBAAkB,GAuBhE;kBAvBoB,cAAc","file":"","sourceRoot":"/","sourcesContent":["\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class LoadingUIPanel extends ii.BaseLoadingUIPanel {\n    @property({type: cc.Node, visible: true}) private _blockInputNode: cc.Node = null;\n    @property({type: cc.Node, visible: true}) private _fadeNode: cc.Node = null;\n    @property({type: cc.Sprite, tooltip: \"进度圆圈\"}) private m_LoadingProgressCircleSprite: cc.Sprite = null;\n    @property({type: cc.Label, tooltip: \"引用计数\"}) private m_LoadingRefLabel: cc.Label = null;\n\n    protected OnCreate(): void {\n        super.OnCreate();\n        this._fadeNode.active = false;\n        this.m_LoadingProgressCircleSprite.fillRange = 0;\n    }\n    protected OnActiveChanged(active: boolean): void {\n        this._blockInputNode.active = active;\n        this._fadeNode.active = active;\n        if(active) {\n            this.m_LoadingProgressCircleSprite.fillRange = 0;\n        }\n    }\n    protected OnLoading(finishCount: number, totalCount: number): void {\n        let _percent = finishCount*100/totalCount;\n        this.m_LoadingRefLabel.string = `${Math.ceil(_percent)}%`;\n        this.m_LoadingProgressCircleSprite.fillRange = _percent*0.01;\n    }\n}\n"]}