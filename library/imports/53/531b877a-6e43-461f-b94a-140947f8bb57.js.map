{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\SolitaireAutoAtlasCfg.ts"],"names":[],"mappings":";;;;;;;AAAA;IAAA;IA0CA,CAAC;IAtCG,sBAAW,2BAAE;aAAb;YACI,IAAG,IAAI,CAAC,GAAG,KAAK,IAAI,EAAE;gBAClB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAA;gBACb,SAAS;gBACT,KAAI,IAAI,QAAQ,GAAC,CAAC,EAAC,QAAQ,GAAC,IAAI,CAAC,WAAW,EAAC,EAAE,QAAQ,EAAE;oBACrD,KAAI,IAAI,IAAI,GAAC,CAAC,EAAE,IAAI,GAAC,CAAC,EAAC,EAAE,IAAI,EAAE;wBAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAC,IAAI,CAAC,CAAC;wBACvD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;wBACpB,MAAM;wBACN,KAAI,IAAI,KAAK,GAAG,EAAE,EAAE,KAAK,IAAE,EAAE,EAAE,EAAE,KAAK,EAAE;4BACpC,IAAI,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAC,IAAI,EAAC,KAAK,CAAC,CAAC;4BACzD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;yBACvB;qBACJ;iBACJ;gBAED,QAAQ;gBACR,KAAI,IAAI,QAAQ,GAAC,CAAC,EAAC,QAAQ,GAAC,IAAI,CAAC,WAAW,EAAC,EAAE,QAAQ,EAAE;oBACrD,KAAI,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,IAAE,EAAE,EAAE,EAAE,KAAK,EAAE;wBACnC,IAAI,KAAK,GAAG,IAAI,CAAC,2BAA2B,CAAC,QAAQ,EAAC,KAAK,CAAC,CAAC;wBAC7D,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;wBACxB,IAAI,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,QAAQ,EAAC,KAAK,CAAC,CAAC;wBAC3D,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;qBAC3B;iBACJ;aACJ;YACD,OAAO,IAAI,CAAC,GAAG,CAAC;QACpB,CAAC;;;OAAA;IAEM,8CAAwB,GAA/B,UAAgC,QAAgB,EAAE,IAAY,IAAI,OAAO,mBAAiB,QAAQ,SAAI,IAAM,CAAA,CAAC,CAAC;IACvG,0CAAoB,GAA3B,UAA4B,QAAgB,EAAE,IAAY,EAAE,KAAa,IAAY,OAAO,+BAA6B,QAAQ,SAAI,IAAI,SAAI,KAAO,CAAA,CAAC,CAAC;IAC/I,iDAA2B,GAAlC,UAAmC,QAAgB,EAAE,KAAa,IAAY,OAAO,iBAAe,QAAQ,WAAM,KAAO,CAAA,CAAC,CAAC;IACpH,+CAAyB,GAAhC,UAAiC,QAAgB,EAAE,KAAa,IAAY,OAAO,iBAAe,QAAQ,WAAM,KAAO,CAAA,CAAC,CAAC;IAElH,8BAAQ,GAAf,UAAgB,UAAkB;QAC9B,OAAO,CAAC,IAAI,CAAC,qCAAmC,UAAU,6CAAsB,CAAC,CAAA;QACjF,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACnE,CAAC;IAxCe,iCAAW,GAAW,CAAC,CAAC;IACxC,WAAW;IACI,yBAAG,GAA6B,IAAI,CAAC;IAuCxD,4BAAC;CA1CD,AA0CC,IAAA;AA1CY,sDAAqB","file":"","sourceRoot":"/","sourcesContent":["export class SolitaireAutoAtlasCfg {\n    static readonly FaceSkinCnt: number = 4;\n    //! 所有的精灵配置\n    private static _sp: ii.StringKeyDict<string> = null;\n    static get sp(): ii.StringKeyDict<string> {\n        if(this._sp === null) {\n            this._sp = {}\n            // p_face\n            for(let faceSkin=0;faceSkin<this.FaceSkinCnt;++faceSkin) {\n                for(let suit=0; suit<4;++suit) {\n                    let key = this.getFaceSuitSpritFrameUrl(faceSkin,suit);\n                    this._sp[key] = key;\n                    // jqk\n                    for(let point = 11; point<=13; ++point) {\n                        let jqk = this.getJQKSpriteFrameUrl(faceSkin,suit,point);\n                        this._sp[jqk] = jqk;\n                    }\n                }\n            }\n\n            // p_num\n            for(let faceSkin=0;faceSkin<this.FaceSkinCnt;++faceSkin) {\n                for(let point = 1; point<=13; ++point) {\n                    let key_b = this.getBlackPointSpriteFrameUrl(faceSkin,point);\n                    this._sp[key_b] = key_b;\n                    let key_r = this.getRedPointSpriteFrameUrl(faceSkin,point);\n                    this._sp[key_r] = key_r;\n                }\n            }\n        }\n        return this._sp;\n    }\n\n    static getFaceSuitSpritFrameUrl(faceSkin: number, suit: number) { return `p_face/p_face_${faceSkin}_${suit}` }\n    static getJQKSpriteFrameUrl(faceSkin: number, suit: number, point: number): string { return `p_face_point/p_face_point_${faceSkin}_${suit}_${point}` }\n    static getBlackPointSpriteFrameUrl(faceSkin: number, point: number): string { return `p_num/p_num_${faceSkin}_b_${point}` }\n    static getRedPointSpriteFrameUrl(faceSkin: number, point: number): string { return `p_num/p_num_${faceSkin}_r_${point}` }\n\n    static Register(bundleName: string): void {\n        console.info(`SolitaireAutoAtlasCfg::Register(${bundleName}) >> 注册 AutoAtlas 资源`)\n        ii.registerResDict(this.sp, bundleName, ii.EResType.AutoAtlas);\n    }\n}\n"]}