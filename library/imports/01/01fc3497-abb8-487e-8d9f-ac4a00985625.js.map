{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\DataCache\\SolitaireDataCache.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { SolitaireJu } from \"../Game/Model/SolitaireJu\";\nimport { SnapData } from \"../Game/SolitaireType\";\nimport { EGameType } from \"../SolitaireEnums\";\nimport { SolitaireJsonCfg } from \"../SolitaireJsonCfg\";\n\nexport type MarkSeed = {\n    t: EGameType,\n    s: number,\n    st: number\n}\n\ntype ModeHistoryData = {\n    easyLevelIndex: number, // Easy 模式下的关卡进度\n    passCount: number, // 过关局数\n    loseCount: number, // 失败次数\n    gameTimeBest: number, // 游戏时长: 历史最短\n    gameTimeAverage: number, // 游戏时长: 平均时长\n    gameTimeTotal: number, // 游戏时长: 总时长\n    moveStepBest: number,\n    moveStepAverage: number,\n    moveStepTotal: number,\n    moveStepWorest: number,\n    scoreBest: number,\n    scoreAverage: number,\n    scoreTotal: number\n}\n\ntype DataCacheDataType = {\n    coin: number,\n    help: number,\n    record: number, /** 可以免费记录的次数 */\n    leftHand: boolean,\n    cards3Mode: boolean,\n    vegasMode: boolean,\n\n    // statistic\n    passCount: number, // 总通关次数\n    loseCount: number, // 失败次数\n    markSeeds: MarkSeed[][]\n}\n\nexport abstract class SolitaireDataCacheUtil {\n    static MODE_2_INDEX(vegas: boolean, card3: boolean): number { return (vegas ? 2 : 0) + (card3 ? 1 : 0); }\n    static MODE_2_INDEX_BY_JU(ju: SolitaireJu): number { return this.MODE_2_INDEX(ju.isVegasMode, ju.isCard3Mode); }\n}\n\nexport class SolitaireDataCache extends ii.LSDataCache<DataCacheDataType> {\n    static readonly event = {\n        SYNC_UICOIN: \"dc.SOLITAIRE.COIN_CHANGED\"\n    }\n    protected get LSKey(): string { return \"ls_solitaire_v2\"; }\n    protected get DefaultLSData(): DataCacheDataType {\n        return {\n            coin: 100,\n            help: 3,\n            record: 3,\n            leftHand: false,\n            cards3Mode: false,\n            vegasMode: false,\n            passCount: 0,\n            loseCount: 0,\n            markSeeds: [ [\n                {t: EGameType.EASY, s: 1987, st: 0}\n            ],[\n                {t: EGameType.EASY, s: 1987, st: 0}\n            ],[\n                {t: EGameType.EASY, s: 1987, st: 0}\n            ],[\n                {t: EGameType.EASY, s: 1987, st: 0}\n            ] ]\n        };\n    }\n    protected OnUnRegister() { }\n    protected OnRegister() {\n        this.coinBV = ii.NumberBV.Borrow(this.data.coin).ReturnBy(this).Bind(val=>{ this.data.coin = val; this.markDirty(1) }, false, this);\n        this.helpBV = ii.NumberBV.Borrow(this.data.help).ReturnBy(this).Bind(val=>{ this.data.help = val; this.markDirty(1) }, false, this);\n        this.recordBV = ii.NumberBV.Borrow(this.data.record).ReturnBy(this).Bind(val=>{ this.data.record = val; this.markDirty(1) }, false, this);\n        this.leftHandBV = ii.BooleanBV.Borrow(this.data.leftHand).ReturnBy(this).Bind(val=>{ this.data.leftHand = val; this.markDirty(1) }, false, this);\n        this.cards3ModeBV = ii.BooleanBV.Borrow(this.data.cards3Mode).ReturnBy(this).Bind(val=>{ this.data.cards3Mode = val; this.markDirty(1) }, false, this);\n        this.vegasModeBV = ii.BooleanBV.Borrow(this.data.vegasMode).ReturnBy(this).Bind(val=>{ this.data.vegasMode = val; this.markDirty(1) }, false, this);\n        // statistic\n        this.passCountBV = ii.NumberBV.Borrow(this.data.passCount).ReturnBy(this).Bind(val=>{ this.data.passCount = val; this.markDirty(1) }, false, this);\n        this.loseCountBV = ii.NumberBV.Borrow(this.data.loseCount).ReturnBy(this).Bind(val=>{ this.data.loseCount = val; this.markDirty(1) }, false, this);\n        // mode history\n        for(let i=0;i<2;++i) {\n            for(let j=0;j<2;++j) {\n                let key = this.__ModeHistoryLSKey(i===1,j===1);\n                this.SetUserData(key, ii.ObjectBV.BorrowAsUserLS(key, this.defaultModeData, true).ReturnBy(this));\n            }\n        }\n    }\n    \n\n    coinBV: ii.NumberBV = null;\n    helpBV: ii.NumberBV = null;\n    recordBV: ii.NumberBV = null;\n    leftHandBV: ii.BooleanBV = null;\n    cards3ModeBV: ii.BooleanBV = null;\n    vegasModeBV: ii.BooleanBV = null;\n\n    //#region //! 金币管理\n    ChangeCoins(dCoins, onChange?: (dCoins: number)=>void) {\n        this.coinBV.v += dCoins;\n        if(onChange != null) {\n            onChange(dCoins);\n        }\n        this.emitGlobal(SolitaireDataCache.event.SYNC_UICOIN, this.coinBV.v);\n\n        if(dCoins > 0) {\n            ii.App.ins.p.user.SetGameCenterVal(\"ScoreAsCoin\", ii.App.ins.p.user.GetGameCenterVal(\"ScoreAsCoin\")+1);\n        }\n    }\n    //#endregion\n    \n    //#region //! 棋局快照\n    private SnapDataKey(vegas: boolean, card3: boolean, difficulty: EGameType): string { return `ls_solitaire_snap_data_${vegas?1:0}_${card3?1:0}_${difficulty}`; }\n    HasSnapData(vegas: boolean, card3: boolean, difficulty: EGameType): boolean { return ii.UserLSMgr.ins.hasKey(this.SnapDataKey(vegas, card3, difficulty)); }\n    ReadSnapData(vegas: boolean, card3: boolean, difficulty: EGameType): SnapData { return ii.UserLSMgr.ins.getObjectWithDefault<SnapData>(this.SnapDataKey(vegas, card3, difficulty), null); }\n    ClearSnapData(vegas: boolean, card3: boolean, difficulty: EGameType) { ii.UserLSMgr.ins.deleteKey(this.SnapDataKey(vegas, card3, difficulty)); }\n    WriteSnapData(snapData: SnapData, difficulty: EGameType) { ii.UserLSMgr.ins.setObject(this.SnapDataKey(snapData.vegas, snapData.card3, difficulty), snapData, true); }    \n    //#endregion\n\n    //#region //! 本地关卡数据配置表\n    LoadEasyLevel(isVegas: boolean, is3Card: boolean, cb: (isVegasMode: boolean, isCard3Mode: boolean, seed: number)=>void) {\n        let jsonAsset: cc.JsonAsset = this.__GetLevelJsonAsset(isVegas, is3Card);\n        let seeds: number[] = jsonAsset.json\n        let index = this.GetModeHistory(isVegas, is3Card).v.easyLevelIndex % seeds.length\n        let seed = seeds[index]\n        cb(isVegas, is3Card, seed)\n    }\n    private __GetLevelJsonAsset(isVegas: boolean, is3Card: boolean): cc.JsonAsset { return ii.ResMgr.ins.GetRes(SolitaireJsonCfg.GetLevelJsonResKey(isVegas, is3Card)); }\n    \n    //#endregion\n\n    //#region //! 历史数据\n    private get defaultModeData(): ModeHistoryData { return {\n        easyLevelIndex: 0, passCount: 0, loseCount: 0,\n        gameTimeBest: 0, gameTimeAverage: 0, gameTimeTotal: 0,\n        moveStepBest: 0, moveStepAverage: 0, moveStepTotal: 0, moveStepWorest: 0,\n        scoreBest: 0, scoreAverage: 0, scoreTotal: 0,\n    }}\n    passCountBV: ii.NumberBV = null;\n    loseCountBV: ii.NumberBV = null;\n    // 跳过当前关卡（用户点击 SkipGame 的时候，会调用到此方法)\n    private __ModeHistoryLSKey(vegas: boolean, card3: boolean): string { return `ls_mode_history_${vegas?1:0}_${card3?1:0}`; }\n    GetModeHistory(vegas: boolean, card3: boolean): ii.BV<ModeHistoryData> { return this.GetUserData(this.__ModeHistoryLSKey(vegas, card3)); }\n    SkipLevelIndex(vegas: boolean, card3: boolean, gameType: EGameType, isWin: boolean) {\n        // 清除快照数据\n        this.ClearSnapData(vegas, card3, gameType);\n        // 这种情况算失败，记录失败的数据\n        let modeHistoryBV = this.GetModeHistory(vegas, card3);\n        let modeHistoryValue = modeHistoryBV.v;  \n        if(isWin) {\n            // 过关局数\n            this.loseCountBV.v += 1;\n            modeHistoryValue.loseCount += 1;\n        }\n        if(gameType === EGameType.EASY) {\n            modeHistoryValue.easyLevelIndex += 1;\n        }\n        modeHistoryBV.v = modeHistoryValue;\n    }\n    ResetModeHistory(vegas: boolean, card3: boolean) { this.GetModeHistory( vegas, card3 ).v = this.defaultModeData; }\n    //#endregion\n\n    //#region //! 游戏胜利\n    HandleGameWin(ju: SolitaireJu) {\n        // 不同模式下的数据记录\n        let modeHistory = this.GetModeHistory(ju.isVegasMode, ju.isCard3Mode);\n        let modeHistoryValue = modeHistory.v;\n\n        // 进度记录\n        if(ju.gameType === EGameType.EASY){\n            modeHistoryValue.easyLevelIndex = modeHistoryValue.easyLevelIndex+1\n        }\n        \n        // 过关局数\n        this.passCountBV.v += 1;\n        modeHistoryValue.passCount += 1;\n\n        //! GameCenter 数据\n        ii.App.ins.p.user.SetGameCenterVal(\"GameWins\", ii.App.ins.p.user.GetGameCenterVal(\"GameWins\")+1);\n        \n        // 时间相关内容\n        {\n            let gameTime: number = ju.gameTime;\n            modeHistoryValue.gameTimeTotal += gameTime\n            if(gameTime < modeHistoryValue.gameTimeBest || modeHistoryValue.gameTimeBest == 0) {\n                modeHistoryValue.gameTimeBest = gameTime\n            }\n            modeHistoryValue.gameTimeAverage = Math.ceil(modeHistoryValue.gameTimeTotal/modeHistoryValue.passCount)\n        }\n\n        // 移动步数相关内容\n        {\n            let moveStep: number = ju.moveStepCountBV.v;\n            modeHistoryValue.moveStepTotal += moveStep\n            if(moveStep < modeHistoryValue.moveStepBest || modeHistoryValue.moveStepBest == 0) {\n                modeHistoryValue.moveStepBest = moveStep\n            }\n            if(moveStep > modeHistoryValue.moveStepWorest || modeHistoryValue.moveStepWorest == 0) {\n                modeHistoryValue.moveStepWorest = moveStep\n            }\n            modeHistoryValue.moveStepAverage = Math.ceil(modeHistoryValue.moveStepTotal/modeHistoryValue.passCount)\n        }\n\n        // 分数\n        {\n            let score: number = ju.scoreBV.v;\n            modeHistoryValue.scoreTotal += score\n            if(score > modeHistoryValue.scoreBest) {\n                modeHistoryValue.scoreBest = score\n            }\n            modeHistoryValue.scoreAverage = Math.ceil(modeHistoryValue.scoreAverage/modeHistoryValue.passCount)\n        }\n        ////////////////////////////////////////////////\n\n        modeHistory.v = modeHistoryValue;\n\n        // 清除 Resume 数据\n        this.ClearSnapData(ju.isVegasMode, ju.isCard3Mode, ju.gameType)\n    }\n    //#endregion\n    \n    //#region //! 种子管理\n    GetMarkSeedsList(vegas: boolean, card3: boolean): MarkSeed[] { return this.data.markSeeds[SolitaireDataCacheUtil.MODE_2_INDEX(vegas, card3)]; }\n    GetMarkSeedsListByJu(ju: SolitaireJu): MarkSeed[] { return this.data.markSeeds[SolitaireDataCacheUtil.MODE_2_INDEX_BY_JU(ju)]; }\n    private __SORT_FUNC = (a: MarkSeed, b: MarkSeed)=>{\n        if(a.t === b.t) {\n            return a.st-b.st;\n        }else{\n            return a.t - b.t;\n        }\n    }\n\n    GetNextMarkSeed(vegas: boolean, card3: boolean, seed: number): number {\n        let markSeeds = this.GetMarkSeedsList(vegas, card3);\n        for(let i=markSeeds.length-1; i>=0; --i) {\n            let levelData: MarkSeed = markSeeds[i];\n            if(levelData.s === seed) {\n                return markSeeds[(i+1)%markSeeds.length].s;\n            }\n        }\n        console.error(`SEED 类型关卡 >> 找不到下一关`)\n        return 1;\n    }\n\n    RecordSeed(ju: SolitaireJu, isWin: boolean) {\n        let markSeeds = this.GetMarkSeedsListByJu(ju);\n        // 过关种子\n        let find = false;\n        for(let i=markSeeds.length-1; i>=0; --i) {\n            let levelData: MarkSeed = markSeeds[i];\n            if(levelData.s === ju.Seed) {\n                find = true;\n                levelData.st = ju.moveStepCountBV.v;\n                markSeeds.sort(this.__SORT_FUNC);\n                this.markDirty(1);\n            }\n        }\n        if( (!find) && (ju.gameType !== EGameType.SEED) ) {\n            markSeeds.push({\n                t: ju.gameType,\n                s: ju.Seed,\n                st: isWin ? ju.moveStepCountBV.v : 0\n            });\n            markSeeds.sort(this.__SORT_FUNC);\n            this.markDirty(1);\n        }\n    }\n\n    RemoveSeed(vegas: boolean, card3: boolean,markSeed: MarkSeed): boolean {\n        let markSeeds = this.GetMarkSeedsList(vegas, card3);\n        // 过关种子\n        for(let i=markSeeds.length-1; i>=0; --i) {\n            let levelData: MarkSeed = markSeeds[i];\n            if(levelData.s === markSeed.s) {\n                markSeeds.splice(i, 1);\n                this.markDirty(1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    IsLevelRecorded(ju: SolitaireJu): boolean {\n        let markSeeds = this.GetMarkSeedsListByJu(ju);\n        let find = false;\n        for(let i=markSeeds.length-1; i>=0; --i) {\n            let pass = markSeeds[i]\n            if(pass.s === ju.Seed) {\n                find = true;\n            }\n        }\n        return find;\n    }\n\n    IsCanRecordJuSeed(ju: SolitaireJu): boolean {\n        return (ju.gameType !== EGameType.SEED) && (!this.IsLevelRecorded(ju)) \n    }\n    //#endregion\n}\n"]}