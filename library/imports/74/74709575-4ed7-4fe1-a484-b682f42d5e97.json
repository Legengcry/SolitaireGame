{
  "__type__": "cc.TextAsset",
  "_name": "ii.d",
  "_objFlags": 0,
  "_native": "",
  "text": "declare namespace numas {\n    abstract class BV<T> implements IReference {\n        protected m_CacheValue: T;\n        constructor(val: T);\n        Reset(): void;\n        abstract Return(): void;\n        ReturnBy<SELF extends BV<T>>(target: IAutoReturn): SELF;\n        get v(): T;\n        set v(val: T);\n        SetValueWithoutNotification(val: T): void;\n        protected abstract IsEqual(newVal: T, curVal: T): boolean;\n        private m_ObserversList;\n        protected NotifyObservers(cur: T, pre: T): void;\n        Bind<SELF extends BV<T>>(handler: ValueChangedFunc<T>, callOnBind: boolean, target: any): SELF;\n        TargetUnbind(target: any): void;\n        UnbindAll(): void;\n    }\n}\ndeclare namespace numas {\n    class BooleanBV extends BV<boolean> {\n        constructor();\n        protected IsEqual(newVal: boolean, curVal: boolean): boolean;\n        static Borrow(initValue: boolean): BooleanBV;\n        Return(): void;\n        static BorrowAsLS(key: string, defaultValue: boolean, isEncrypt: boolean): BooleanBV;\n        static BorrowAsUserLS(key: string, defaultValue: boolean, isEncrypt: boolean): BooleanBV;\n    }\n    class NumberBV extends BV<number> {\n        constructor();\n        protected IsEqual(newVal: number, curVal: number): boolean;\n        static Borrow(initValue: number): NumberBV;\n        Return(): void;\n        static BorrowAsLS(key: string, defaultValue: number, isEncrypt: boolean): NumberBV;\n        static BorrowAsUserLS(key: string, defaultValue: number, isEncrypt: boolean): NumberBV;\n    }\n    class MaxNumberBV extends BV<number> {\n        constructor();\n        protected IsEqual(newVal: number, curVal: number): boolean;\n        static Borrow(initValue: number): MaxNumberBV;\n        Return(): void;\n        static BorrowAsLS(key: string, defaultValue: number, isEncrypt: boolean): MaxNumberBV;\n        static BorrowAsUserLS(key: string, defaultValue: number, isEncrypt: boolean): MaxNumberBV;\n    }\n    class StringBV extends BV<string> {\n        constructor();\n        protected IsEqual(newVal: string, curVal: string): boolean;\n        static Borrow(initValue: string): StringBV;\n        Return(): void;\n        static BorrowAsLS(key: string, defaultValue: string, isEncrypt: boolean): StringBV;\n        static BorrowAsUserLS(key: string, defaultValue: string, isEncrypt: boolean): StringBV;\n    }\n    class ObjectBV extends BV<Object> {\n        constructor();\n        protected IsEqual(newVal: Object, curVal: Object): boolean;\n        static Borrow(initValue: Object): ObjectBV;\n        Return(): void;\n        static BorrowAsLS(key: string, defaultValue: Object, isEncrypt: boolean): ObjectBV;\n        static BorrowAsUserLS(key: string, defaultValue: Object, isEncrypt: boolean): ObjectBV;\n    }\n}\ndeclare namespace numas {\n    class BaseComp extends cc.Component {\n        protected onDestroy(): void;\n        private __im_UserData;\n        private get _i_userdata();\n        SetUserData(key: string, data: any): void;\n        GetUserData<T>(key: string): T;\n        HasUserData(key: string): boolean;\n        RemoveUserData(key: string): void;\n        RemoveAllUserData(): void;\n        protected onGlobal<T extends Function>(type: string, callback: T): T;\n        protected emitGlobal(key: string, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any): void;\n        protected offGlobal(): void;\n        AutoReturn<T extends IReference>(bv: T): T;\n        protected GetDataCache<T>(dataCacheName: any): T;\n        protected AddAutoReleaseDataCache<T extends DataCache>(dataCacheName: string, type: {\n            new (): T;\n        }): void;\n        AutoReleaseRes(resKey: string | string[]): void;\n        private __AutoReleaseRes;\n        private Destroy_AutoRelease;\n        private _i_AutoQueue;\n        private get _I_AutoReleaseItemQueue();\n        private __im_RefData;\n        private get _i_RefData();\n        protected SetAssetProperty<T extends cc.Asset>(key: string, data: T): T;\n        protected RemoveAllAssetProperty(): void;\n        private __im_SchedulerMap;\n        private get _I_SchedulerMap();\n        protected HasScheduler(key: string): boolean;\n        protected RegisterScheduler(key: string, func: Function): void;\n        protected StartScheduler(key: string, func: Function, interval: number, repeat?: number, delay?: number): void;\n        protected StopScheduler(key: any): void;\n        private StopAllScheduler;\n    }\n}\ndeclare namespace numas {\n    class ResListLoaderInfo {\n        private static _ins;\n        static get ins(): ResListLoaderInfo;\n        loaderCnt: NumberBV;\n        totalTaskCnt: NumberBV;\n        finishTaskCnt: NumberBV;\n    }\n    interface IAutoCloseUIComp<ARGS> {\n        __i_AutoCloseUIComp<T extends UIComp<ARGS>>(uiComp: T): T;\n    }\n    class BaseUIComp extends BaseComp {\n        private static _s_LOAD_EVENT_ID;\n        private static get LOAD_EVENT();\n        PositionTo<SELF extends BaseUIComp>(x: cc.Vec2 | cc.Vec3 | number, y?: number, z?: number): SELF;\n        protected onDestroy(): void;\n        protected get Task(): task.TaskComponent;\n        protected UUID_GROUP_KEY(key: string): string;\n        private _i_b_LoadFunctionCalled;\n        protected LoadRes<T extends cc.Asset>(resKey: string, cb: (asset: T, resKey: string) => void, autoReleaseRes: boolean, group?: string): void;\n        private Destroy_LoadResKey;\n        protected LoadResList(resKeyList: string[], cb: Function, hideLoading?: boolean, showWaiting?: boolean, parallelCount?: number): void;\n        OnIIClick(event: cc.Event.EventTouch, key: string): any;\n        private m_IIEventHandler;\n        protected SetIIClickHandler(key: string, handler: Function, hideSound?: boolean, blockInputSeconds?: number): void;\n        protected RemoveIIClickHandler(key: string): void;\n        protected RemoveAllIIClickHandler(): void;\n    }\n}\ndeclare namespace numas {\n    abstract class App extends BaseUIComp {\n        abstract get Version(): string;\n        abstract get sdkCfg(): TSDKCfg;\n        protected abstract get StartBundlePrefabCfg(): TPrefabCfg;\n        protected abstract AdapterCanvas(canvas: cc.Canvas): void;\n        protected get FrameRate(): number;\n        protected abstract OnAppLoad(): void;\n        protected get AppTracing(): boolean;\n        static ins: App;\n        private _canvas;\n        private _platform;\n        get p(): PlatformBase;\n        private readonly START_BUNDLE_NAME;\n        onLoad(): void;\n        private __LoadStartResListAndOnLoad;\n        private OnPreAppLoad;\n        protected EnterFirstGame(firstGameBundleName: string): void;\n        setDisplayStats(displayStats: boolean): App;\n        setFrameRate(frameRate: number): App;\n        protected FitHeight(): void;\n        protected FitWidth(): void;\n        protected FitCanvas(): App;\n        protected FitCanvasWithVisiableSize(visibleWidth: number, visibleHeight: number): App;\n        delayCall(seconds: number, cb: Function, block?: boolean): void;\n        Debug(): void;\n        private GetPlatformComponent;\n    }\n}\ndeclare namespace numas {\n    const Cfg: {\n        DefaultUserKey: string;\n    };\n}\ndeclare namespace numas {\n    class LangUtil {\n        private static _sysLang;\n        private static _lang;\n        private static _init;\n        static IsSystemLanguageChinese(): boolean;\n        private static InitSysLang;\n        static Get(...key: any[]): string;\n        static AddLangCfg(langCfg: {\n            [langCode: string]: {\n                [key: string]: string;\n            };\n        }): void;\n    }\n}\ndeclare namespace numas {\n    class Util {\n        static safeCall(cb: Function): void;\n        static onceCall: (cb: Function, cnt: number) => () => void;\n        static onceCallEx: <T>(cb: Action<T>, cnt: number) => (p: T) => void;\n        static playParticleSystem(particle: cc.ParticleSystem, delay?: number): void;\n        static block(seconds: number): (target: any, methodName: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n    }\n}\ndeclare namespace numas {\n    enum UIZIndex {\n        Stage = 0,\n        Normal = 128,\n        PopUp = 256,\n        TopModule = 512,\n        TopMsg = 1024,\n        SystemModule = 2048\n    }\n}\ndeclare namespace numas {\n    const IIStartPrefabCfg: {\n        dft: {\n            panel: {\n                DialogUIPanel: {\n                    key: string;\n                    z: UIZIndex;\n                };\n                MsgUIPanel: {\n                    key: string;\n                    z: UIZIndex;\n                };\n                BlockInputUIPanel: {\n                    key: string;\n                    z: UIZIndex;\n                };\n                LoadingUIPanel: {\n                    key: string;\n                    z: UIZIndex;\n                };\n                WaitingUIPanel: {\n                    key: string;\n                    z: UIZIndex;\n                };\n            };\n            comp: {};\n        };\n    };\n}\ndeclare namespace numas {\n    class LangCfg {\n        static readonly dft: {\n            dialog_title: string;\n            dialog_lablel0_ok: string;\n            dialog_lablel_sure: string;\n            dialog_lablel_cancel: string;\n            login_game: string;\n            login_fail_msg: string;\n            login_retry: string;\n        };\n    }\n}\ndeclare namespace numas {\n    class DialogUIPanelArgs {\n        btnCount: number;\n        msg: string;\n        title: string;\n        label0: string;\n        label1: string;\n        label2: string;\n        btnFunc0?: Function;\n        btnFunc1?: Function;\n        btnFunc2?: Function;\n        static Create1(msg: string, btnFunc0?: Function, label0?: string, title?: string): DialogUIPanelArgs;\n        static Create2(msg: string, btnFunc0?: Function, btnFunc1?: Function, label0?: string, label1?: string, title?: string): DialogUIPanelArgs;\n        static Create3(msg: string, btnFunc0?: Function, btnFunc1?: Function, btnFunc2?: Function, label0?: string, label1?: string, label2?: string, title?: string): DialogUIPanelArgs;\n    }\n}\ndeclare namespace numas {\n    const _LangCfg_DefaultJson: {\n        en: {\n            \"default.dialog_title\": string;\n            \"default.dialog_lablel0_ok\": string;\n            \"default.dialog_lablel_sure\": string;\n            \"default.dialog_lablel_cancel\": string;\n            \"default.login_game\": string;\n            \"default.login_fail_msg\": string;\n            \"default.login_retry\": string;\n        };\n        zh: {\n            \"default.dialog_title\": string;\n            \"default.dialog_lablel0_ok\": string;\n            \"default.dialog_lablel_sure\": string;\n            \"default.dialog_lablel_cancel\": string;\n            \"default.login_game\": string;\n            \"default.login_fail_msg\": string;\n            \"default.login_retry\": string;\n        };\n    };\n}\ndeclare namespace numas {\n    class AudioMgr extends cc.Component {\n        static ins: AudioMgr;\n        protected onLoad(): void;\n        private m_AudioHelper;\n        SetHelper(helper: IAudioHelper): void;\n        UseDefaultHelper(): void;\n        private m_ToPlayEffectQueue;\n        private m_PlayEffectScheduler;\n        private AddPlayEffect;\n        private ScheduleToPlayEffectQueue;\n        private __i_StartScheduler;\n        private __i_StopScheduler;\n        private DEFAULT_EFFECT;\n        SetDefaultEffect(audioKey: string): void;\n        get effectOffBV(): BooleanBV;\n        private _effectOffBV;\n        PlayEffect(audioKey?: string): void;\n        get effectVolume(): number;\n        set effectVolume(vol: number);\n        private PlayEffect_Impl;\n        private _musicOffBV;\n        get musicOffBV(): BooleanBV;\n        private m_LastMusicKey;\n        playMusic(audioKey: string, loop?: boolean): void;\n        IsMusicPlaying(): boolean;\n        PauseMusic(): void;\n        ResumeMusic(): void;\n        StopMusic(): void;\n        get musicVolume(): number;\n        set musicVolume(vol: number);\n    }\n}\ndeclare namespace numas {\n    class DefaultAudioHelper extends cc.EventTarget implements IAudioHelper {\n        private _effectQueue;\n        PlayEffect(audioClip: cc.AudioClip): void;\n        GetEffectVolume(): number;\n        SetEffectVolume(vol: number): void;\n        StopAllEffect(): void;\n        private m_CurMusicId;\n        private m_MusicClip;\n        PlayMusic(musicClip: cc.AudioClip, loop: boolean): void;\n        IsMusicPlaying(): boolean;\n        PauseMusic(): void;\n        ResumeMusic(): void;\n        StopMusic(): void;\n        GetMusicVolume(): number;\n        SetMusicVolume(vol: number): void;\n    }\n}\ndeclare namespace numas {\n    interface IAudioHelper {\n        PlayEffect(audioClip: cc.AudioClip): void;\n        GetEffectVolume(): number;\n        SetEffectVolume(vol: number): void;\n        StopAllEffect(): void;\n        PlayMusic(audioClip: cc.AudioClip, loop: boolean): void;\n        IsMusicPlaying(): boolean;\n        PauseMusic(): void;\n        ResumeMusic(): void;\n        StopMusic(): void;\n        GetMusicVolume(): number;\n        SetMusicVolume(vol: number): void;\n    }\n}\ndeclare namespace numas {\n    namespace Const {\n    }\n}\ndeclare namespace numas {\n    namespace ENUM {\n    }\n}\ndeclare namespace numas {\n    type Constructor<T = unknown> = new (...args: any[]) => T;\n    type VoidFunction = () => void;\n    type New<T> = new () => T;\n    type Action<T> = (elem: T) => void;\n    type Func<T, RETURN> = (elem: T) => RETURN;\n    type Predicate<T> = (elem: T) => boolean;\n    type ValueChangedFunc<T> = (cur: T, pre: T) => void;\n    type Resolve<T> = (value?: T) => void;\n    type Resolve2<T, S> = (value: T, t: S) => void;\n    type Reject<T> = (reason?: T) => void;\n    type StringKeyDict<V> = {\n        [key: string]: V;\n    };\n}\ndeclare namespace numas {\n    class DelayEventComponent extends cc.Component {\n        private m_IsEventHandlable;\n        private m_EventQueue;\n        private get EventQueue();\n        WrapEventHandler(handler: Function, target: any): Function;\n        HandleEvents(): void;\n        BlockEvents(): void;\n        onDestroy(): void;\n    }\n}\ndeclare namespace numas {\n    abstract class BaseLink<T> implements IReference {\n        get Count(): number;\n        IndexOf(find: Predicate<T>): number;\n        ReverseIndexOf(find: Predicate<T>): number;\n        Fetch(find: Predicate<T>): T;\n        ReverseFetch(find: Predicate<T>): T;\n        FetchByIndex(index: number): T;\n        ReverseFetchByIndex(index: number): T;\n        Remove(find: Predicate<T>, handler?: Action<T>): void;\n        ReverseRemove(find: Predicate<T>, handler: Action<T>): void;\n        RemoveFirst(find: Predicate<T>, handler?: Action<T>): void;\n        ReverseRemoveFirst(find: Predicate<T>, handler: Action<T>): void;\n        RemoveAll(handler?: Action<T>): void;\n        ReverseRemoveAll(handler?: Action<T>): void;\n        For(breakIf: Predicate<T>): boolean;\n        ReverseFor(breakIf: Predicate<T>): boolean;\n        ForEach(handler: Action<T>): void;\n        ReverseForEach(handler: Action<T>): void;\n        CountIf(ifFunc: Predicate<T>): number;\n        Contains(find: Predicate<T>, handler?: Action<T>): boolean;\n        protected FrontValue(): T;\n        protected TailValue(): T;\n        protected AddFront(elem: T): void;\n        protected AddTail(elem: T): void;\n        protected Get(): T;\n        protected ReverseGet(): T;\n        Reset(): void;\n        abstract Return(): void;\n        private m_front;\n        private m_tail;\n        private m_len;\n        constructor();\n        private AddNext;\n        private AddPrevious;\n        private RemoveNext;\n        private RemovePrevious;\n        private __RemoveByFind;\n        private __RemoveFirstByFind;\n        private __IndexOf;\n        private __Fetch;\n        private __FetchByIndex;\n        private __For;\n        private __ForEach;\n    }\n}\ndeclare namespace numas {\n    abstract class Queue<T> extends BaseLink<T> {\n        get Front(): T;\n        get Tail(): T;\n        Enqueue(elem: T): void;\n        Dequeue(): T;\n        ReverseDequeue(): T;\n    }\n}\ndeclare namespace numas {\n    class AnyQueue extends Queue<any> {\n        static Borrow(): AnyQueue;\n        Return(): void;\n    }\n}\ndeclare namespace numas {\n    abstract class Stack<T> extends BaseLink<T> {\n        get Top(): T;\n        get Bottom(): T;\n        Push(elem: T): void;\n        Pop(): T;\n        ReversePop(): T;\n    }\n}\ndeclare namespace numas {\n    class AnyStack extends Stack<any> {\n        static Borrow(): AnyStack;\n        Return(): void;\n    }\n}\ndeclare namespace numas {\n    class Heap<T> {\n        private m_Compare;\n        private data;\n        constructor(m_Compare: (a: T, b: T) => number);\n        private left;\n        private right;\n        private parent;\n        Add(element: T): void;\n        private siftUp;\n        ExtractRoot(): T;\n        private siftDown;\n        get Count(): number;\n        get Root(): T;\n        Clear(): void;\n    }\n}\ndeclare namespace numas {\n    class LinkNode implements IReference {\n        Next: LinkNode;\n        Previous: LinkNode;\n        Value: any;\n        Reset(): void;\n        static Borrow(value?: any): LinkNode;\n        Return(): void;\n    }\n}\ndeclare namespace numas {\n    class encrypt {\n        static encodeBase64(s: string): string;\n        static decodeBase64(s: string): string;\n    }\n}\ndeclare namespace numas {\n    class EventCenter extends cc.EventTarget {\n        private constructor();\n        private static _ins;\n        static get ins(): EventCenter;\n    }\n}\ndeclare namespace numas {\n    class CocosLocalStorageHelper implements ILocalStorageHelper {\n        private constructor();\n        private static _ins;\n        static get ins(): CocosLocalStorageHelper;\n        save(): void;\n        deleteKey(key: string): void;\n        hasKey(key: string): boolean;\n        setBool(key: string, val: boolean, isEncrypt: boolean): void;\n        getBool(key: string): boolean;\n        getBoolWithDefault(key: string, defaultVal: boolean): boolean;\n        setInt(key: string, val: number, isEncrypt: boolean): void;\n        getInt(key: string): number;\n        getIntWithDefault(key: string, defaultVal: number): number;\n        setString(key: string, val: string, isEncrypt: boolean): void;\n        getString(key: string): string;\n        getStringWithDefault(key: string, defaultVal: string): string;\n        setObject<T extends {}>(key: string, val: T, isEncrypt: boolean): void;\n        getObject<T>(key: string): T;\n        getObjectWithDefault<T>(key: string, defaultVal: T): T;\n        private PRE_FIX;\n        private getItem;\n        private setItem;\n    }\n}\ndeclare namespace numas {\n    interface ILocalStorageHelper {\n        save(): void;\n        deleteKey(key: string): void;\n        hasKey(key: string): boolean;\n        setBool(key: string, val: boolean, isEncrypt: boolean): any;\n        getBool(key: string): boolean;\n        getBoolWithDefault(key: string, defaultVal: boolean): any;\n        setInt(key: string, val: number, isEncrypt: boolean): any;\n        getInt(key: string): number;\n        getIntWithDefault(key: string, defaultVal: number): number;\n        setString(key: string, val: string, isEncrypt: boolean): any;\n        getString(key: string): string;\n        getStringWithDefault(key: string, defaultVal: string): any;\n        setObject<T extends {}>(key: string, val: T, isEncrypt: boolean): any;\n        getObject<T>(key: string): T;\n        getObjectWithDefault<T>(key: string, defaultVal: T): T;\n    }\n}\ndeclare namespace numas {\n    class LSMgr extends cc.Component {\n        static ins: LSMgr;\n        onLoad(): void;\n        private h;\n        SetHelper(helper: ILocalStorageHelper): void;\n        UseDefaultHelper(): void;\n        deleteKey(key: string): void;\n        hasKey(key: string): boolean;\n        setBool(key: string, val: boolean, isEncrypt: boolean): void;\n        getBool(key: string): boolean;\n        getBoolWithDefault(key: string, defaultVal: boolean): any;\n        setInt(key: string, val: number, isEncrypt: boolean): void;\n        getInt(key: string): number;\n        getIntWithDefault(key: string, defaultVal: number): number;\n        setString(key: string, val: string, isEncrypt: boolean): void;\n        getString(key: string): string;\n        getStringWithDefault(key: string, defaultVal: string): any;\n        setObject<T extends {}>(key: string, val: T, isEncrypt: boolean): void;\n        getObject<T>(key: string): T;\n        getObjectWithDefault<T>(key: string, defaultVal: T): T;\n    }\n}\ndeclare namespace numas {\n    class UserLSMgr extends cc.Component {\n        static ins: UserLSMgr;\n        onLoad(): void;\n        private h;\n        SetHelper(helper: ILocalStorageHelper): void;\n        UseDefaultHelper(): void;\n        private m_UserId;\n        setUserId(uid: string): void;\n        private checkUserId;\n        private key2UserKey;\n        deleteKey(key: string): void;\n        hasKey(key: string): boolean;\n        setBool(key: string, val: boolean, isEncrypt: boolean): void;\n        getBool(key: string): boolean;\n        getBoolWithDefault(key: string, defaultVal: boolean): any;\n        setInt(key: string, val: number, isEncrypt: boolean): void;\n        getInt(key: string): number;\n        getIntWithDefault(key: string, defaultVal: number): number;\n        setString(key: string, val: string, isEncrypt: boolean): void;\n        getString(key: string): string;\n        getStringWithDefault(key: string, defaultVal: string): any;\n        setObject<T extends {}>(key: string, val: T, isEncrypt: boolean): void;\n        getObject<T>(key: string): T;\n        getObjectWithDefault<T>(key: string, defaultVal: T): T;\n    }\n}\ndeclare namespace numas {\n    class NodePool {\n        private static _m;\n        static Get<T extends cc.Component>(k: string, typ: {\n            new (): T;\n        }): T;\n        static Put<T extends cc.Component>(k: string, c: T): void;\n        private static GetPool;\n    }\n}\ndeclare namespace numas {\n    interface IAutoReturn {\n        AutoReturn<T extends IReference>(target: T): T;\n    }\n    interface IReference {\n        Reset(): void;\n        Return(): void;\n    }\n}\ndeclare namespace numas {\n    interface IReferenceSinglePool {\n        Borrow(): IReference;\n        Return(reference: IReference): void;\n        Add(count: number): void;\n        Remove(count: number): void;\n        RemoveAll(): any;\n    }\n}\ndeclare namespace numas {\n    class ReferencePool {\n        private static readonly s_ReferenceCollections;\n        static Debug(): void;\n        static get Count(): number;\n        static ClearAll(): void;\n        static Borrow<T extends IReference>(typ: New<T>): T;\n        static Return<T extends IReference>(typ: New<T>, reference: T): void;\n        static Add<T extends IReference>(typ: {\n            new (): T;\n        }, count: number): void;\n        static Remove<T extends IReference>(typ: {\n            new (): T;\n        }, count: number): void;\n        static RemoveAll<T extends IReference>(typ: {\n            new (): T;\n        }): void;\n        private static GetReferenceCollection;\n    }\n}\ndeclare namespace numas {\n    class ReferenceSinglePool<T extends IReference> implements IReferenceSinglePool {\n        private m_References;\n        private m_UsingReferenceCount;\n        private m_BorrowReferenceCount;\n        private m_ReleaseReferenceCount;\n        private m_AddReferenceCount;\n        private m_RemoveReferenceCount;\n        private m_New;\n        constructor(creator: New<T>);\n        get UnusedReferenceCount(): number;\n        get UsingReferenceCount(): number;\n        get BorrowReferenceCount(): number;\n        get ReleaseReferenceCount(): number;\n        get AddReferenceCount(): number;\n        get RemoveReferenceCount(): number;\n        Borrow(): IReference;\n        Return(reference: IReference): void;\n        Add(count: number): void;\n        Remove(count: number): void;\n        RemoveAll(): void;\n    }\n}\ndeclare namespace numas {\n    module StateMachine {\n        const VERSION = \"2.3.5\";\n        const Result: {\n            SUCCEEDED: number;\n            NOTRANSITION: number;\n            CANCELLED: number;\n            PENDING: number;\n        };\n        const Error: {\n            INVALID_TRANSITION: number;\n            PENDING_TRANSITION: number;\n            INVALID_CALLBACK: number;\n        };\n        const WILDCARD = \"*\";\n        const ASYNC = \"async\";\n        function create(cfg: any, target?: any): {\n            current: string;\n            is: (state: Array<string> | string) => boolean;\n            can: (event: string) => boolean;\n            cannot: (event: string) => boolean;\n            transitions: () => Array<string>;\n            isFinished: () => boolean;\n        };\n    }\n}\ndeclare namespace numas {\n    namespace task {\n        type TaskFunc = (resolve: Function, reject?: Function) => void;\n        enum ETaskStatus {\n            NONE = 0,\n            RUNNING = 1,\n            DONE = 2,\n            ERROR = 3\n        }\n        class TaskComponent extends cc.Component {\n            private _m_TaskQueue;\n            private get TaskQueue();\n            private _m_RunningTaskQueue;\n            private get RunningTaskQueue();\n            private m_TaskScheduler;\n            private _m_CallbackQueue;\n            private get CallbackQueue();\n            AddFunc(func: TaskFunc): TaskComponent;\n            Run(parallelCount: number, onCompleted?: Function): TaskComponent;\n            RemoveSelf(): void;\n            private StartTaskScheduler;\n            private StopTaskScheduler;\n            private UpdateLoading;\n            onDestroy(): void;\n        }\n    }\n}\ndeclare namespace numas {\n    abstract class date {\n        static TimeStamp2Date(timeStamp: number): Date;\n        static Date2TimeStamp(date: Date): number;\n        static getTimeStamp(): number;\n        static getMilliTimeStamp(): number;\n        static IsSameDay(date1: Date, date2: Date): boolean;\n        static IsSameDayTimeStamp(ts1: number, ts2: number): boolean;\n        static zeroHourOfTimeStamp(timeStamp: number): number;\n        static zeroHourTimeStampOfDate(date: Date): number;\n        static tomorrowTimeStamp(timeStamp: number): number;\n        static tomorrowTimeStampOfDate(date: Date): number;\n        static IsToday(timeStamp: number): boolean;\n        static IsBeforToday(timeStamp: number): boolean;\n        static Format(seconds: number, format?: string, single?: boolean): string;\n    }\n}\ndeclare namespace numas {\n    enum Dir {\n        Right = 0,\n        Top = 1,\n        Left = 2,\n        Bottom = 3\n    }\n}\ndeclare namespace numas {\n    abstract class UIPanel<ARGS = any> extends BaseUIComp implements IAutoCloseUIComp<ARGS> {\n        protected args: ARGS;\n        private _$isOpened_;\n        private _$isOpening_;\n        private _$uph_;\n        GetUPH(): UIPH;\n        GetResKey(): string;\n        $__i_InitByUPH(placeHolder: UIPH): void;\n        $__i_CloseByUPH(): void;\n        $__i_OnOpen(uiArgs: ARGS): void;\n        protected abstract OnCreate(): void;\n        protected abstract OnRelease(): void;\n        protected abstract OnOpen(uiArgs: ARGS): void;\n        Close(): void;\n        private _m_BVList_;\n        protected BindBV<T>(observer: BV<T>, callback: ValueChangedFunc<T>, callOnBinded: boolean): void;\n        protected UnbindAllBV(): void;\n        protected onDestroy(): void;\n        private _guideNotify;\n        SetGuideNotificationActive(active: boolean): void;\n        private TryNotifyGuideEvent;\n        __i_AutoCloseUIComp<T extends UIComp<any>>(uiComp: T): T;\n        private _i_UICompQueue;\n        private get _I_AutoCloseUICompQueue();\n        private __i_CloseAllAutoCloseUIComp;\n    }\n}\ndeclare namespace numas {\n    namespace guide {\n        const Event: {\n            DRAG_START: string;\n            DRAG_END: string;\n        };\n        const ActionType: {\n            fade: string;\n            up_down: string;\n        };\n        type ActionData<T> = {\n            typ: string;\n            delay: number;\n            duration: number;\n            from: T;\n            to: T;\n        };\n        const PositionType: {\n            related_to_node_id: string;\n        };\n        type PositionData = {\n            typ: string;\n            node_id: string;\n            dx: number;\n            dy: number;\n        };\n        type StepData = {\n            typ: string;\n            kv: {\n                k: string;\n                v: any;\n            }[];\n        };\n        type GuideData = {\n            steps: StepData[];\n        };\n        class Step {\n            private m_Data;\n            private m_Helper;\n            private m_NextStepOnceFunc;\n            get NextStep(): Function;\n            constructor(data: StepData, helper: IGuidePlayer, nextStepOnceFunc: Function);\n            GetV(k: string): any;\n            GetVWithDefault(k: string, defaultV: any): any;\n            get typ(): string;\n            get kv(): {\n                k: string;\n                v: any;\n            }[];\n            get args(): any;\n            get click_bg(): boolean;\n            get color(): number;\n            get col_row(): ITileData;\n            get dir(): Dir;\n            get dx(): number;\n            get dy(): number;\n            get enter_action(): ActionData<number>;\n            get exit_action(): ActionData<number>;\n            get path_action(): {\n                from: PositionData;\n                to: PositionData;\n                duration: number;\n                interval: number;\n            };\n            get position(): PositionData;\n            get res_key(): string;\n            get text(): string;\n            get time(): number;\n            get tiles(): ITileData[];\n            get node_id(): string;\n            get next_step_event(): string;\n            get x(): number;\n            get y(): number;\n            get z(): number;\n            GetNodePosition(node: cc.Node, positionData: PositionData): cc.Vec3;\n            CheckColRow(oColRow: ITileData): boolean;\n        }\n        abstract class ActionUtil {\n            static Run<T>(node: cc.Node, action: ActionData<T>, cb: Function): cc.Tween;\n            private static RunFadeAction;\n            private static RunUpDownAction;\n        }\n        interface IGuideDelegate {\n            OnGuideFinished(): any;\n            OnGuideGetNode(node_id: string): cc.Node;\n            OnGuideStep(step: Step): any;\n        }\n        interface IGuideDialog {\n            node: cc.Node;\n            Show(step: Step, nextFunc: Function): any;\n        }\n        interface IGuideFinger {\n            node: cc.Node;\n            Show(step: Step): any;\n            Hide(): any;\n            OnDragStart(): any;\n            OnDragEnd(): any;\n        }\n        type GuideUIPanelArgs = {\n            guideCtrl: GuideCtrl;\n            delegate: IGuideDelegate;\n            guideData: GuideData;\n            onCompleted: Function;\n        };\n        interface IGuidePlayer {\n            GetNodePosition(node: cc.Node, positionData: PositionData): cc.Vec3;\n            Step: Step;\n        }\n        abstract class GuidePlayerUIPanel extends UIPanel<GuideUIPanelArgs> implements IGuidePlayer {\n            protected abstract get TransferRoot(): cc.Node;\n            protected abstract get Background(): cc.Node;\n            protected abstract get Dialog(): IGuideDialog;\n            protected abstract get Finger(): IGuideFinger;\n            protected get Delegate(): IGuideDelegate;\n            private _stepIndex;\n            protected get stepDatas(): StepData[];\n            private _bInitNextStep;\n            private _step;\n            get Step(): Step;\n            private m_OnBackgroundClick_;\n            private m_NodeParentMap;\n            protected abstract OnCreateSelf(): any;\n            protected abstract OnReleaseSelf(): any;\n            protected abstract SetBackgroundClickHandler(handler: Function): any;\n            protected abstract OnOpenSelf(): any;\n            protected OnCreate(): void;\n            protected OnOpen(uiArgs: GuideUIPanelArgs): void;\n            protected OnRelease(): void;\n            protected onDestroy(): void;\n            private nextStep;\n            private __doStep;\n            GetNodePosition(node: cc.Node, positionData: PositionData): cc.Vec3;\n        }\n        class GuideCtrl {\n            private static _playingDict;\n            static GetIsGuiding(guideKey: string): boolean;\n            static SetIsGuiding(guideKey: string, isGuiding: boolean): void;\n            private _guideKey;\n            private _delegate;\n            static Create(guideKey: string, delegate: IGuideDelegate): GuideCtrl;\n            private constructor();\n            Release(): void;\n            IsGuided(): boolean;\n            get IsGuiding(): boolean;\n            StartGuide(pfbKey: string, guideData: GuideData): void;\n            private FinishGuide;\n            private _guidePlayer;\n            get GuidePlayer(): IGuidePlayer;\n            set GuidePlayer(guidePlayer: IGuidePlayer);\n            get Step(): Step;\n        }\n    }\n}\ndeclare namespace numas {\n    interface IDrag<T> {\n        SetZIndex(zIndex: number): void;\n        OnDragStart(event: cc.Event.EventTouch, delegate: IDragDelegate<T>): void;\n        OnDragMove(event: cc.Event.EventTouch, delegate: IDragDelegate<T>): void;\n        OnDragEnd(event: cc.Event.EventTouch, delegate: IDragDelegate<T>): void;\n        DragTarget(): T;\n    }\n    interface IDragDelegate<T> {\n        OnDragTouchStart(item: IDrag<T>, event: cc.Event.EventTouch): boolean;\n        OnDragTouchMove(item: IDrag<T>, event: cc.Event.EventTouch): any;\n        OnDragTouchEnd(item: IDrag<T>, event: cc.Event.EventTouch): any;\n    }\n}\ndeclare namespace numas {\n    interface ITileData {\n        col: number;\n        row: number;\n    }\n    interface ITile extends ITileData {\n        col: number;\n        row: number;\n        Return(): void;\n    }\n}\ndeclare namespace numas {\n    class Tile implements IReference {\n        col: number;\n        row: number;\n        static Borrow(): Tile;\n        Return(): void;\n        Reset(): void;\n        Init(col: number, row: number): Tile;\n    }\n}\ndeclare namespace numas {\n    class HttpUtil {\n        static xxxx(): void;\n    }\n}\ndeclare namespace numas {\n    class HttpWeChatUtil {\n        static Get(url: string, data: {}, onSuccess: Resolve<any>, onFail: Reject<any>): void;\n        static Post(url: string, data: {}, onSuccess: Resolve<any>, onFail: Reject<any>): void;\n        private static request;\n    }\n}\ndeclare namespace numas {\n    class NetUtil {\n        static IsWifi(): boolean;\n    }\n}\ndeclare namespace numas {\n    type LoadingADUIPanelArgs = {\n        duration: number;\n        cb: Function;\n    };\n    abstract class ALoadingADUIPanel<T extends LoadingADUIPanelArgs> extends UIPanel<T> {\n        protected abstract OnOpenLoadingAD(args: T): any;\n        protected OnOpen(args: T): void;\n    }\n}\ndeclare namespace numas {\n    class PlatformUtil {\n        static get IsiOS(): boolean;\n        static get IsWechat(): boolean;\n        static OpenAppStore(cfg: TSDKCfg): void;\n    }\n}\ndeclare namespace numas {\n    abstract class SDKBase extends BaseComp {\n        private _isInit;\n        protected sdkCfg: TSDKCfg;\n        Init(cfg: TSDKCfg): any;\n        protected abstract OnInit(cfg: TSDKCfg): void;\n    }\n}\ndeclare namespace numas {\n    abstract class ADBase extends SDKBase implements IAD {\n        abstract IsSupport(): boolean;\n        protected abstract InitByScriptImpl(): void;\n        protected abstract ShowBannerImpl(isShow: boolean): void;\n        protected abstract IsInterstitialAvailableImpl(): boolean;\n        protected abstract LoadInterstitialImpl(): void;\n        protected abstract ShowInterstitialImpl(handler: InterstitialCallback): void;\n        protected abstract IsRewardedVideoAvailableImpl(): boolean;\n        protected abstract ShowRewardedVideoImpl(callback: (type: EInternalRewardedVideo, isRewared: boolean) => void): void;\n        readonly RewardedVideoBV: BooleanBV;\n        readonly RemoveAdsSecondsBV: NumberBV;\n        private m_InitByScript;\n        IsInitByScript(): boolean;\n        InitByScript(): void;\n        ShowBanner(isShow: boolean): void;\n        IsInterstitialAvailable(): boolean;\n        LoadInterstitial(): void;\n        LoadInterstitialIfNotAvalable(): void;\n        ShowInterstitialWithBlocker(callback: Function, blockerPrefabKey: string, blockDuration: number): void;\n        ShowInterstitial(callback: Function): void;\n        private __ShowInterstitial;\n        IsRewardedVideoAvailable(): boolean;\n        ShowRewardedVideo(callback: () => void): void;\n        private m_Tmp_IsReceivedRewardedEvent;\n        private m_Tmp_IsReceivedHideEvent;\n        ShowRewardedVideoEx(callback: RewardedVideoCallback): void;\n        RemoveAdsForSeconds(seconds: number): void;\n        private __i_StartADTick;\n        private __I_AD_TICK;\n        IsAdRemoved(): boolean;\n    }\n}\ndeclare namespace numas {\n    abstract class PlatformBase extends cc.Component {\n        private _isInit;\n        protected sdkCfg: TSDKCfg;\n        Init(cfg: TSDKCfg): PlatformBase;\n        protected abstract GetUserClass(): any;\n        get user(): IUser;\n        private _user;\n        protected abstract GetADClass(): any;\n        get ad(): IAD;\n        private _ad;\n        protected abstract GetVibrateClass(): any;\n        get vibrate(): IVibrate;\n        private _vibrate;\n    }\n}\ndeclare namespace numas {\n    abstract class UserBase extends SDKBase implements IUser {\n        protected OnInit(cfg: TSDKCfg): void;\n        abstract IsAuthedUserInfo(): boolean;\n        abstract AuthUserInfo(buttonNode: cc.Node, onSuccess: Function, onFail: Function): void;\n        abstract LoginPlatform(loginCallback: PlatformLoginCallback, isAuthedUserInfo: boolean): void;\n        private m_UserId;\n        protected get uid(): string;\n        private _serverLoginHelper;\n        private UserDefaultServerLoginHelper;\n        LoginServer(platformLoginResult: PlatformLoginResult, loginCallback: ServerLoginCallback): void;\n        protected abstract OnLoginServerSuccess(): void;\n        protected abstract OnLoginServerFailed(): void;\n        private m_Dict;\n        protected Key2UserKey(uid: string, key: string): string;\n        protected DevKey2RealKey(devKey: string): string;\n        protected RealKey2DevKey(realKey: string): string;\n        private GetGameCenterBV;\n        ReportScoreWithDevKey(devKey: string, score: number): void;\n        protected abstract GetGameCenterCfg(): TGameCenterCfg;\n        protected abstract ReportScore(realKey: string, score: number): any;\n        GetGameCenterVal(devKey: string): number;\n        SetGameCenterVal(devKey: string, val: number): void;\n        private m_ToUploadGameTimeLS;\n        UploadGameTime(): void;\n        private m_GameTimeScheduler;\n        private readonly TIME_INC_INTERVAL;\n        private StartGameTimeScheduler;\n        private StopGameSimeScheduler;\n        private GameTimeTick;\n        abstract FiveStar(): void;\n        abstract IsSupportLeaderboard(): boolean;\n        abstract ShowDefaultLeaderboard(): void;\n        abstract IsSupportRateUsByOpenUrl(): boolean;\n        abstract RateUsByOpenUrl(): void;\n        abstract IsSupportContactUs(): boolean;\n        abstract ContactUs(): void;\n    }\n}\ndeclare namespace numas {\n    abstract class VibrateBase extends SDKBase implements IVibrate {\n        private _off;\n        get off(): BooleanBV;\n        Toggle(): boolean;\n        protected OnInit(cfg: TSDKCfg): void;\n        Default(): void;\n        abstract DefaultImpl(): void;\n    }\n}\ndeclare namespace numas {\n    class CfgUtil {\n        static k2v(kvs: TKV[], k: string): string;\n        static v2k(kvs: TKV[], v: string): string;\n    }\n}\ndeclare namespace numas {\n    type TKV = {\n        k: string;\n        v: string;\n        d: string;\n    };\n    type TGameCenterCfg = {\n        Ranks: TKV[];\n    };\n    type TPlatformCfg = {\n        AppId: string;\n        GameCenter: TGameCenterCfg;\n        kvs: TKV[];\n    };\n    type TSDKCfg = {\n        iOS: TPlatformCfg;\n        wx: TPlatformCfg;\n    };\n}\ndeclare namespace numas {\n    enum EInterstitial {\n        NOT_AVAILABLE = 0,\n        LOAD_ERROR = 1,\n        SHOW = 2,\n        SHOW_ERROR = 3,\n        CLICK = 4,\n        HIDE = 5\n    }\n    enum EInternalRewardedVideo {\n        NOT_AVAILABLE = 0,\n        SHOW_ERROR = 1,\n        SHOW = 2,\n        HIDE = 3,\n        REWARDED = 4\n    }\n    enum ERewardedVideo {\n        NOT_AVAILABLE = 0,\n        SHOW = 1,\n        HIDE = 2\n    }\n    type InterstitialCallback = (type: EInterstitial) => void;\n    type RewardedVideoCallback = (type: ERewardedVideo, isRewared: boolean) => void;\n    interface IAD {\n        RewardedVideoBV: BooleanBV;\n        RemoveAdsSecondsBV: NumberBV;\n        Init(cfg: TSDKCfg): void;\n        IsSupport(): boolean;\n        InitByScript(): void;\n        IsInitByScript(): boolean;\n        ShowBanner(isShow: boolean): void;\n        IsInterstitialAvailable(): boolean;\n        LoadInterstitial(): void;\n        LoadInterstitialIfNotAvalable(): void;\n        ShowInterstitialWithBlocker(callback: Function, blockerPrefabKey: string, blockDuration: number): void;\n        ShowInterstitial(callback: Function): any;\n        IsRewardedVideoAvailable(): boolean;\n        ShowRewardedVideo(callback: () => void): void;\n        ShowRewardedVideoEx(callback: RewardedVideoCallback): void;\n        RemoveAdsForSeconds(seconds: number): void;\n    }\n}\ndeclare namespace numas {\n    type PlatformLoginResult = {\n        success: boolean;\n        openid?: string;\n        error?: string;\n    };\n    type PlatformLoginCallback = (args: PlatformLoginResult) => void;\n    interface IUser {\n        Init(cfg: TSDKCfg): void;\n        GetGameCenterVal(devKey: string): number;\n        SetGameCenterVal(devKey: string, val: number): void;\n        IsAuthedUserInfo(): boolean;\n        AuthUserInfo(buttonNode: cc.Node, onSuccess: Function, onFail: Function): void;\n        LoginPlatform(loginCallback: PlatformLoginCallback, isAuthedUserInfo: boolean): void;\n        LoginServer(platformLoginResult: PlatformLoginResult, loginCallback: ServerLoginCallback): void;\n        UploadGameTime(): void;\n        FiveStar(): void;\n        IsSupportLeaderboard(): boolean;\n        ShowDefaultLeaderboard(): void;\n        IsSupportRateUsByOpenUrl(): boolean;\n        RateUsByOpenUrl(): void;\n        IsSupportContactUs(): boolean;\n        ContactUs(): void;\n    }\n}\ndeclare namespace numas {\n    interface IVibrate {\n        off: BooleanBV;\n        Init(cfg: TSDKCfg): void;\n        Toggle(): boolean;\n        Default(): void;\n    }\n}\ndeclare namespace numas {\n    class DefaultServerLoginHelper implements IServerLoginHelper {\n        Login(args: PlatformLoginResult, loginCallback: ServerLoginCallback): void;\n    }\n}\ndeclare namespace numas {\n    interface IServerLoginHelper {\n        Login(args: PlatformLoginResult, loginCallback: ServerLoginCallback): void;\n    }\n}\ndeclare namespace numas {\n    type ServerLoginResult = {\n        success: boolean;\n        uid?: string;\n        error?: string;\n    };\n    type ServerLoginCallback = (args: ServerLoginResult) => void;\n}\ndeclare namespace numas {\n    class AndroidIronSource extends ADBase implements IAD {\n        IsSupport(): boolean;\n        protected InitByScriptImpl(): void;\n        protected OnInit(): void;\n        protected ShowBannerImpl(isShow: boolean): void;\n        private DestroyBanner;\n        protected IsInterstitialAvailableImpl(): boolean;\n        protected LoadInterstitialImpl(): void;\n        protected ShowInterstitialImpl(handler: InterstitialCallback): void;\n        protected IsRewardedVideoAvailableImpl(): boolean;\n        protected ShowRewardedVideoImpl(callback: (type: EInternalRewardedVideo, isRewared: boolean) => void): void;\n    }\n}\ndeclare namespace numas {\n    class DefaultAD extends ADBase implements IAD {\n        private _i_RewardedVideoAvailable;\n        private __I_SetRewardedVideoAvailable;\n        IsSupport(): boolean;\n        protected OnInit(): void;\n        protected ShowBannerImpl(isShow: boolean): void;\n        protected IsInterstitialAvailableImpl(): boolean;\n        protected LoadInterstitialImpl(): void;\n        protected ShowInterstitialImpl(handler: InterstitialCallback): void;\n        protected IsRewardedVideoAvailableImpl(): boolean;\n        protected ShowRewardedVideoImpl(callback: (type: EInternalRewardedVideo, isRewared: boolean) => void): void;\n        protected InitByScriptImpl(): void;\n    }\n}\ndeclare namespace numas {\n    class DefaultPlatform extends PlatformBase {\n        protected GetUserClass(): any;\n        protected GetADClass(): any;\n        protected GetVibrateClass(): typeof DefaultVibrate;\n    }\n}\ndeclare namespace numas {\n    class DefaultUser extends UserBase implements IUser {\n        IsAuthedUserInfo(): boolean;\n        AuthUserInfo(buttonNode: cc.Node, onSuccess: Function, onFail: Function): void;\n        LoginPlatform(loginCallback: PlatformLoginCallback, isAuthedUserInfo: boolean): void;\n        ReportScore(realKey: string, score: number): void;\n        protected GetGameCenterCfg(): TGameCenterCfg;\n        protected OnLoginServerSuccess(): void;\n        protected OnLoginServerFailed(): void;\n        FiveStar(): void;\n        IsSupportLeaderboard(): boolean;\n        ShowDefaultLeaderboard(): void;\n        IsSupportRateUsByOpenUrl(): boolean;\n        RateUsByOpenUrl(): void;\n        IsSupportContactUs(): boolean;\n        ContactUs(): void;\n    }\n}\ndeclare namespace numas {\n    class DefaultVibrate extends VibrateBase implements IVibrate {\n        DefaultImpl(): void;\n    }\n}\ndeclare namespace numas {\n    class WeChatAD extends ADBase implements IAD {\n        IsSupport(): boolean;\n        protected InitByScriptImpl(): void;\n        protected OnInit(cfg: TSDKCfg): void;\n        protected ShowBannerImpl(isShow: boolean): void;\n        protected IsInterstitialAvailableImpl(): boolean;\n        protected LoadInterstitialImpl(): void;\n        protected ShowInterstitialImpl(handler: InterstitialCallback): void;\n        protected IsRewardedVideoAvailableImpl(): boolean;\n        protected ShowRewardedVideoImpl(callback: (type: EInternalRewardedVideo, isRewared: boolean) => void): void;\n    }\n}\ndeclare namespace numas {\n    enum WeChatAuthScope {\n        userInfo = 0,\n        writePhotosAlbum = 1\n    }\n    class WeChatAuthUtil {\n        static IsAuthed(typ: WeChatAuthScope): boolean;\n        static AuthUserInfo(posNode: cc.Node, onSuccess: Function, onFail: Function): void;\n        private static GetSetting;\n        private static __IsAuth;\n        private static __AuthUserInfo;\n        private static convertToWxPos;\n    }\n}\ndeclare namespace numas {\n    class WeChatPlatform extends PlatformBase {\n        protected GetUserClass(): any;\n        protected GetADClass(): any;\n        protected GetVibrateClass(): typeof WeChatVibrate;\n    }\n}\ndeclare namespace numas {\n    class WeChatUser extends UserBase implements IUser {\n        IsAuthedUserInfo(): boolean;\n        AuthUserInfo(buttonNode: cc.Node, onSuccess: Function, onFail: Function): void;\n        LoginPlatform(loginCallback: PlatformLoginCallback, isAuthedUserInfo: boolean): void;\n        private __GetUserInfo;\n        protected OnLoginServerSuccess(): void;\n        protected OnLoginServerFailed(): void;\n        protected GetGameCenterCfg(): TGameCenterCfg;\n        protected ReportScore(realKey: string, score: number): void;\n        FiveStar(): void;\n        IsSupportLeaderboard(): boolean;\n        ShowDefaultLeaderboard(): void;\n        IsSupportRateUsByOpenUrl(): boolean;\n        RateUsByOpenUrl(): void;\n        IsSupportContactUs(): boolean;\n        ContactUs(): void;\n    }\n}\ndeclare namespace numas {\n    class WeChatVibrate extends VibrateBase implements IVibrate {\n        DefaultImpl(): void;\n        private vibrateShort;\n        private vibrateLong;\n    }\n}\ndeclare namespace numas {\n    class iOSATT {\n        private static _ins;\n        static get ins(): iOSATT;\n        Init(cfg: TSDKCfg): void;\n        private iOSCallbackHandler;\n        private HandleRequestTrackingAuthorizationResult;\n        private m_RequestIDFACallback;\n        RequestTrackingAuthorization(callback: (auth: boolean) => void, requestAuth: boolean): void;\n    }\n}\ndeclare namespace numas {\n    class iOSGameCenter {\n        private static _ins;\n        static get ins(): iOSGameCenter;\n        Init(cfg: TSDKCfg): void;\n        private m_LoginCallback;\n        private InvokeLoginCallback;\n        Login(loginCallback: PlatformLoginCallback): void;\n        private iOSCallbackHandler;\n        private HandleLogin;\n        private m_sync_uid;\n        private HandleRequestLocalPlayerScore;\n        private m_SyncHandler;\n        SyncGameCenter(uid: string, gameCenterCfg: TGameCenterCfg, handler: (reakKey: string, score: number) => void): void;\n        private GetIsSynced;\n        private SetIsSynced;\n        private LoginGameCenter;\n        private GetUserId;\n        private IsAuthenticated;\n        ReportScore(leaderboardIdentifier: string, score: number): void;\n        ReportAchievement(achievementIdentifier: string, percentComplete: number): void;\n        FiveStar(): void;\n        ShowDefaultLeaderboard(): void;\n        ShowLeaderboards(leaderboardIdentifier: string, timeScope: number): void;\n        ShowAchievement(): void;\n        RateUsByOpenUrl(app_id: string): void;\n        RateUsWithinApp(app_id: string): void;\n        RequestLocalPlayScore(leaderboardIdentifier: string): void;\n    }\n}\ndeclare namespace numas {\n    class iOSIronSourceAD extends ADBase implements IAD {\n        IsSupport(): boolean;\n        private _init_by_script;\n        protected InitByScriptImpl(): void;\n        protected OnInit(): void;\n        protected ShowBannerImpl(isShow: boolean): void;\n        private DestroyBanner;\n        protected IsInterstitialAvailableImpl(): boolean;\n        protected LoadInterstitialImpl(): void;\n        protected ShowInterstitialImpl(handler: InterstitialCallback): void;\n        protected IsRewardedVideoAvailableImpl(): boolean;\n        protected ShowRewardedVideoImpl(callback: (type: EInternalRewardedVideo, isRewared: boolean) => void): void;\n        onDestroy(): void;\n        private m_ShowInterstitialCallback;\n        private m_ShowRewardedVideoCallback;\n        private ShowInterstitialCallback;\n        private ShowRewardedVideoCallback;\n        protected iOSCallbackHandler(jsonData: {\n            type: string;\n            event: string;\n            rewarded?: boolean;\n        }): void;\n        private HandleBanner;\n        private HandleInterstitial;\n        private HandleRewardedVideo;\n    }\n}\ndeclare namespace numas {\n    class iOSMsgBridge extends cc.EventTarget {\n        private static _ins;\n        static get ins(): iOSMsgBridge;\n        private EmitiOSEvent;\n    }\n}\ndeclare namespace numas {\n    class iOSPlatform extends PlatformBase {\n        protected GetUserClass(): any;\n        protected GetADClass(): any;\n        protected GetVibrateClass(): typeof iOSVibrate;\n        Init(cfg: TSDKCfg): iOSPlatform;\n    }\n}\ndeclare namespace numas {\n    class iOSUser extends UserBase implements IUser {\n        protected OnInit(cfg: TSDKCfg): void;\n        IsAuthedUserInfo(): boolean;\n        AuthUserInfo(buttonNode: cc.Node, onSuccess: Function, onFail: Function): void;\n        LoginPlatform(loginCallback: PlatformLoginCallback, isAuthedUserInfo: boolean): void;\n        protected OnLoginServerSuccess(): void;\n        protected OnLoginServerFailed(): void;\n        protected GetGameCenterCfg(): TGameCenterCfg;\n        protected ReportScore(realKey: string, score: number): void;\n        FiveStar(): void;\n        IsSupportLeaderboard(): boolean;\n        ShowDefaultLeaderboard(): void;\n        IsSupportRateUsByOpenUrl(): boolean;\n        RateUsByOpenUrl(): void;\n        IsSupportContactUs(): boolean;\n        ContactUs(): void;\n        private openSystemMailApp;\n    }\n}\ndeclare namespace numas {\n    class iOSVibrate extends VibrateBase implements IVibrate {\n        DefaultImpl(): void;\n        private vibrateNormal;\n        private vibratePeek;\n        private vibratePop;\n        private vibrateContinue;\n        private __bridgeVibrate;\n        private tap_notification;\n        private tap_selection;\n        private tap_impact;\n        private isSupportTapEngine;\n    }\n}\ndeclare namespace numas {\n    abstract class RandBase {\n        private kMultiplier;\n        private kModer;\n        private kConstant;\n        private kOriginRandomSeed;\n        private kRandomSeed;\n        private bIsDebug;\n        private kRandomCount;\n        constructor(kMultiplier: number, kModer: number, kConstant: number, randomSeed: number, debug?: boolean);\n        get seed(): number;\n        random(): number;\n        range(inclusiveMin: number, exclusiveMax: number): number;\n    }\n    export class MCGRand extends RandBase {\n        constructor(randomSeed: number, debug?: boolean);\n        private static _ins;\n        static get ins(): MCGRand;\n    }\n    export class rand {\n        static IntBetween(inclusiveMin: number, exclusiveMax: number): number;\n    }\n    export {};\n}\ndeclare namespace numas {\n    abstract class BaseBlockInputUIPanel extends UIPanel {\n        protected OnCreate(): void;\n        protected OnRelease(): void;\n        protected OnOpen(): void;\n        protected abstract OnActiveChanged(active: boolean): void;\n    }\n}\ndeclare namespace numas {\n    abstract class BaseLoadingUIPanel extends UIPanel {\n        protected OnCreate(): void;\n        protected OnRelease(): void;\n        protected OnOpen(): void;\n        private __OnLoading;\n        protected abstract OnLoading(finishCount: number, totalCount: number): void;\n        protected abstract OnActiveChanged(active: boolean): void;\n    }\n}\ndeclare namespace numas {\n    type MsgUIPanelArgs = {\n        msg: string[];\n    };\n    abstract class BaseMsgUIPanel extends UIPanel<MsgUIPanelArgs> {\n        protected abstract get ActionNode(): cc.Node;\n        protected abstract get MsgLabel(): cc.Label;\n        protected OnCreate(): void;\n        protected OnRelease(): void;\n        protected OnOpen(uiArgs: MsgUIPanelArgs): void;\n    }\n}\ndeclare namespace numas {\n    abstract class BaseWaitingUIPanel extends UIPanel {\n        protected OnCreate(): void;\n        protected OnRelease(): void;\n        protected OnOpen(): void;\n        protected abstract OnActiveChanged(active: boolean): void;\n    }\n}\ndeclare namespace numas {\n    function dirty(seconds: number): <T extends DataCache>(target: T, methodName: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n    abstract class DataCache extends BaseComp {\n        protected abstract OnRegister(): any;\n        protected abstract OnUnRegister(): any;\n        protected abstract OnDirty(): any;\n        private _i_Name;\n        get DataCacheName(): string;\n        set DataCacheName(dataCacheName: string);\n        private _i_Dirty;\n        private _i_DirtySeconds;\n        private _i_MaxSecondsToSave;\n        private __i_Tick;\n        private __i_StopTick;\n        protected __i_OnPreRegister(): void;\n        __i_OnRegisterTo(): void;\n        __i_OnUnRegister(): void;\n        protected markDirty(maxSecondsToSave: number): void;\n    }\n    abstract class LSDataCache<DATA extends {} = any> extends DataCache {\n        protected abstract get LSKey(): string;\n        private _lsData;\n        protected get data(): DATA;\n        protected abstract get DefaultLSData(): DATA;\n        protected Save(): void;\n        protected OnDirty(): void;\n        __i_OnPreRegister(): void;\n    }\n    abstract class Logic {\n        protected static GetDataCache<T>(dataCacheName: any): T;\n        protected static emitGlobal(key: string, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any): void;\n    }\n    abstract class Entity extends cc.EventTarget implements IReference {\n        abstract Reset(): any;\n        Return(): void;\n        ReturnBy<SELF extends Entity>(target: IAutoReturn): SELF;\n        AutoReturn<T extends IReference>(bv: T): T;\n        private _i_AutoQueue;\n        private get _I_AutoReleaseItemQueue();\n        private Destroy_AutoRelease;\n        private _m_BVList_;\n        protected BindBV<T>(observer: BV<T>, callback: ValueChangedFunc<T>, callOnBinded: boolean): void;\n        protected UnbindAllBV(): void;\n    }\n}\ndeclare namespace numas {\n    class ResKey2BundleName {\n        private static _ins;\n        static get ins(): ResKey2BundleName;\n        private _m;\n        GetBundleName(resKey: string): string;\n        SetBundleName(resKey: string, bundleName: string): void;\n        HasBundleName(resKey: string): boolean;\n    }\n}\ndeclare namespace numas {\n    class ResKey2ResType {\n        private static _ins;\n        static get ins(): ResKey2ResType;\n        private _m;\n        GetResType(resKey: string): EResType;\n        SetResType(resKey: string, resType: EResType): void;\n        HasResType(resKey: string): boolean;\n    }\n}\ndeclare namespace numas {\n    enum EResType {\n        Asset = 0,\n        Audio = 1,\n        Json = 2,\n        Prefab = 3,\n        Stage = 4,\n        SpriteFrame = 5,\n        Anim = 6,\n        Spine = 7,\n        LangJson = 8,\n        AutoAtlas = 9\n    }\n    function registerRes(resKey: string, bundleName: string, resType: EResType): void;\n    function registerResDict(dict: StringKeyDict<string>, bundleName: string, resType: EResType): void;\n    function resDict2ResKeyList(cfg: StringKeyDict<string>): string[];\n    type TPrefabCfg = {\n        panel: StringKeyDict<{\n            key: string;\n            z: UIZIndex;\n        }>;\n        comp: StringKeyDict<{\n            key: string;\n        }>;\n    };\n    function registerPrefabCfg(pfbCfg: TPrefabCfg, bundleName: string): void;\n    function prefabCfg2ResKeyList(cfg: StringKeyDict<{\n        key: string;\n    }>): string[];\n    function registerLangJsonCfg(langJsonCfg: StringKeyDict<string>, bundleName: string): void;\n    enum EItemType {\n        ResKey = 0,\n        DataCache = 1,\n        IReference = 2\n    }\n    class AutoReleaseItem implements IReference {\n        resKey: any;\n        resTyp: EItemType;\n        static Borrow(key: any, typ: EItemType): AutoReleaseItem;\n        Reset(): void;\n        Return(): void;\n    }\n    class ResMgr extends cc.Component {\n        static ins: ResMgr;\n        onLoad(): void;\n        private _i_AssetCache;\n        AddResRef(resKey: string): void;\n        DecResRef(resKey: string): void;\n        GetRes<T extends cc.Asset>(resKey: string): T;\n        HasRes(resKey: string): boolean;\n        SetRes<T extends cc.Asset>(resKey: any, asset: T): void;\n        HasRegister(resKey: string): boolean;\n        GetOrLoadBundle(bundleName: string, resolve: (bundle: cc.AssetManager.Bundle) => void): void;\n        private __Load;\n        Load<T extends cc.Asset>(resKey: string, cb: (asset: T, resKey: string) => void): void;\n        LoadWithEvent<T extends cc.Asset>(event: string, resKey: string): void;\n        LoadWithEventByGroup<T extends cc.Asset>(event: string, resKey: string, group: string): void;\n        private LoadByGroup;\n        private __i_TryToLoadNextGroupItem;\n        private _i_LoadingGroupCache;\n        private AddLoadingGroup;\n        private HasLoadingGroup;\n        private GetLoadingGroup;\n        private DecLoadingGroup;\n        private _i_DataCacheCache;\n        GetDataCache<T extends DataCache>(dataCacheName: string): T;\n        AddDataCache<T extends DataCache>(dataCacheName: string, type: {\n            new (): T;\n        }): void;\n        hasDataCache(dataCacheName: string): boolean;\n        DecDataCache(dataCacheName: string): void;\n        private _i_NextFrameToReleaseResQueue;\n        private _i_Next2FrameToReleaseResQueue;\n        private _i_TickScheduler;\n        DestroyAutoReleaseItems(autoReleaseItemQueue: Queue<AutoReleaseItem>): void;\n        GC(): void;\n        private __i_StopTickSchedule;\n        private __i_Tick;\n        private m_bLoadingGame;\n        private m_Current;\n        LoadStage(gameBundleName: string, stageName: string, args?: any, onUICompleted?: Function): void;\n        LoadBundleStage(gameBundleName: string, args?: any, onUICompleted?: Function): void;\n        Debug(): void;\n    }\n}\ndeclare namespace numas {\n    abstract class UIComp<T> extends BaseUIComp implements IAutoCloseUIComp<T> {\n        protected args: T;\n        private _$isOpened_;\n        private _$isOpening_;\n        private _i_Close;\n        $__internal_Create(): void;\n        Close(): void;\n        $__internal_OnOpen(uiArgs: T): void;\n        protected abstract OnCreate(): void;\n        protected abstract OnRelease(): void;\n        protected abstract OnOpen(uiArgs: any): void;\n        private _m_BVList_;\n        protected BindBV<T>(observer: BV<T>, callback: ValueChangedFunc<T>, callOnBinded: boolean): void;\n        protected UnbindAllBV(): void;\n        CloseBy<SELF extends UIComp<T>>(target: IAutoCloseUIComp<any>): SELF;\n        __i_AutoCloseUIComp<T extends UIComp<any>>(uiComp: T): T;\n        private _i_UICompQueue;\n        private get _I_AutoCloseUICompQueue();\n        private __i_CloseAllAutoCloseUIComp;\n        protected onDestroy(): void;\n        private _im_StopCallLinkedList;\n        private get _I_StopCallLinkedList();\n        AddStopActionCall(stopCallback: (self: any) => void): void;\n        RemoveStopCall(call: any): void;\n        StopAllAction(): void;\n        private InterrupteAction;\n    }\n}\ndeclare namespace numas {\n    function registerUIStage(prefabKey: string, bundleName: string): void;\n    function registerUIPanel(prefabKey: string, zIndex: UIZIndex, bundleName: string): void;\n    function registerUIComp(resKey: string, bundleName: string): void;\n    class UIMgr extends cc.Component {\n        static ins: UIMgr;\n        private _zs;\n        private _phs;\n        onLoad(): void;\n        onDestroy(): void;\n        LoadStage(gameBundleName: string, stageName: string, args?: any, onUICompleted?: Function): void;\n        LoadBundleStage(gameBundleName: string, args?: any, onUICompleted?: Function): void;\n        Create<T extends UIComp<TARG>, TARG = any>(prefabKey: string, args?: TARG, parent?: cc.Node): T;\n        Exist(prefabKey: string): boolean;\n        Open<ARGS = any>(prefabKey: string, args?: ARGS, afterOnOpen?: Resolve<any> | Function): void;\n        private __Open;\n        Close(uiPanel: UIPanel): any;\n        Close(prefabKey: string, isAll: boolean): any;\n        private readonly waiting_ref;\n        readonly waiting: BooleanBV;\n        AddWaitingRef(): void;\n        DecWaitingRef(): void;\n        private readonly block_ref;\n        AddBlockRef(): void;\n        DecBlockRef(): void;\n        readonly block: BooleanBV;\n        blockSeconds(seconds: number, cb: Function): void;\n        OpenDialog1(msg: string, btnFunc0?: Function, label0?: string, title?: string): void;\n        OpenDialog2(msg: string, btnFunc0Cancel?: Function, btnFunc1Sure?: Function, label0?: string, label1?: string, title?: string): void;\n        OpenDialog3(msg: string, btnFunc0?: Function, btnFunc1?: Function, btnFunc2?: Function, label0?: string, label1?: string, label2?: string, title?: string): void;\n        ShowMsg(...msg: string[]): void;\n        Debug(): void;\n    }\n}\ndeclare namespace numas {\n    class UIPH extends cc.Component {\n        static Borrow(): UIPH;\n        private _prefabKey;\n        private _args;\n        private _uiPanel;\n        private _isLoading;\n        private _isCloseAfterLoading;\n        IsSameResKey(prefabKey: string): boolean;\n        GetResKey(): string;\n        OpenUI<ARGS>(zNode: cc.Node, prefabKey: string, args?: ARGS, cb?: Function | Resolve2<any, any>): void;\n        CloseUI(): void;\n        private __CloseUI;\n    }\n}\ndeclare namespace numas {\n    abstract class UIStage extends UIPanel {\n        protected OnCreate(): void;\n        protected OnRelease(): void;\n        protected OnOpen(uiArgs: any): void;\n        __i_Init(onUICompleted: Function, args?: any): void;\n        private m_Initialized;\n        protected abstract OnInit(onUICompleted: Function, args?: any): void;\n        protected abstract GetDefaultEffectAudioKey(): string;\n    }\n}\ndeclare namespace numas {\n    class UIUtil {\n        static getOrAddComponent<T extends cc.Component>(node: cc.Node, typ: {\n            new (): T;\n        }): T;\n        static transferTo(node: cc.Node, targetParent: cc.Node, cleanup?: boolean): void;\n        static positionInTarget(node: cc.Node, targetParent: cc.Node): cc.Vec3;\n        static fadeInBackgroundAction(bg: cc.Node, opacity?: number, duration?: number): void;\n        static fadeOutBackgroundAction(bg: cc.Node, cb?: Function, opacity?: number, duration?: number, delay?: number): void;\n        static scaleAction(node: cc.Node, scale: number): void;\n        static moveAction(node: cc.Node, isShow: boolean, hidePosition: cc.Vec3, duration?: number, cb?: Function, delay?: number, easing?: (t: number) => number): void;\n        static hideAction(node: cc.Node, duration: number, to: {\n            scale?: number;\n            opacity?: number;\n            easing?: string;\n        }, cb?: Function, delay?: number, block?: boolean): void;\n        static showAction(node: cc.Node, duration: number, to: {\n            scale?: number;\n            opacity?: number;\n            easing?: string;\n        }, cb?: Function, delay?: number, block?: boolean): void;\n        private static BaseAction;\n    }\n}\ndeclare namespace numas {\n    type TweenProgressFunc<T> = (start: T, end: T, current: T, t: number) => T;\n    type TweenProgress<T> = {\n        progress: TweenProgressFunc<T>;\n    };\n    abstract class TweenUtil {\n        static readonly LinearProgress: TweenProgress<number>;\n        static readonly LinearFloorIntegerProgress: TweenProgress<number>;\n        static readonly LinearCeilIntegerProgress: TweenProgress<number>;\n        static readonly LinearRoundIntegerProgress: TweenProgress<number>;\n        static IntegerTo(duration: number, start: number, end: number, handler: ValueChangedFunc<number>, callOnBind: boolean): void;\n        static CeilIntegerTo(duration: number, start: number, end: number, handler: ValueChangedFunc<number>, callOnBind: boolean): void;\n        static RoundIntegerTo(duration: number, start: number, end: number, handler: ValueChangedFunc<number>, callOnBind: boolean): void;\n        private static __IntegerTo;\n    }\n}\nimport ii = numas;"
}