{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Statistics\\UIStatisticsPage.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { SolitaireLogic } from \"../Logic/SolitaireLogic\";\nimport UIStatisticsCircleProgress from \"./UIStatisticsCircleProgress\";\n\nexport type UIStatisticsPageArgs = {\n    vegas: boolean,\n    card3: boolean,\n    width: number\n}\n\nconst {ccclass, property} = cc._decorator;\n@ccclass\nexport default class UIStatisticsPage extends ii.UIComp<UIStatisticsPageArgs> {\n    @property(cc.Label) private titleLabel: cc.Label = null;\n    @property(cc.Label) private highScoreLabel: cc.Label = null \n    @property(cc.Label) private bestTimeLabel: cc.Label = null \n    @property(cc.Label) private averageGameTimeLabel: cc.Label = null \n    @property(cc.Label) private averageMovesLabel: cc.Label = null \n    @property(cc.Label) private lowestMovesLabel: cc.Label = null \n    @property(cc.Label) private highestMovesLabel: cc.Label = null \n    @property(UIStatisticsCircleProgress) private wonProgress: UIStatisticsCircleProgress = null \n    protected OnCreate(): void { }\n    protected OnRelease(): void { }\n    protected OnOpen(uiArgs: any): void {\n        this.node.width = this.args.width;\n        this.Refresh()\n    }\n    private Refresh() {\n        let history = this.modeHistory.v;\n        // UI 刷新\n        this.titleLabel.string = this.GetTitleString(this.args.vegas, this.args.card3);\n        this.highScoreLabel.string = `${history.scoreBest}`\n        this.wonProgress.Init(history.passCount, history.passCount + history.loseCount)\n        this.bestTimeLabel.string = `${history.gameTimeBest}`\n        this.averageGameTimeLabel.string = `${history.gameTimeAverage}`\n        this.averageMovesLabel.string = `${history.moveStepAverage}`\n        this.lowestMovesLabel.string = `${history.moveStepBest}`\n        this.highestMovesLabel.string = `${history.moveStepWorest}`\n    }\n\n    private GetTitleString(vegas: boolean, card3: boolean): string {\n        return `${vegas ? \"Vegas\" : \"Normal\"}-${card3 ? \"3Cards\" : \"1Card\"}`;\n    }\n\n    Reset() {\n        ii.UIMgr.ins.OpenDialog2(`Reset ${this.args.vegas ? 'Vegas': 'Normal'}-${this.args.card3 ? 'Card3': 'Card1'} history ?`, null, ()=>this.resetHistory());\n    }\n\n    private get index(): number { return (this.args.vegas ? 1 : 0)*2 + (this.args.card3 ? 1 : 0); }\n    private get modeHistory() { return SolitaireLogic.dataCache.GetModeHistory(this.args.vegas, this.args.card3); }\n    private resetHistory() {\n        SolitaireLogic.dataCache.ResetModeHistory(this.args.vegas, this.args.card3);\n        this.Refresh()\n    }\n}"]}