{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Themes\\SolitaireThemesEffectColumnUI.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { SolitaireSkin } from \"../DataCache/SolitaireSkinDataCache\";\nimport SolitaireGameDesktopUI from \"../Game/View/SolitaireGameDesktopUI\";\nimport SolitairePokerDisplayUI, { SolitairePokerDisplayUIArgs } from \"../Game/View/SolitairePokerDisplayUI\";\nimport { EPokerStatus, ESuit } from \"../SolitaireEnums\";\nimport { SolitairePrefabCfg } from \"../SolitairePrefabCfg\";\n\nconst {ccclass, property} = cc._decorator;\n\ntype PokerUICfg = {suit: ESuit, point: number, status: EPokerStatus}\n\nexport type SolitaireThemesEffectColumnUIArgs = {\n    x: number,\n    receive: PokerUICfg[],\n    play: PokerUICfg[]\n}\n\n@ccclass\nexport default class SolitaireThemesEffectColumnUI extends ii.UIComp<SolitaireThemesEffectColumnUIArgs> {\n    @property(cc.Node) public receiveRoot: cc.Node = null \n    @property(cc.Node) public playRoot: cc.Node = null \n\n    private m_DisplayPokerUI: SolitairePokerDisplayUI[] = []\n    protected OnCreate(): void { }\n    protected OnRelease(): void { }\n    protected OnOpen(uiArgs: SolitaireThemesEffectColumnUIArgs): void {\n        this.node.x = this.args.x;\n        this.args.receive.forEach((it, i)=>{\n            this.m_DisplayPokerUI.push(ii.UIMgr.ins.Create<SolitairePokerDisplayUI, SolitairePokerDisplayUIArgs>(SolitairePrefabCfg.pfb.comp.SolitairePokerDisplayUI.key, {\n                point: it.point,\n                suit: it.suit,\n                backSkin: { kind: \"classic\",index:0 },\n                frontSkin: 0,\n                status: it.status,\n                faceSkin: 0\n            }, this.receiveRoot).CloseBy(this));\n        });\n\n        this.args.play.forEach((it, i)=>{\n            this.m_DisplayPokerUI.push(ii.UIMgr.ins.Create<SolitairePokerDisplayUI, SolitairePokerDisplayUIArgs>(SolitairePrefabCfg.pfb.comp.SolitairePokerDisplayUI.key, {\n                point: it.point,\n                suit: it.suit,\n                backSkin: { kind: \"classic\",index:0 },\n                frontSkin: 0,\n                status: it.status,\n                faceSkin: 0\n            }, this.playRoot).CloseBy(this).PositionTo(0, this.__GetPaddingYWith(this.args.play, it, i)));\n        });\n    }\n\n    private __GetPaddingYWith(play: PokerUICfg[], it: PokerUICfg, index: number): number {\n        let dy = 0;\n        for(let i=0; i<index; ++i) {\n            dy -= (play[i].status == EPokerStatus.CLOSE ? SolitaireGameDesktopUI.PLAY_CLOSE_POKER_PADDING_Y : SolitaireGameDesktopUI.PLAY_OPEN_POKER_PADDING_Y)\n        }\n        return dy;\n    }\n\n    SetSkin(skin: SolitaireSkin) {\n        this.m_DisplayPokerUI.forEach(ui=>ui.setSkin(skin));\n    }\n}"]}