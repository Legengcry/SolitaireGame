{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Game\\Model\\SolitaireConfigGenerator.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { EGameType } from \"../../SolitaireEnums\";\nimport { SolitaireDataBattleResult } from \"../SolitaireType\";\nimport { SolitaireJu } from \"./SolitaireJu\";\n\nconst {ccclass, property} = cc._decorator;\n@ccclass\nexport default class SolitaireConfigGenerator extends cc.Component {\n    private m_ResultList: SolitaireDataBattleResult[] = []\n    private m_Scheduler: Function = null;\n    private m_Seed: number = 0;\n    private m_PreLength: number = 0;\n    private m_JudgeFunc: (gameResult: SolitaireDataBattleResult)=>boolean;\n    private m_GameType: EGameType = EGameType.EASY;\n    private m_IsVegasMode: boolean = false;\n    private m_IsCard3Mode: boolean = false;\n    start() {\n        this.Test_GenerateValidDungents(EGameType.EASY, true, true);\n    }\n\n\n    Test_GenerateValidDungents(gameType: EGameType,isVegasMode: boolean, isCard3Mode: boolean) {\n        this.m_GameType = gameType;\n        this.m_IsVegasMode = isVegasMode;\n        this.m_IsCard3Mode = isCard3Mode;\n        this.m_ResultList = [];\n        this.m_Seed = 1;\n        this.m_PreLength = 0;\n        this.m_JudgeFunc = this.GetDifficultFunc(gameType);\n        this.StartScheduler();\n    }\n\n    StartScheduler() {\n        if(this.m_Scheduler === null) {\n            this.m_Scheduler = this.Tick.bind(this);\n            this.schedule(this.m_Scheduler, 0, cc.macro.REPEAT_FOREVER);\n        }\n    }\n\n    StopScheduler() {\n        if(this.m_Scheduler !== null) {\n            this.unschedule(this.m_Scheduler);\n            this.m_Scheduler = null;\n        }\n    }\n\n    Tick() {\n        while(true) {\n            if(this.m_ResultList.length < 800) {\n                let gameResult: SolitaireDataBattleResult = SolitaireJu.ServerPlay(this.m_GameType, this.m_Seed, this.m_IsVegasMode, this.m_IsCard3Mode);\n                ++this.m_Seed;\n                if(gameResult.pass && this.m_JudgeFunc(gameResult)){\n                    this.m_ResultList.push(gameResult);\n                    let lengthOfList = this.m_ResultList.length;\n                    if(lengthOfList >= this.m_PreLength+100) {\n                        this.m_PreLength = lengthOfList;\n                        console.log(`[${lengthOfList}] is done`);\n                        return;\n                    }\n                }\n            }else{\n                this.StopScheduler();\n                this.Save();\n                return;\n            }\n        }\n    }\n\n    Save() {\n        let seeds = this.m_ResultList.sort((a, b)=>{\n            if(a.flipCloseCnt === b.flipCloseCnt) {\n                return a.step-b.step;\n            }else{\n                return a.flipCloseCnt-b.flipCloseCnt;\n            }\n        }).map(v=>v.seed);\n\n        if(!(cc.sys.isNative && cc.sys.os === cc.sys.OS_OSX)){\n            console.info(JSON.stringify(seeds));\n            return\n        }\n        const generateConfigDir = `${jsb.fileUtils.getWritablePath()}Auto/JSON/`\n        if(!jsb.fileUtils.isDirectoryExist(generateConfigDir)) {\n            jsb.fileUtils.createDirectory(generateConfigDir)\n        }\n        const jsonFileFullPath = `${generateConfigDir}level_${this.m_GameType}_${this.m_IsVegasMode ? 1 : 0}_${this.m_IsCard3Mode ? 1 : 0}.json`\n        jsb.fileUtils.writeStringToFile(JSON.stringify(seeds), jsonFileFullPath);\n        console.info(`done >> write to ${jsonFileFullPath}`);\n    }\n\n    private GetDifficultFunc(gameType: EGameType): (gameType: SolitaireDataBattleResult) => boolean {\n        switch (gameType) {\n            case EGameType.EASY: return this.IsDifficultEasy.bind(this);        \n            case EGameType.HARD: return this.IsDifficultHard.bind(this);        \n            default: break;\n        }\n    }\n    private IsDifficultEasy(gameResult: SolitaireDataBattleResult): boolean { return gameResult.flipCloseCnt <= 3; }\n    private IsDifficultHard(gameResult: SolitaireDataBattleResult): boolean { return gameResult.flipCloseCnt > 3; }\n}"]}