{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Game\\SolitaireType.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Poker, { SnapPoker } from \"./Model/Poker\";\nimport { EPokerStatus, EGameType } from \"../SolitaireEnums\";\n\nexport enum EActionType {\n    CLICK = 0,\n    DRAG = 1,\n    UNDO = 2,\n}\n\n// Undo 描述的是发生的事件\nexport enum ETUndoCmd {\n    PLAY_TO_PLAY = 0,\n    PLAY_TO_RECEIVE,\n    OPEN_TO_RECEIVE,\n    OPEN_TO_PLAY,\n    CLOSE_TO_OPEN,\n    CLOSES_TO_OPEN,\n    OPEN_TO_CLOSE,\n    RECEIVE_TO_PLAY,\n    RECEIVE_TO_RECEIVE,\n}\n\nexport enum EChangeType {\n    MOVE = 0,\n    FLIP = 1,\n}\n\nexport type CmdChange = {\n    typ: EChangeType,\n    poker?: Poker,\n    pokers?: Poker[],\n    fromIndex?: number,\n    toIndex?: number,\n    status?: EPokerStatus\n}\n\nexport type SnapCmdChange = {\n    typ: EChangeType,\n    poker?: SnapPoker,\n    pokers?: SnapPoker[],\n    fromIndex?: number,\n    toIndex?: number,\n    status?: EPokerStatus\n}\n\nexport type SnapCmd = {\n    cmdType: ETUndoCmd\n    cmdChanges: SnapCmdChange[]\n}\n\nexport type SnapData = {\n    gameType?: EGameType,\n    resume: boolean,\n    vegas: boolean,\n    card3: boolean,\n    seed: number,\n    cmds?: SnapCmd[],\n    tick: number,\n    score?: number,\n    hinted: boolean,\n    helped: boolean,\n    player: boolean,\n    undo: boolean, /** 是否使用过 undo */\n}\n\n// 操作提示\nexport enum ETOperationHint {\n    PLAY_TO_PLAY = 0,\n    PLAY_TO_RECEIVE,\n    OPEN_TO_RECEIVE,\n    OPEN_TO_PLAY,\n    CLOSE_TO_OPEN,\n    OPEN_TO_CLOSE,\n    RECEIVE_TO_PLAY,\n}\n\nexport type OperationHint = {\n    type: ETOperationHint,\n    from?: number,\n    to?: number\n}\n\nexport type GameResult = {\n    seed: number,\n    pass: boolean,\n    step: number\n}\n\nexport class CmdStack {\n    private undoCmdStack: Cmd[] = []\n    private m_OnUndoStatusChangedCallback: (length: number) => void = null\n    constructor(onUndoStatusChanged: (length: number) => void){\n        this.m_OnUndoStatusChangedCallback = onUndoStatusChanged\n    }\n    get Length(): number { return this.undoCmdStack.length; }\n    pop(): Cmd {\n        let cmd = this.undoCmdStack.pop()\n        this.onStatusChanged()\n        return cmd\n    }\n    push(cmd: Cmd) {\n        this.undoCmdStack.push(cmd)\n        this.onStatusChanged()\n    }\n    \n    private onStatusChanged() {\n        this.m_OnUndoStatusChangedCallback(this.undoCmdStack.length);\n    }\n\n    Snap(): SnapCmd[] {\n        return this.undoCmdStack.map(cmd => cmd.Snap())\n    }\n}\n\nexport class Cmd {\n    cmdType: ETUndoCmd = undefined\n    cmdChanges: CmdChange[] = undefined\n    constructor(cmdType: ETUndoCmd, cmdChanges: CmdChange[]){\n        this.cmdType = cmdType\n        this.cmdChanges = cmdChanges\n    }\n    AddChange(change: CmdChange): Cmd {\n        this.cmdChanges.push(change)\n        return this\n    }\n    Snap(): SnapCmd {\n        return {\n            cmdType: this.cmdType,\n            cmdChanges: this.cmdChanges.map(change => { return {\n                typ: change.typ,\n                poker: change.poker == null ? null : change.poker.Snap(),\n                pokers: change.pokers == null ? null : change.pokers.map(p => p.Snap()),\n                fromIndex: change.fromIndex,\n                toIndex: change.toIndex,\n                status: change.status\n            }})\n        }\n    }\n}\n\nexport type SolitaireDataBattleResult = {\n    seed: number,\n    pass: boolean,\n    step: number,\n    flipCloseCnt: number\n}"]}