{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\DataCache\\SolitaireAutoPlayerDataCache.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAMA;IAAkD,gDAAoD;IAAtG;QAAA,qEA4CC;QA7BG,QAAQ;QACR;;;;;;;;;WASG;QACH,YAAY;QACK,0BAAoB,GAAW,IAAI,CAAA;QAC3C,0BAAoB,GAAW,IAAI,CAAA;QAC5C,iBAAW,GAAgB,IAAI,CAAC;QAEvB,cAAQ,GAAW,CAAC,CAAC;;IAalC,CAAC;IA3CG,sBAAc,+CAAK;aAAnB,cAAgC,OAAO,yBAAyB,CAAC,CAAC,CAAC;;;OAAA;IACnE,sBAAc,uDAAa;aAA3B;YACI,OAAO;gBACH,SAAS,EAAE,CAAC;aACf,CAAA;QACL,CAAC;;;OAAA;IACS,iDAAU,GAApB;QAAA,iBAKC;QAJG,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;YAC9E,KAAI,CAAC,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;YAC1B,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACtB,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACpB,CAAC;IACS,mDAAY,GAAtB,cAA2B,CAAC;IAiB5B,sBAAI,0DAAgB;aAApB,cAAiC,OAAO,IAAI,CAAC,oBAAoB,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC;;;OAAA;IAEvG,8CAAO,GAAP,UAAQ,EAAe;QACnB,IAAG,IAAI,CAAC,UAAU,EAAE,EAAC;YAAE,OAAM;SAAE;QAC/B,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAA;QACvB,EAAE,CAAC,sBAAsB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACrD,CAAC;IACD,gDAAS,GAAT,UAAU,EAAe;QACrB,IAAG,IAAI,CAAC,UAAU,EAAE,EAAC;YAAE,OAAM;SAAE;QAC/B,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAA;QACvB,EAAE,CAAC,sBAAsB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACrD,CAAC;IACD,iDAAU,GAAV,cAAwB,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAC,kBAAkB;IACxF,iDAAU,GAAV,cAAwB,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,kBAAkB;IAChF,mCAAC;AAAD,CA5CA,AA4CC,CA5CiD,EAAE,CAAC,WAAW,GA4C/D;AA5CY,oEAA4B","file":"","sourceRoot":"/","sourcesContent":["import { SolitaireJu } from \"../Game/Model/SolitaireJu\";\n\ntype SolitaireAutoPlayerDataCacheDataType = {\n    autoSpeed: number\n}\n\nexport class SolitaireAutoPlayerDataCache extends ii.LSDataCache<SolitaireAutoPlayerDataCacheDataType> {\n    protected get LSKey(): string { return \"ls_solitaire_autoplayer\"; }\n    protected get DefaultLSData(): SolitaireAutoPlayerDataCacheDataType {\n        return {\n            autoSpeed: 1,\n        }\n    }\n    protected OnRegister() {\n        this.autoSpeedBV = ii.NumberBV.Borrow(this.data.autoSpeed).ReturnBy(this).Bind(val=>{\n            this.data.autoSpeed = val;\n            this.markDirty(1);\n        }, false, this);\n    }\n    protected OnUnRegister() { }\n\n    //! 播放速度\n    /**\n     * 速度分为 5 档位 0 1 2 3 4\n     * 正常是 1 档\n     * 档位和速度：\n     * 0：2.4秒每步\n     * 1：1.2秒每步\n     * 2：0.6秒每步\n     * 3：0.3秒每步\n     * 4：0.15秒每步\n     */\n    // 自动玩牌的时间间隔\n    private readonly kAutoPlayMinInterval: number = 0.15\n    readonly kAutoCollectDuration: number = 0.15\n    autoSpeedBV: ii.NumberBV = null;\n    get AutoPlayInterval(): number { return this.kAutoPlayMinInterval*Math.pow(2, (4-this.autoSpeedBV.v)) }\n    readonly MaxSpeed: number = 4;\n    SpeedUp(ju: SolitaireJu) {\n        if(this.IsMaxSpeed()){ return }\n        this.autoSpeedBV.v += 1\n        ju.ChangeAutoPlayInterval(this.AutoPlayInterval);\n    }\n    SpeedDown(ju: SolitaireJu) {\n        if(this.IsMinSpeed()){ return }\n        this.autoSpeedBV.v -= 1\n        ju.ChangeAutoPlayInterval(this.AutoPlayInterval);\n    }\n    IsMaxSpeed(): boolean { return this.autoSpeedBV.v >= this.MaxSpeed; } /** 是否是自动玩牌最大速度 */\n    IsMinSpeed(): boolean { return this.autoSpeedBV.v <= 0; } /** 是否是自动玩牌最低速度 */\n}\n"]}