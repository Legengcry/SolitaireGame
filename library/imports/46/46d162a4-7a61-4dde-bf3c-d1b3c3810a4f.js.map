{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Menu\\SolitaireMenuUIPanel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { SolitaireGameUIPanelArgs } from \"../Game/View/SolitaireGameUIPanel\";\nimport { SolitaireLogic } from \"../Logic/SolitaireLogic\";\nimport { SolitaireAudioCfg } from \"../SolitaireAudioCfg\";\nimport { EGameType } from \"../SolitaireEnums\";\nimport { SolitairePrefabCfg } from \"../SolitairePrefabCfg\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass(\"MenuResumeItem\")\nclass MenuResumeItem {\n    @property({type:cc.Enum(EGameType),visible:true}) private _difficulty: EGameType = EGameType.EASY;\n    @property({type:cc.Node,visible:true}) private resumeNode: cc.Node = null; // 继续上次游戏的节点\n    @property({type:cc.Label,visible:true}) private _scoreLabel: cc.Label = null; // 分数\n    get ResumeNode(): cc.Node { return this.resumeNode; }\n    get ScoreLabel(): cc.Label { return this._scoreLabel; }\n    get Difficulty(): EGameType { return this._difficulty; }\n}\n\n@ccclass\nexport default class SolitaireMenuUIPanel extends ii.UIPanel {\n    @property({type:cc.Node,visible:true}) private _playActionNode: cc.Node = null; // 右侧难度列表动作节点\n    @property({type:cc.Node,visible:true}) private _toggleActionNode: cc.Node = null; // 左下角开关动作节点\n    @property({type:MenuResumeItem,visible:true}) private _resumeNodeList: MenuResumeItem[] = [];\n\n    protected OnCreate(): void {\n        //! 1. 入场动画 >> 记录初始位置，方便做入场动作\n        this.SetUserData(\"K_POS_PLAY\", this._playActionNode.position);\n        this.SetUserData(\"K_POS_TOGGLE\", this._toggleActionNode.position);\n    }\n    protected OnRelease(): void { }\n    protected OnOpen(uiArgs: any): void {\n        this.SetIIClickHandler(\"OnPlayEasy\", this.OnPlay.bind(this, EGameType.EASY), true)\n        this.SetIIClickHandler(\"OnPlayHard\", this.OnPlay.bind(this, EGameType.HARD), true)\n        this.SetIIClickHandler(\"OnOptions\", this.OnOptions.bind(this))\n\n        //! 入场动画\n        this.RunSwitchPlayUIAction(true, 0.4);\n    }\n    // 二级菜单切换动画\n    private RunSwitchPlayUIAction(isEnter: boolean, duration: number, callback?: Function) {\n        if (isEnter) {\n            ii.AudioMgr.ins.PlayEffect(SolitaireAudioCfg.effect.move);\n        }\n        ii.UIUtil.moveAction(this._playActionNode, isEnter, this.GetUserData<cc.Vec3>(\"K_POS_PLAY\"), duration);\n        ii.UIUtil.moveAction(this._toggleActionNode, isEnter, this.GetUserData<cc.Vec3>(\"K_POS_TOGGLE\"), duration, callback);\n    }\n\n    // 刷新上一次游戏类型标签\n    private UpdateResumeStatus() {\n        let vegasMode = SolitaireLogic.dataCache.vegasModeBV.v;\n        let cards3Mode = SolitaireLogic.dataCache.cards3ModeBV.v;\n        this._resumeNodeList.forEach(it=>{\n            let hasSnapData: boolean = SolitaireLogic.dataCache.HasSnapData(vegasMode, cards3Mode, it.Difficulty);\n            it.ResumeNode.active = hasSnapData;\n            if(hasSnapData) {\n                let snapData = SolitaireLogic.dataCache.ReadSnapData(vegasMode, cards3Mode, it.Difficulty)\n                if(snapData != null){\n                    it.ScoreLabel.string = `${snapData.score}`\n                }\n            }\n        });\n    }\n\n    //#region //! 按钮相关事件\n    private OnPlay(gameType: EGameType) {\n        this.PreLoadSkinRes(()=>{\n            ii.UIMgr.ins.Open<SolitaireGameUIPanelArgs>(SolitairePrefabCfg.pfb.panel.SolitaireGameUIPanel.key, {\n                gameType: gameType,\n                resume: false,\n                vegas: SolitaireLogic.dataCache.vegasModeBV.v,\n                card3: SolitaireLogic.dataCache.cards3ModeBV.v,\n            }, ()=>this.Close())\n        })\n    }\n    private OnOptions() {\n        ii.UIMgr.ins.Open(SolitairePrefabCfg.pfb.panel.SolitaireOptionsUIPanel.key);\n    }\n    //#endregion\n\n    // 预加载皮肤资源（可能因为选择皮肤，导致界面变化？）\n    private PreLoadSkinRes(onCompleted: Function) {\n        if(SolitaireLogic.skin.IsInitSkinChanged()) {\n            this.LoadResList([\n                ...SolitaireLogic.skin.GetPreloadResList()\n            ], onCompleted)\n        }else{\n            onCompleted();\n        }\n    }\n}\n"]}