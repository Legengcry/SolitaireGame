{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Game\\Model\\PokerGroup.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ELocation, EPokerStatus, ESuit } from \"../../SolitaireEnums\"\nimport Poker from \"./Poker\"\n\nexport interface IPokerGroupEventListener {\n    OnGroupPokerStateChanged(poker: Poker, status: EPokerStatus);\n}\n\nexport default class PokerGroup extends ii.Entity {\n    static EVENT_POKERGROUP_STATE_CHANGED: string = \"EVENT_POKERGROUP_STATE_CHANGED\"\n\n    public get top(): Poker { return this.IsPokersEmpty() ? null : this.pokers[this.pokers.length - 1] }\n    public get underTop(): Poker { return this.pokers.length < 2 ? null : this.pokers[this.pokers.length - 2]}\n    public get zero(): Poker { return this.IsPokersEmpty() ? null : this.pokers[0] }\n    public IsPokersEmpty(): boolean { return this.pokers.length === 0 }\n    public indexOfPoker(poker: Poker): number { return this.pokers.indexOf(poker) }\n    public index: number = null\n    public pokers: Poker[] = []\n    public location: ELocation = null\n    public get rootOpenPoker(): Poker {\n        for(let i=0; i<this.pokers.length; ++i){\n            if(this.pokers[i].status === EPokerStatus.OPEN){\n                return this.pokers[i]\n            }\n        }\n        return null\n    }\n    constructor(location: ELocation) {\n        super()\n        this.location = location\n    }\n    Reset() {\n        while(this.m_Listeners.length > 0) {\n            this.RemoveEventListener(this.m_Listeners.pop());\n        }\n        this.pokers = []\n    }\n    private m_Listeners: IPokerGroupEventListener[] = []\n    AddEventListener(listener: IPokerGroupEventListener) { this.on(PokerGroup.EVENT_POKERGROUP_STATE_CHANGED, listener.OnGroupPokerStateChanged.bind(listener), listener); this.m_Listeners.push(listener); }\n    private RemoveEventListener(listener: IPokerGroupEventListener) { this.targetOff(listener); }\n    \n    AddPoker(poker: Poker): Poker {\n        this.pokers.push(poker)\n        poker.group = this\n        switch (this.location) {\n            case ELocation.CLOSE:\n                if(poker.status !== EPokerStatus.CLOSE){\n                    poker.status = EPokerStatus.CLOSE\n                    this.emit(PokerGroup.EVENT_POKERGROUP_STATE_CHANGED, poker, poker.status)\n                }\n                break\n            case ELocation.OPEN:\n                if(poker.status !== EPokerStatus.OPEN){\n                    poker.status = EPokerStatus.OPEN\n                    this.emit(PokerGroup.EVENT_POKERGROUP_STATE_CHANGED, poker, poker.status)\n                }\n                break\n        }\n        return poker\n    }\n\n    IsAutoFlipOnRemovePoker(poker): boolean {\n        let pokerIndex = this.pokers.indexOf(poker)\n        console.assert(pokerIndex >= 0)\n        // 玩牌区移除牌时自动翻牌逻辑\n        if( (this.location === ELocation.PLAY)\n            && this.rootOpenPoker === poker\n            && (this.pokers[0].status !== EPokerStatus.OPEN)\n        ){\n            return true\n        }\n        return false\n    }\n\n    RemoveTop(): Poker {\n        let poker = this.top\n        if (poker) {\n            this.pokers.length = this.pokers.length - 1\n            poker.group = null\n            // 玩牌区移除牌时自动翻牌逻辑\n            if( (this.location === ELocation.PLAY)\n                && (!this.IsPokersEmpty())\n                && (this.top.status !== EPokerStatus.OPEN)\n            ){\n                this.top.status = EPokerStatus.OPEN\n                this.emit(PokerGroup.EVENT_POKERGROUP_STATE_CHANGED, this.top, poker.status)\n            }\n        }\n        return poker\n    }\n\n    GetPoker(index: number): Poker {\n        if (!this.IsPokersEmpty()) {\n            let i = index >= 0 ? index : (this.pokers.length + index)\n            if (i < this.pokers.length && i>=0) {\n                return this.pokers[i]\n            }\n        }\n        return null\n    }\n    IsConcatPoker(poker: Poker): boolean {\n        if (this.IsPokersEmpty()) {\n            return poker.point == 13\n        } else {\n            return this.top.IsConcatable(poker)\n        }\n    }\n    IsNextPoker(poker: Poker): boolean {\n        if(this.top){\n            if(this.top.suit === poker.suit){\n                return this.top.point + 1 === poker.point\n            }else{\n                return false\n            }\n        }else{\n            return poker.point === 1\n        }\n    }\n    GetOpenPokers(): Poker[] {\n        let pokers = []\n        for(let i=0; i<this.pokers.length; ++i){\n            if(this.pokers[i].status == EPokerStatus.OPEN) {\n                pokers.push(this.pokers[i])\n            }\n        }\n        return pokers\n    }\n\n    GetPokerIndexBySuitPoint(suit: ESuit, point: number, status: EPokerStatus): number {\n        if (!this.IsPokersEmpty()) {\n            for(let i=0; i<this.pokers.length; ++i){\n                let poker = this.pokers[i];\n                if(poker.status === status && poker.suit == suit && poker.point === point) {\n                    return i;\n                }\n            }\n        }\n        return -1\n    }\n}\n"]}