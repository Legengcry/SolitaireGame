{"version":3,"sources":["assets\\GameBundles\\Solitaire\\Script\\Themes\\UIThemeMenuContentPokerBack.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,4DAA2D;AAC3D,sEAAqF;AACrF,2DAAsD;AAIhD,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAQ1C;IAAyD,+CAAmD;IAA5G;QAAA,qEA2BC;QA1BoC,gBAAU,GAAkB,IAAI,CAAA;QAEzD,iBAAW,GAA0C,EAAE,CAAA;;IAwBnE,CAAC;IAtBa,8CAAQ,GAAlB,cAA6B,CAAC;IACpB,+CAAS,GAAnB,cAA8B,CAAC;IACrB,4CAAM,GAAhB,UAAiB,MAAuC;QAAxD,iBASC;QARG,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,iDAAuB,CAAC,gBAAgB,CAAC,OAAO,CAAE,UAAA,IAAI;YAClD,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAA+E,uCAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,mCAAmC,CAAC,GAAG,EAAE;gBACzL,IAAI,MAAA;gBACJ,OAAO,SAAA;aACV,EAAE,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAI,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IACO,iDAAW,GAAnB,UAAoB,QAAwB,EAAE,IAA4C;QACtF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED,4CAAM,GAAN,UAAO,QAAwB;QAC3B,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QAC7B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAnB,CAAmB,CAAC,CAAA;IACvD,CAAC;IAED,iDAAW,GAAX,UAAY,IAAmB,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAzBvC;QAAxB,QAAQ,CAAC,EAAE,CAAC,UAAU,CAAC;mEAAyC;IADhD,2BAA2B;QAD/C,OAAO;OACa,2BAA2B,CA2B/C;IAAD,kCAAC;CA3BD,AA2BC,CA3BwD,4BAAkB,GA2B1E;kBA3BoB,2BAA2B","file":"","sourceRoot":"/","sourcesContent":["import { SolitaireSkin } from \"../DataCache/SolitaireSkinDataCache\";\nimport { SolitairePrefabCfg } from \"../SolitairePrefabCfg\";\nimport { SolitaireSpriteFrameCfg, TPokerBackSkin } from \"../SolitaireSpriteFrameCfg\";\nimport UIThemeMenuContent from \"./UIThemeMenuContent\";\nimport UIThemeMenuContentPokerBackKindItem, { UIThemeMenuContentPokerBackKindItemArgs } from \"./UIThemeMenuContentPokerBackKindItem\";\nimport UIThemeMenuContentPokerBackKindSubItem from \"./UIThemeMenuContentPokerBackKindSubItem\";\n\nconst {ccclass, property} = cc._decorator;\n\nexport type UIThemeMenuContentPokerBackArgs = {\n    backSkin: TPokerBackSkin,\n    OnSelect(content: UIThemeMenuContentPokerBack, backSkin: TPokerBackSkin)\n}\n\n@ccclass\nexport default class UIThemeMenuContentPokerBack extends UIThemeMenuContent<UIThemeMenuContentPokerBackArgs> {\n    @property(cc.ScrollView) private scrollView: cc.ScrollView = null\n    \n    private m_itemArray: UIThemeMenuContentPokerBackKindItem[] = []\n    \n    protected OnCreate(): void { }\n    protected OnRelease(): void { }\n    protected OnOpen(uiArgs: UIThemeMenuContentPokerBackArgs): void {\n        let onClick = this.OnItemClick.bind(this);\n        SolitaireSpriteFrameCfg.pokerBackKindCfg.forEach( kind => {\n            this.m_itemArray.push(ii.UIMgr.ins.Create<UIThemeMenuContentPokerBackKindItem, UIThemeMenuContentPokerBackKindItemArgs>(SolitairePrefabCfg.pfb.comp.UIThemeMenuContentPokerBackKindItem.key, {\n                kind,\n                onClick\n            }, this.scrollView.content).CloseBy(this));\n        })\n        this.Select(this.args.backSkin);\n    }\n    private OnItemClick(backSkin: TPokerBackSkin, item: UIThemeMenuContentPokerBackKindSubItem) {\n        this.args.OnSelect(this, backSkin);\n    }\n\n    Select(backSkin: TPokerBackSkin) {\n        ii.AudioMgr.ins.PlayEffect();\n        this.m_itemArray.forEach(it => it.Select(backSkin))\n    }\n\n    OnResetSkin(skin: SolitaireSkin) { this.Select(skin.backSkin); }\n}\n"]}